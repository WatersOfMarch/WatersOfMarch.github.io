<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>List问题总结</title>
    <url>/2021/11/26/List%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="相爱相杀好基友——数组与链表"><a href="#相爱相杀好基友——数组与链表" class="headerlink" title="相爱相杀好基友——数组与链表"></a>相爱相杀好基友——数组与链表</h2><p>作为线性表的两种存储方式—-链表和数组，各有优缺点</p>
<h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p><strong>无法高效获取长度，无法根据下标快速找到访问元素，是链表的两个劣势；</strong>然而面试中会经常碰到诸如<font color="yellow">如何获取第k个元素</font>、<font color="yellow">获取中间位置元素、</font><font color="yellow">判断链表是否存在环、</font><font color="yellow">判断环的长度</font>这些与长度和位置有关的问题。都可以用双指针来解决</p>
<p><strong>Tips：双指针并不是固定的公式，而是一种思维方式</strong></p>
<ol>
<li>倒数第k个问题</li>
</ol>
<p>设有两个指针 p 和 q，初始时都指向头节点。首先，先让 q 沿着 next 移动 k 次；此时，p 指向头节点，q 指向 k+1 个节点，两个指针的距离为 k。然后，同时移动 p 和 q，直到 q 指向空，此时，p 指向倒数第 k 个节点</p>
<p><img src="https://pic.leetcode-cn.com/8fc9ef022554d2a062db6a70d5199dbbb2a154ba1e64f0f697319bb0ef9ac680.png" alt="移动过程中保持距离为 k "></p>
<ol start="2">
<li><p>获取中间元素问题</p>
<ol>
<li><p>遍历一遍链表，得知链表长度；即可知道中间元素，再次遍历（u1s1，有点蠢）</p>
</li>
<li><p>设有两个指针 a 和 b。每次移动时，a 向前走一次，b 向前走两次，直到 b 无法再走两次；即 b.next.next=null ；</p>
<p>设链表长度为 n，那么最多移动 n/2 轮。当 n 为<strong>奇数</strong>，a 恰好指向中间节点；当 n 为<strong>偶数</strong>，a 恰好指向中间两个节点靠前的那个</p>
</li>
</ol>
</li>
</ol>
<p><img src="https://pic.leetcode-cn.com/7984572cea859a3d569932934fe6580abf3f59221ec95911f662f1f19b6822aa.png" alt="快慢指针"></p>
<ol start="3">
<li><p>是否存在环的问题。如果尾节点的指针指向其他任意一个节点，就代表有环的存在</p>
<p><img src="https://pic.leetcode-cn.com/ea4aff71116d6c483b2b34519497d39d640435cb3ce12ea1b40dd453c45b59fd.png" alt="一个有环的链表"></p>
<p>当链表有环，快慢指针会陷入无限次移动，然后变成追击问题；快指针一次移动两步，慢指针一次移动一步；只要一直移动下去，快指针总会追上慢指针；<font color="yellow">快慢指针相遇</font>，代表有环的存在</p>
<p><img src="https://pic.leetcode-cn.com/d1ac82780e5189d7d58406504c3b7b56c35165997bfbb4c325677af92ee2d483.gif" alt="快慢指针在环上追及"></p>
</li>
<li><p>最后，如果存在环，如何判断环的长度？快慢指针继续移动，<font color="yellow">直到相遇第二次。</font>两次相遇间的移动次数即为环的长度</p>
</li>
</ol>]]></content>
  </entry>
  <entry>
    <title>Nginx相关介绍</title>
    <url>/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Nginx-相关介绍-Nginx是什么？能干嘛？"><a href="#Nginx-相关介绍-Nginx是什么？能干嘛？" class="headerlink" title="Nginx 相关介绍(Nginx是什么？能干嘛？)"></a>Nginx 相关介绍(Nginx是什么？能干嘛？)</h1><h2 id="Nginx的产生"><a href="#Nginx的产生" class="headerlink" title="Nginx的产生"></a>Nginx的产生</h2><p>　　没有听过Nginx？那么一定听过它的”同行”Apache吧！Nginx同Apache一样都是一种WEB服务器，基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。</p>
<p>　　然而，这些服务器在设计之初受到当时环境的局限，例如当时的用户规模，网络带宽，产品特点等局限并且各自的定位和发展都不尽相同。这也使得各个WEB服务器有着各自鲜明的特点。</p>
<p>　　Apache的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。它是不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。</p>
<p>　　这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。</p>
<p>　　俄罗斯的工程师Igor Sysoev，他在为Rambler Media工作期间，使用C语言开发了Nginx。Nginx作为WEB服务器一直为Rambler Media提供出色而又稳定的服务。</p>
<p>然后呢，Igor Sysoev将Nginx代码开源，并且赋予自由软件许可证。</p>
<p>　　由于：</p>
<ul>
<li>Nginx使用基于事件驱动架构，使得其可以支持数以百万级别的TCP连接</li>
<li>高度的模块化和自由软件许可证使得第三方模块层出不穷（这是个开源的时代啊~）</li>
<li>Nginx是一个跨平台服务器，可以运行在Linux，Windows，FreeBSD，Solaris，AIX，Mac OS等操作系统上</li>
<li>这些优秀的设计带来的是极大的稳定性</li>
</ul>
<p>　　所以，Nginx火了！</p>
<h2 id="Nginx的用武之地"><a href="#Nginx的用武之地" class="headerlink" title="Nginx的用武之地"></a>Nginx的用武之地</h2><p>　　Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p>
<h3 id="关于代理"><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h3><p>　　说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；</p>
<p>　　此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店~客人到adidas专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是adidas厂家，目标角色就是用户。</p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>　　说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触的到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理。</p>
<p>　　在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个操作FQ进行访问，FQ的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</p>
<p>　　上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。来看个示意图（我把客户端和正向代理框在一块，同属于一个环境，后面我有介绍）：</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20181211123717325-1261206014.png" alt="img"></p>
<p>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</p>
<p>　　总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>　　<strong>正向代理的用途：</strong><br>（1）访问原来无法访问的资源，如Google<br>（2）可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>　　明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：<strong>分布式部署</strong>；也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/%E3%80%82%E9%82%A3%E4%B9%88%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%85%B7%E4%BD%93%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C%E5%91%A2%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%AA%E7%A4%BA%E6%84%8F%E5%9B%BE%EF%BC%88%E6%88%91%E6%8A%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%A1%86%E5%9C%A8%E4%B8%80%E5%9D%97%EF%BC%8C%E5%90%8C%E5%B1%9E%E4%BA%8E%E4%B8%80%E4%B8%AA%E7%8E%AF%E5%A2%83%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%88%91%E6%9C%89%E4%BB%8B%E7%BB%8D%EF%BC%89%EF%BC%9A">http://tengine.taobao.org/。那么反向代理具体是通过什么样的方式实现的分布式的集群操作呢，我们先看一个示意图（我把服务器和反向代理框在一块，同属于一个环境，后面我有介绍）：</a></p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406175939873-925019958.png" alt="img"></p>
<p>　　通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p>
<p>　　客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p>
<p>　　反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p>
<p>　　<strong>反向代理的作用：</strong><br>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网<br>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>
<h3 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h3><p>　　通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在在一个应用场景中，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器。具体的拓扑图如下：</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406180130452-1246060303.png" alt="img"></p>
<h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><p>　　截了一张图来说明正向代理和反向代理二者之间的区别，如图。</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20181211122806997-940664368.png" alt="img"></p>
<p>图解：</p>
<p>在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息；</p>
<p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p>
<p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>　　我们已经明确了所谓代理服务器的概念，那么接下来，Nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p>
<p>　　这里提到的客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p>
<p>　　请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p>
<p>　　所以，将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p>
<p>　　负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406180405961-333776342.png" alt="img"></p>
<p><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p>
<ol>
<li>weight轮询（默认，常用，具有HA功效！）：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li>
<li>ip_hash（常用）：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li>
<li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li>
<li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li>
</ol>
<h2 id="几种常用的web服务器对比"><a href="#几种常用的web服务器对比" class="headerlink" title="几种常用的web服务器对比"></a>几种常用的web服务器对比</h2><table>
<thead>
<tr>
<th>对比项\服务器</th>
<th>Apache</th>
<th>Nginx</th>
<th>Lighttpd</th>
</tr>
</thead>
<tbody><tr>
<td>Proxy代理</td>
<td>非常好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Rewriter</td>
<td>好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Fcgi</td>
<td>不好</td>
<td>好</td>
<td>非常好</td>
</tr>
<tr>
<td>热部署</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>系统压力</td>
<td>很大</td>
<td>很小</td>
<td>比较小</td>
</tr>
<tr>
<td>稳定性</td>
<td>好</td>
<td>非常好</td>
<td>不好</td>
</tr>
<tr>
<td>安全性</td>
<td>好</td>
<td>一般</td>
<td>一般</td>
</tr>
<tr>
<td>静态文件处理</td>
<td>一般</td>
<td>非常好</td>
<td>好</td>
</tr>
<tr>
<td>反向代理</td>
<td>一般</td>
<td>非常好</td>
<td>一般</td>
</tr>
</tbody></table>
<ul>
<li>proxy代理的使用（解决跨域，配置多个代理）</li>
<li>Rewriter：隐藏路径或者隐藏参数的作用</li>
<li>fcgi作为中间层，需要与后端server通信进行数据处理</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Nginx部署Vue项目</title>
    <url>/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Nginx部署Vue项目"><a href="#Nginx部署Vue项目" class="headerlink" title="Nginx部署Vue项目"></a>Nginx部署Vue项目</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>下载 Xshell 连接阿里云服务器</li>
<li>下载 Xftp 便于管理文件和上传文件</li>
<li>打包好 vue 项目，出现一个dist文件夹，注意里头使用绝对路径</li>
</ol>
<h2 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h2><p>我的阿里云服务器装的 CentOS 系统，使用命令安装：</p>
<p>官方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>国内：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>

<p>启动 Docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>



<h2 id="三、通过-Docker-安装-Nginx"><a href="#三、通过-Docker-安装-Nginx" class="headerlink" title="三、通过 Docker 安装 Nginx"></a>三、通过 Docker 安装 Nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images             ------------列出本地镜像</span><br></pre></td></tr></table></figure>

<p>先查看下本地镜像，没有结果，因为还没有镜像，但也说明了我们 Docker 已经安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search nginx       ------------找到nginx相关镜像服务，后头是介绍</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908102511105.png" alt="image-20210908102511105"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx       ------------安装nginx</span><br><span class="line">docker images           ------------安装后再次查看</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908102817179.png" alt="image-20210908102817179"></p>
<p>启动该镜像，使用nginx服务，代理本机8080端口（服务器安全组需要开放8080端口）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name nginx-8080 nginx</span><br><span class="line"></span><br><span class="line">-d: 后台运行</span><br><span class="line">8080: 服务器端口</span><br><span class="line">80： nginx端口</span><br><span class="line">nginx-8080: 取容器名为此</span><br><span class="line">nginx: 镜像名</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps               ------------查看安装的容器，安装后会有一个id号</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908103920679.png" alt="image-20210908103920679"></p>
<p><strong>Docker 命令：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images                ------------列出本地镜像</span><br><span class="line">docker ps                    ------------列出容器(跑着的)</span><br><span class="line">docker ps -a                 ------------列出容器(跑+没跑)</span><br><span class="line">docker stop nginx-8080       ------------停止名为nginx-8080的服务</span><br><span class="line">docker restart nginx-8080    ------------重启</span><br></pre></td></tr></table></figure>



<p>在浏览器访问服务器 ip：8080  出现该图说明成功</p>
<img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908114359253.png" alt="image-20210908114359253" style="zoom: 80%;">



<h2 id="四、将vue项目上传到服务器上"><a href="#四、将vue项目上传到服务器上" class="headerlink" title="四、将vue项目上传到服务器上"></a>四、将vue项目上传到服务器上</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin             ------------里头的nginx用于启动</span><br><span class="line">/usr/local/nginx/conf/nginx.conf  ------------配置文件</span><br><span class="line">ps -ef | grep nginx               ------------查看安装目录</span><br></pre></td></tr></table></figure>

<p>用 Xftp 把 dist 文件夹上传到服务器，<strong>注意不要放在/root下，nginx访问不到root</strong></p>
<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908115305556.png" alt="image-20210908115305556"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">进入配置文件，按 i 进入编辑模式，按 Esc 退出编辑</span><br><span class="line">:q    退出</span><br><span class="line">：wq  保存操作退出</span><br></pre></td></tr></table></figure>

<img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908115916541.png" alt="image-20210908115916541" style="zoom:80%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启服务：(每次修改完都要保存重启)：</span><br><span class="line"></span><br><span class="line">让服务定位到配置文件：</span><br><span class="line">/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<p>打开浏览器访问公网地址，就能看到界面啦！！！</p>
<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908120431261.png" alt="image-20210908120431261"></p>
<h2 id="五、错误总结"><a href="#五、错误总结" class="headerlink" title="五、错误总结"></a>五、错误总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">404     ------------找不到文件，配置文件中 try_files未指定文件</span><br><span class="line">500     ------------路径对了，服务无法访问，因为文件放在/root里了</span><br><span class="line">访问后页面白屏  ------程序里没有是绝对路径</span><br><span class="line">有的页面部分图片加载不出   -------应该是我的服务器配置不够</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考文档：</span><br><span class="line">部署：</span><br><span class="line">https://blog.csdn.net/longqizhanshen/article/details/106963318</span><br><span class="line">https://www.jianshu.com/p/05f889faa74b</span><br><span class="line">报错：</span><br><span class="line">https://blog.csdn.net/weixin_43465090/article/details/89027047</span><br><span class="line">https://blog.csdn.net/qq_43059674/article/details/110296807</span><br><span class="line">https://blog.csdn.net/Xu_JL1997/article/details/105751623</span><br></pre></td></tr></table></figure>

<p>我们的项目是前后端分离，这样的话，就把8080端口占用掉了，需要把后端换个端口</p>]]></content>
  </entry>
  <entry>
    <title>springboot查询</title>
    <url>/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/</url>
    <content><![CDATA[<h1 id="SpringBoot-MyBatis-查询语句-（根据条件查询）"><a href="#SpringBoot-MyBatis-查询语句-（根据条件查询）" class="headerlink" title="SpringBoot + MyBatis 查询语句  （根据条件查询）"></a>SpringBoot + MyBatis 查询语句  （根据条件查询）</h1><h3 id="1-新建数据库和表内容"><a href="#1-新建数据库和表内容" class="headerlink" title="1.新建数据库和表内容"></a>1.新建数据库和表内容</h3><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722152711177.png"></p>
<p>全部根据 tt 中的数据进行查询</p>
<h3 id="2-创建工程目录结构（springboot创建好后）"><a href="#2-创建工程目录结构（springboot创建好后）" class="headerlink" title="2.创建工程目录结构（springboot创建好后）"></a>2.创建工程目录结构（springboot创建好后）</h3><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722152928143.png"></p>
<ul>
<li>pom.xml依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kejian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis.jar--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mySql的驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml（修改全局变量）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接数据库（我的是数据库名是kejain）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/kejian?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="comment">#?后增加编码格式</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> <span class="comment">#数据库用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment">#数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#扫描相关文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在resources目录下新建mybatis-config.xml（按需求添加，可以不要）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     使用jdbc的getGeneratedKeys获得数据库自增主键值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--           使用列标签替换列别名，默认true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        开启驼峰命名create_time-&gt;createTime--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>至此基础配置OK，在目录下添加类</strong></p>
<h2 id="3-entity层下添加实体类"><a href="#3-entity层下添加实体类" class="headerlink" title="3.entity层下添加实体类"></a>3.entity层下添加实体类</h2><p>entity包也有叫 pojo, damain， 都是一个意思</p>
<ul>
<li>新建 Poem.java（添加实体类，和数据库对应）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String tt;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String A;</span><br><span class="line">    <span class="keyword">private</span> String B;</span><br><span class="line">    <span class="keyword">private</span> String C;</span><br><span class="line">    <span class="keyword">private</span> String D;</span><br><span class="line">    <span class="keyword">private</span> String letter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTt</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tt = tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        A = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(String b)</span> </span>&#123;</span><br><span class="line">        B = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        C = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> D;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setD</span><span class="params">(String d)</span> </span>&#123;</span><br><span class="line">        D = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> letter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLetter</span><span class="params">(String letter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.letter = letter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Poem&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, time=&#x27;&quot;</span> + tt + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, A=&#x27;&quot;</span> + A + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, B=&#x27;&quot;</span> + B + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, C=&#x27;&quot;</span> + C + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, D=&#x27;&quot;</span> + D + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, letter=&#x27;&quot;</span> + letter + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-添加-mapper-操纵数据库"><a href="#4-添加-mapper-操纵数据库" class="headerlink" title="4.添加 mapper 操纵数据库"></a>4.添加 mapper 操纵数据库</h2><p>dao 层名为持久层，也可叫 mapper 层</p>
<ul>
<li>dao 层下新建PoemMapper.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PoemMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//因为需要返回多个，设为List</span></span><br><span class="line">    <span class="function">List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(<span class="meta">@Param(&quot;tt&quot;)</span>String time)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>resources 下新建 mapper 文件夹，存放dao 层 mapper 的映射文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是命名空间，对应dao层mapper文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.first_demo3.dao.PoemMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id名对应dao层mapper的函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findSome&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.first_demo3.entity.Poem&quot;</span>&gt;</span></span><br><span class="line">        select id,title,A,B,C,D,letter from poem where tt = #&#123;tt&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-添加业务逻辑"><a href="#5-添加业务逻辑" class="headerlink" title="5.添加业务逻辑"></a>5.添加业务逻辑</h2><p>service层为业务逻辑层，处理算法并返回数据给界面层</p>
<ul>
<li>service下新建 PoemService.java 选择接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PoemService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(String time)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>service下新建impl文件夹，管理映射</li>
<li>impl下新建PoemServiceImpl.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoemServiceImpl</span> <span class="keyword">implements</span> <span class="title">PoemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PoemMapper poemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> poemMapper.findSome(tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-终于可以写接口了"><a href="#6-终于可以写接口了" class="headerlink" title="6.终于可以写接口了"></a>6.终于可以写接口了</h2><p>controller 层又名界面层，调用 service</p>
<ul>
<li>controller 下新建PoemController.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">PoemController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> PoemService poemService;        </span><br><span class="line">    <span class="comment">//查找后返回部分数据    </span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get/&#123;tt&#125;&quot;)</span>    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Poem&gt;getSome(<span class="meta">@PathVariable</span> String tt)&#123;        <span class="keyword">return</span> poemService.findSome(tt);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-PostMan测试接口"><a href="#7-PostMan测试接口" class="headerlink" title="7.PostMan测试接口"></a>7.PostMan测试接口</h2><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722160646581.png"></p>
<p>其他的雷同，在 /get/  输入对应的 tt 值就可调用</p>
<p><strong>最终的目录</strong></p>
<p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722160822033.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    The author disclaims copyright to this source code.</span></span><br><span class="line"><span class="comment">**    In place of a legal notice, here is a blessing:</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**    May you do good and not evil.</span></span><br><span class="line"><span class="comment">**    May you find forgiveness for yourself and forgive others.</span></span><br><span class="line"><span class="comment">**    May you share freely, never taking more than you give.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>初探返回类</title>
    <url>/2021/08/05/%E5%88%9D%E6%8E%A2%E8%BF%94%E5%9B%9E%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="初探返回类"><a href="#初探返回类" class="headerlink" title="初探返回类"></a>初探返回类</h1><h2 id="为什么要对SpringBoot返回统一的标准格式"><a href="#为什么要对SpringBoot返回统一的标准格式" class="headerlink" title="为什么要对SpringBoot返回统一的标准格式"></a>为什么要对SpringBoot返回统一的标准格式</h2><p>默认情况下，SpringBoot的返回格式常见的有三种：</p>
<ul>
<li>返回String</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello,javadaily&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,javadaily</span><br></pre></td></tr></table></figure>

<ul>
<li>返回自定义对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/aniaml&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Aniaml <span class="title">getAniaml</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Aniaml aniaml = <span class="keyword">new</span> Aniaml(<span class="number">1</span>,<span class="string">&quot;pig&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> aniaml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pig&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/error&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">9</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-07-08T08:05:15.423+00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/wrong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于上述情况，如果和前端开发人员联调接口，前端人员就会一脸懵逼；由于我们没有给他统一的格式，所以无法处理这些返回值</p>
<p>或者，不同的人对结果进行封装，小明用Result对象，小张用Response对象，这样也是会抓狂的  ╭(°A°`)╮ </p>
<p>所以项目需要一个统一返回格式标准，一般公司开发都或有统一的格式要求</p>
<h2 id="定义返回标准格式"><a href="#定义返回标准格式" class="headerlink" title="定义返回标准格式"></a>定义返回标准格式</h2><p>一个标准的返回格式包括三个部分：</p>
<ol>
<li>status 状态值：由后端统一定义各种返回结果的状态码</li>
<li>message 描述：本次接口调用的结果描述</li>
<li>data 数据：本次返回的数据</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>:<span class="string">&quot;hello,javadaily&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以按照需要添加需要的信息</p>
<p>一种方式是可以直接在controller中返回成功的信息，但比较蠢，还会重复很多相同的动作，所以我们用一种更加便捷的方式来调用它</p>
<p><strong>创建一个枚举类 BackEnum 来存放所有的返回值结构</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 枚举类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BackEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 请求数据成功，无异常情况 */</span></span><br><span class="line">    REQUEST_SUCCESS(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 服务器异常 */</span></span><br><span class="line">    UNKNOWN_ERROR(<span class="number">500</span>,<span class="string">&quot;未知错误&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 无法获得用户session信息，或用户session信息不存在 */</span></span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>,<span class="string">&quot;请先登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 前端数据参数错误 */</span></span><br><span class="line">    PARAM_ERROR(<span class="number">400</span>,<span class="string">&quot;参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据不符合要求 */</span></span><br><span class="line">    DATA_ERROR(<span class="number">400</span>,<span class="string">&quot;数据错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求方式错误，get/post等 */</span></span><br><span class="line">    REQUEST_METHOD_ERROR(<span class="number">405</span>,<span class="string">&quot;请求方式错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码错误 */</span></span><br><span class="line">    PWD_ERROR(<span class="number">2</span>,<span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户名不存在 */</span></span><br><span class="line">    NO_USER(<span class="number">3</span>,<span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 账号长度过短，一般用于注册 */</span></span><br><span class="line">    ACCOUNT_LESS(<span class="number">4</span>,<span class="string">&quot;账号小于6位&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码长度过短，一般用于注册 */</span></span><br><span class="line">    PASSWORD_LESS(<span class="number">5</span>,<span class="string">&quot;密码过短&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据库已存在该数据 */</span></span><br><span class="line">    REPETITION(<span class="number">7</span>, <span class="string">&quot;数据重复添加&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">//注意语句间“逗号”隔开，语句最后“分号”结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举的构造函数是缺省的</span></span><br><span class="line">    BackEnum(Integer code, String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> message; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用生成 set 方法，因为ORDER_CREATE_FAIL已经吧code和message赋值了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>创建返回类 BackMessage 执行刚才的枚举类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.first_demo3.back.BackEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackMessage</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标识返回状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//返回成功或失败的一个消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//返回的数据类型，Object 在开发中返回的数据类型不确定</span></span><br><span class="line">    <span class="comment">//后续可以用泛型来解决</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何为属性赋值：一个构造函数，set方法</span></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(BackEnum backEnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=backEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message=backEnum.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(BackEnum backEnum, Object t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=backEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message=backEnum.getMessage();</span><br><span class="line">        <span class="keyword">this</span>.data=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重要的是上面3个构造函数，可以重载，通过参数来确定调用哪个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123; <span class="keyword">this</span>.code = code;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> message; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123; <span class="keyword">this</span>.data = data; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里返回中的data数据我使用的是 Object 类型，后续可以使用泛型<T>来定义</T></li>
</ul>
<h2 id="测试测试！！！-ง-•̀-•́-ง"><a href="#测试测试！！！-ง-•̀-•́-ง" class="headerlink" title="测试测试！！！ (ง •̀_•́)ง"></a>测试测试！！！ (ง •̀_•́)ง</h2><p>数据库信息：表名为check</p>
<p><img src="/2021/08/05/%E5%88%9D%E6%8E%A2%E8%BF%94%E5%9B%9E%E7%B1%BB/image-20210805181202470.png" alt="image-20210805181202470"></p>
<p>实体类就不贴出来了，就这些信息</p>
<p><strong>dao层的CheckMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(String number)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCheck</span><span class="params">(Check check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CheckMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;get&quot;</span> resultType=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><br><span class="line">    SELECT n</span><br><span class="line">    FROM `check`</span><br><span class="line">    WHERE picture = #&#123;picture&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=<span class="string">&quot;updateCheck&quot;</span> parameterType=<span class="string">&quot;com.example.first_demo3.entity.Check&quot;</span>&gt;</span><br><span class="line">    update `check`</span><br><span class="line">    set n = #&#123;n,jdbcType=VARCHAR&#125;</span><br><span class="line">    where picture = #&#123;picture&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<p>重头重头！！！</p>
<p><strong>service层CheckService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckService</span> </span>&#123;</span><br><span class="line">    <span class="function">BackMessage <span class="title">get</span><span class="params">(String number)</span></span>;</span><br><span class="line">    <span class="function">BackMessage <span class="title">updateCheck</span><span class="params">(Check check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CheckServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckServiceImpl</span> <span class="keyword">implements</span> <span class="title">CheckService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CheckMapper checkMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">get</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">        String p = checkMapper.get(number);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BackMessage</span><br><span class="line">            (BackEnum.REQUEST_SUCCESS,p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">updateCheck</span><span class="params">(Check check)</span> </span>&#123;</span><br><span class="line">        checkMapper.updateCheck(check);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BackMessage</span><br><span class="line">            (BackEnum.REQUEST_SUCCESS,<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>controller层CheckController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CheckService checkService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get/&#123;picture&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> String picture)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkService.get(picture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCheck</span><span class="params">(<span class="meta">@RequestBody</span> Check check)</span></span>&#123;</span><br><span class="line">        checkService.updateCheck(check);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>postman测试</strong></p>
<p>获取值接口：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">localhost:8081/check/get/1</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;111&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改接口：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">localhost:8081/update</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;picture&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;n&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此返回类成功写成，其余返回值大同小异</p>
<p>返回类的具体内容还可参照：</p>
<p><a href="https://zhuanlan.zhihu.com/p/391288136">SpringBoot 如何统一后端返回格式？老鸟们都是这样玩的！ - 知乎 (zhihu.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    The author disclaims copyright to this source code.</span></span><br><span class="line"><span class="comment">**    In place of a legal notice, here is a blessing:</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**    May you do good and not evil.</span></span><br><span class="line"><span class="comment">**    May you find forgiveness for yourself and forgive others.</span></span><br><span class="line"><span class="comment">**    May you share freely, never taking more than you give.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Javaweb</title>
    <url>/2021/11/17/Javaweb/</url>
    <content><![CDATA[<h1 id="javaWeb"><a href="#javaWeb" class="headerlink" title="javaWeb"></a>javaWeb</h1><p><a href="http://c.biancheng.net/servlet2/what-is-servlet.html">Servlet到底是什么（非常透彻） (biancheng.net)</a></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="1-1前言"><a href="#1-1前言" class="headerlink" title="1.1前言"></a>1.1前言</h3><p>web开发：</p>
<ul>
<li><p>web，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a></p>
</li>
<li><p>静态web</p>
<ul>
<li>html,css</li>
<li>提供给所有人看的数据不会变化</li>
</ul>
</li>
<li><p>动态web</p>
<ul>
<li>淘宝，几乎所有的网站</li>
<li>每个人看的数据会变化，不同时间，不同地点看到的都不同</li>
<li>技术栈：Servlet/JSP，ASP，PHP</li>
</ul>
<p>在java中，动态web资源开发的技术统称为javaWeb</p>
</li>
</ul>
<h3 id="1-2web应用程序"><a href="#1-2web应用程序" class="headerlink" title="1.2web应用程序"></a>1.2web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；（a.html、b.html…）</p>
<ul>
<li><p>URL</p>
</li>
<li><p>这个统一的web资源会放在同一个文件夹下，web应用程序—&gt;Tomcat：服务器</p>
</li>
<li><p>一个web应用由多个部分组成（静态web，动态web）</p>
<ul>
<li>html, css, js</li>
<li>jsp, servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
<p>web应用程序编写完成后，若想提供给外界访问；需要一个服务器来统一管理</p>
</li>
</ul>
<h3 id="1-3静态web"><a href="#1-3静态web" class="headerlink" title="1.3静态web"></a>1.3静态web</h3><ul>
<li>*.htm, *.html, 都是网页后缀，如果服务器上一直存在这些，就可以直接访问</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211104192853102.png" alt="image-20211104192853102"></p>
<ul>
<li>静态web存在的缺点<ul>
<li>Web页面无法更新，所有用户看到的都是一样的内容<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript[实际开发，它用的多]</li>
<li>VBScript(微软用)</li>
</ul>
</li>
<li>它无法和数据库交互(数据无法持久化，用户无法交互)</li>
</ul>
</li>
</ul>
<h3 id="1-4动态web"><a href="#1-4动态web" class="headerlink" title="1.4动态web"></a>1.4动态web</h3><p>页面可以动态展示，“Web的页面展示效果因人而异”</p>
<p><img src="/2021/11/17/Javaweb/image-20211104194226662.png" alt="image-20211104194226662"></p>
<p>缺点</p>
<ul>
<li>加入服务器的动态web资源出现错误，需要重新编写<strong>后台程序</strong>，然后发布<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点</p>
<ul>
<li>web页面可以动态更新，所有用户看到的页面不一样</li>
<li>可以和数据库交互（数据持久化：注册，商品信息..）</li>
</ul>
<h2 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2.web服务器"></a>2.web服务器</h2><h3 id="2-1技术讲解"><a href="#2-1技术讲解" class="headerlink" title="2.1技术讲解"></a>2.1技术讲解</h3><p>ASP：</p>
<ul>
<li>微软：国内最早流行的就是ASP</li>
<li>在HTML中嵌入VB脚本，ASP+COM</li>
<li>在ASP开发中，基本一个页面都有上千行的业务代码，页面及其混乱</li>
<li>维护成本高！</li>
<li>C#</li>
<li>IIS</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            &lt;%</span><br><span class="line">               System.out.println(&quot;hello&quot;)</span><br><span class="line">               %&gt;&lt;/%&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP:</p>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码很简单</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p>JSP/Servlet:</p>
<p>B/S:浏览器和服务器</p>
<p>C/S:客户端和服务端</p>
<ul>
<li>sun公司主推的B/S架构</li>
<li>基于Java语言的（所有的大公司，或者一些开源的组件，都用）</li>
<li>可以承载三高问题带来的影响：高并发，高可用，高性能</li>
<li>语法像ASP，加强市场强度</li>
</ul>
<h3 id="2-2web服务器"><a href="#2-2web服务器" class="headerlink" title="2.2web服务器"></a>2.2web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息</p>
<p><strong>IIS</strong></p>
<p>微软的；ASP…，Windows中自带的</p>
<p><strong>Tomcat</strong></p>
<p><img src="/2021/11/17/Javaweb/image-20211104200606748.png" alt="image-20211104200606748"></p>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学javaWeb的人来说，是最佳选择</p>
<p>Tomcat和<a href="https://baike.baidu.com/item/IIS">IIS</a>等Web服务器一样，Tomcat最新版本为10.0.5<strong>。</strong></p>
<p>工作3-5年，手写Tomcat</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>java的添加机制：jdk–&gt;jre–&gt;lib–&gt;rt.jar    (jar包就是压缩包)</p>
<p>预览下可看到类：如String</p>
<p><img src="/2021/11/17/Javaweb/image-20211104201836112.png" alt="image-20211104201836112"></p>
<h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3.Tomcat"></a>3.Tomcat</h2><h3 id="3-1Tomcat启动和配置"><a href="#3-1Tomcat启动和配置" class="headerlink" title="3.1Tomcat启动和配置"></a>3.1Tomcat启动和配置</h3><p>进入Tomcat文件夹下：</p>
<p><img src="/2021/11/17/Javaweb/image-20211104162043831.png" alt="image-20211104162043831"></p>
<p><img src="/2021/11/17/Javaweb/image-20211104162147641.png" alt="image-20211104162147641"></p>
<p>/bin 文件下：</p>
<p><img src="/2021/11/17/Javaweb/image-20211104162550525.png" alt="image-20211104162550525"></p>
<h3 id="3-2配置"><a href="#3-2配置" class="headerlink" title="3.2配置"></a>3.2配置</h3><p>配置启动端口号（进入server.xml）：</p>
<ul>
<li>Tomcat默认启动端口：8080</li>
<li>mysql：3306</li>
<li>http:80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置主机名称：</p>
<ul>
<li>默认的主机名：localhost-&gt;127.0.0.1</li>
<li>默认网站应用存放的位置：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.liuchang.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="高难度面试题"><a href="#高难度面试题" class="headerlink" title="高难度面试题"></a><strong>高难度面试题</strong></h3><p>请你谈谈网站是如何访问的！</p>
<ol>
<li><p>输入域名；回车</p>
</li>
<li><p>(访问域名后检查客户端的host配置文件)检查<strong>本机</strong>的 C:\Windows\System32\drivers\etc\hosts 配置文件下有没有这个域名映射</p>
<ul>
<li>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       www.liuchang.com</span><br></pre></td></tr></table></figure>

<ul>
<li>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</li>
</ul>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211104165742268.png" alt="image-20211104170209976"></p>
<p><img src="/2021/11/17/Javaweb/image-20211104170033543.png" alt="image-20211104170033543"></p>
<h2 id="4-HTTP"><a href="#4-HTTP" class="headerlink" title="4.HTTP"></a>4.HTTP</h2><h3 id="4-1什么是HTTP"><a href="#4-1什么是HTTP" class="headerlink" title="4.1什么是HTTP"></a>4.1什么是HTTP</h3><p>超文本传输协议（HTTP）是一个简单的请求-响应协议，它通常运行在<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>之上。</p>
<ul>
<li>文本：html，字符串。~…</li>
<li>超文本：图片，音乐，视频，定位</li>
</ul>
<h3 id="4-2两个时代"><a href="#4-2两个时代" class="headerlink" title="4.2两个时代"></a>4.2两个时代</h3><ul>
<li>http1.0<ul>
<li>HTTP/1.0：客户端可以与服务器连接，但只能获得一个web资源，就断开连接</li>
</ul>
</li>
<li>http2.0<ul>
<li>HTTP/1.1：客户端可以与服务器连接，获得多个web资源</li>
</ul>
</li>
</ul>
<h3 id="4-3HTTP请求"><a href="#4-3HTTP请求" class="headerlink" title="4.3HTTP请求"></a>4.3HTTP请求</h3><ul>
<li>客户端—-发请求(Request)—-服务器</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>请求行</span><br><span class="line">Request URL: https:<span class="comment">//www.baidu.com/    请求地址</span></span><br><span class="line">Request Method: GET				get方法/post方法</span><br><span class="line">Status Code: <span class="number">200</span> OK				状态码：<span class="number">200</span></span><br><span class="line">Remote Address: <span class="number">180.101</span><span class="number">.49</span><span class="number">.12</span>:<span class="number">443</span> 访问的远程地址</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>请求头</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*     请求的类型</span><br><span class="line">Accept-Encoding: gzip, deflate, br   类型的编码</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,en;q=<span class="number">0.8</span>,en-GB;q=<span class="number">0.7</span>,en-US;q=<span class="number">0.6</span>   语言</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Connection: keep-aliveand</span><br></pre></td></tr></table></figure>

<ol>
<li>请求行<ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>GET</strong>，<strong>POST</strong>，HEAD，DELETE，PUT，TRACT…<ul>
<li>get：请求能携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li>
</ul>
</li>
</ul>
</li>
<li>消息头</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:告诉浏览器，所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK  UTF-<span class="number">8</span>  GB2312   ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机....../..</span><br></pre></td></tr></table></figure>



<h3 id="4-4HTTP响应"><a href="#4-4HTTP响应" class="headerlink" title="4.4HTTP响应"></a>4.4HTTP响应</h3><ul>
<li>服务器—-响应—-客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection: keep-alive 	  连接</span><br><span class="line">Content-Encoding: gzip    编码</span><br><span class="line">Content-Type: text/html;charset=utf-<span class="number">8</span>  响应类型</span><br></pre></td></tr></table></figure>

<ol>
<li>响应体</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:告诉浏览器，所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK  UTF-<span class="number">8</span>  GB2312   ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机....../..</span><br><span class="line">Refresh:告诉客户端，多久刷新一次</span><br><span class="line">Location：让网页重新定位</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>响应状态码</p>
<p>200：响应成功</p>
<p>3xx：请求重定向</p>
<ul>
<li>重定向：重新到我规定的新的位置</li>
</ul>
<p>4xx：找不到资源  404</p>
<ul>
<li>资源不存在</li>
</ul>
<p>5xx：服务器代码错误   500   502：网关错误</p>
</li>
</ol>
<h3 id="常见面试题："><a href="#常见面试题：" class="headerlink" title="常见面试题："></a><strong>常见面试题：</strong></h3><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<h2 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5.Maven"></a>5.Maven</h2><p><strong>我问什么要学习这个技术？</strong></p>
<ol>
<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入</p>
</li>
<li><p>如何能够让一个东西自动帮我们导入和配置jar包</p>
<p>Maven诞生了</p>
</li>
</ol>
<h3 id="5-1Maven项目架构管理工具"><a href="#5-1Maven项目架构管理工具" class="headerlink" title="5.1Maven项目架构管理工具"></a>5.1Maven项目架构管理工具</h3><p>目前用来就是方便导入jar包</p>
<p>Maven的核心思想：<strong>约定大于配置</strong></p>
<ul>
<li>有约束，不要去违反</li>
</ul>
<p>Maven会规定好如何去编写Java代码，按照这个规范来 </p>
<p><strong>小建议</strong>：电脑上所有环境放在同一个文件夹中</p>
<h3 id="5-2Maven下载安装"><a href="#5-2Maven下载安装" class="headerlink" title="5.2Maven下载安装"></a>5.2Maven下载安装</h3><p><img src="/2021/11/17/Javaweb/image-20211110102721577.png" alt="image-20211110102721577"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bin  <span class="comment">//执行文件</span></span><br><span class="line">boot <span class="comment">//启动选项</span></span><br><span class="line">conf <span class="comment">//配置</span></span><br><span class="line">lib  <span class="comment">//依赖包</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3配置环境变量"><a href="#5-3配置环境变量" class="headerlink" title="5.3配置环境变量"></a>5.3配置环境变量</h3><p>在系统环境变量中配置：</p>
<ul>
<li>M2_HOME    maven目录下的bin目录</li>
<li>MAVEN_HOME  maven的目录</li>
<li>在系统变来那个PATH中配置%MAVEN_HOME%\bin</li>
</ul>
<h3 id="5-4阿里云镜像"><a href="#5-4阿里云镜像" class="headerlink" title="5.4阿里云镜像"></a>5.4阿里云镜像</h3><p>镜像(mirrors)：方便下载使用;国内建议使用阿里云<br>     Maven国外的，国内有墙，我们访问外网会很慢； 翻墙：VPN</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5本地仓库"><a href="#5-5本地仓库" class="headerlink" title="5.5本地仓库"></a>5.5本地仓库</h3><p>在本地的仓库，远程仓库：</p>
<p>建立一个本地仓库：localRepository</p>
<p>Maven下新建一个文件夹，settings.xml中改仓库地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Maven\apache-maven-3.8.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211110125803550.png" alt="image-20211110125803550"></p>
<p><img src="C:/Users/帝轩王/AppData/Roaming/Typora/typora-user-images/image-20211110125826796.png" alt="image-20211110125826796"></p>
<h3 id="5-6在IDEA中使用Maven"><a href="#5-6在IDEA中使用Maven" class="headerlink" title="5.6在IDEA中使用Maven"></a>5.6在IDEA中使用Maven</h3><ol>
<li><p>创建一个MavenWeb项目</p>
<p><img src="/2021/11/17/Javaweb/image-20211110131644962.png" alt="image-20211110131644962"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110132054445.png" alt="image-20211110132054445"></p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110132741290.png" alt="image-20211110132741290"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110132850904.png" alt="image-20211110132850904"></p>
<ol start="2">
<li><p>等待Maven安装完毕</p>
<p><img src="/2021/11/17/Javaweb/image-20211110133841720.png" alt="image-20211110133841720"></p>
</li>
<li><p>IDEA中的Maven设置</p>
<p>注意：IDEA项目创建成功后，看一眼Maven配置</p>
<p><img src="/2021/11/17/Javaweb/image-20211110135845420.png" alt="image-20211110135845420"></p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110140038157.png" alt="image-20211110140038157"></p>
<ol start="4">
<li>到这里，Maven在IDEA中的配置和使用就OK了</li>
</ol>
<h3 id="5-7创建一个普通的Maven项目"><a href="#5-7创建一个普通的Maven项目" class="headerlink" title="5.7创建一个普通的Maven项目"></a>5.7创建一个普通的Maven项目</h3><p><img src="/2021/11/17/Javaweb/image-20211110140357464.png" alt="image-20211110140357464"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110140758533.png" alt="image-20211110140758533"></p>
<p>这个只有在web应用下才会有：</p>
<p><img src="/2021/11/17/Javaweb/image-20211110140959966.png" alt="image-20211110140959966"></p>
<h3 id="5-8标记文件夹功能（2选1）"><a href="#5-8标记文件夹功能（2选1）" class="headerlink" title="5.8标记文件夹功能（2选1）"></a>5.8标记文件夹功能（2选1）</h3><ol>
<li></li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110141513640.png" alt="image-20211110141513640"></p>
<ol start="2">
<li></li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110141642635.png" alt="image-20211110141642635"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110141944081.png" alt="image-20211110141944081"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110142121481.png" alt="image-20211110142121481"></p>
<h3 id="5-9在IDEA中配置Tomcat"><a href="#5-9在IDEA中配置Tomcat" class="headerlink" title="5.9在IDEA中配置Tomcat"></a>5.9在IDEA中配置Tomcat</h3><p><img src="/2021/11/17/Javaweb/image-20211110143107420.png" alt="image-20211110143107420"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110145206377.png" alt="image-20211110145206377"></p>
<p>解决警告问题</p>
<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>
<p><img src="/2021/11/17/Javaweb/image-20211110145359707.png" alt="image-20211110145359707"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110150530167.png" alt="image-20211110150530167"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110151332476.png" alt="image-20211110151332476"></p>
<h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p><img src="/2021/11/17/Javaweb/image-20211110155034326.png" alt="image-20211110155034326"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  这里就是刚才配置的GAV  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  Package：项目的打包方式</span></span><br><span class="line"><span class="comment"> jar：java应用</span></span><br><span class="line"><span class="comment"> war：javaWeb应用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    项目的默认构建编码  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211110155856725.png" alt="image-20211110155856725"></p>
<p>maven由于他的约定大于配置，我们之后可能会遇到我们写的配置文件无法到处或生效的问题（mybatis中会遇到），解决方案：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-11-IDEA操作"><a href="#5-11-IDEA操作" class="headerlink" title="5.11 IDEA操作"></a>5.11 IDEA操作</h3><p><img src="/2021/11/17/Javaweb/image-20211110160853281.png" alt="image-20211110160853281"></p>
<h3 id="5-12-解决遇到的问题"><a href="#5-12-解决遇到的问题" class="headerlink" title="5.12 解决遇到的问题"></a>5.12 解决遇到的问题</h3><ol>
<li><p>Mavne默认web项目中 web.xml 的版本问题</p>
<p><img src="/2021/11/17/Javaweb/image-20211111115136701.png" alt="image-20211111115136701"></p>
</li>
<li><p>替换成Tomcat中web.xml的版本（保证和Tomcat一致）</p>
<p><img src="/2021/11/17/Javaweb/image-20211111115327279.png" alt="image-20211111115327279"></p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6.Servlet"></a>6.Servlet</h2><h3 id="6-1Servlet简介"><a href="#6-1Servlet简介" class="headerlink" title="6.1Servlet简介"></a>6.1Servlet简介</h3><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>sun公司在这些API中提供一个接口叫做：Servlet，如果想开发一个Servlet程序没只需要完成两个步骤<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p><strong>把实现Servlet接口的Java程序叫做，Servlet</strong></p>
<h3 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h3><p>Servlet接口Sun公司有两个默认的实现类：HttpServlet，</p>
<ol>
<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里建立Model；</p>
<p>这个空的工程就是Maven主工程</p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211112102201510.png" alt="image-20211112102201510"></p>
<ol start="2">
<li><p>关于Maven父子工程的理解：</p>
<p>父项目中有：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目中有：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">![image-20211112104928779](Javaweb/image-20211112104928779.png)    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的Java子项目可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211112104928779.png" alt="image-20211112104928779"></p>
<ol start="3">
<li>Maven环境优化<ol>
<li>修改web.xml为最新的</li>
<li>将maven的结构搭建完整</li>
</ol>
</li>
<li>编写一个Servlet程序<ol>
<li>编写一个普通类</li>
<li>实现Servlet接口，这里直接继承HttpServlet</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;hello,servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPut(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>编写Servlet的映射</p>
<p>为什么需要映射：我们写的是Java程序，但是要通过浏览器访问，而浏览器需要链接web服务器，所以我们需要在web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    注册Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.demo.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    Servlet请求路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>配置Tomcat</p>
</li>
<li><p>启动测试</p>
</li>
</ol>
<h3 id="6-3-注意的问题："><a href="#6-3-注意的问题：" class="headerlink" title="6.3 注意的问题："></a>6.3 注意的问题：</h3><ul>
<li>两处申请名字要一致</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211114154732018.png" alt="image-20211114154732018"></p>
<p><img src="/2021/11/17/Javaweb/image-20211114154751939.png" alt="image-20211114154751939"></p>
<ul>
<li>代理抛出异常（端口1099被占用）</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211114155307624.png" alt="image-20211114155307624"></p>
<p><img src="/2021/11/17/Javaweb/image-20211114155346554.png" alt="image-20211114155346554"></p>
<ul>
<li>运行之前要maven clean-package；更新target文件</li>
</ul>
<h3 id="6-4-查看日志"><a href="#6-4-查看日志" class="headerlink" title="6.4 查看日志"></a>6.4 查看日志</h3><p><img src="/2021/11/17/Javaweb/image-20211114155433716.png" alt="image-20211114155433716"></p>
<p><img src="/2021/11/17/Javaweb/image-20211114155513788.png" alt="image-20211114155513788"></p>
<h3 id="6-5-Servlet运行原理"><a href="#6-5-Servlet运行原理" class="headerlink" title="6.5 Servlet运行原理"></a>6.5 Servlet运行原理</h3><p>Servlet是由Web服务器调用，Web浏览器在收到浏览器请求后，会：</p>
<p><img src="/2021/11/17/Javaweb/image-20211117143432685.png" alt="image-20211117143432685"></p>
<h3 id="6-6-Mapping问题"><a href="#6-6-Mapping问题" class="headerlink" title="6.6 Mapping问题"></a>6.6 Mapping问题</h3><ol>
<li><p>一个Servlet请求可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个Servlet请求可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个Servlet请求可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用这个会将首页覆盖掉--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>指定一些后缀或者前缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">注意：*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">hello/asdfsf.do--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>优先级问题</p>
<p>指定了固有的映射路径优先级最高（在搜索框中输入），找不到就走默认的路径</p>
</li>
</ol>
<h3 id="6-7-ServletContext"><a href="#6-7-ServletContext" class="headerlink" title="6.7  ServletContext"></a>6.7  ServletContext</h3><p><strong>了解一些重点的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//this.getInitParameter()  初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig()  Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext() Servlet上下文</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  只做了解，估计用不上--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  可以设置全局参数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;context-param&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;param-name&gt;&lt;/param-name&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;param-value&gt;&lt;/param-value&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;/context-param&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    可以携带参数，给HelloServlet创一些初始的参数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;init-param&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;param-name&gt;&lt;/param-name&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;param-value&gt;&lt;/param-value&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/init-param&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；（起到中间商的作用）</p>
<ol>
<li>数据共享 </li>
</ol>
<p>我在这个Servlet中保存的数据，可以在另外一个Servlet中拿到；</p>
<p><img src="/2021/11/17/Javaweb/image-20211117204055479.png" alt="image-20211117204157255"></p>
<p>1.文件结构</p>
<p><img src="/2021/11/17/Javaweb/image-20211117181838383.png" alt="image-20211117181838383"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HelloServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">&quot;刘畅&quot;</span>;<span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="comment">//将一个数据保存到ServletContext中，以键值对的方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GetServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应部分写在下面</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211117182306023.png" alt="image-20211117182306023"></p>
<ol start="2">
<li>获取初始化参数</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置一些web应用初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chang.servlet.ServletDemo03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211117183846641.png" alt="image-20211117183846641"></p>
<ol start="3">
<li>请求<strong>转发</strong>（留意后续有重定向的变化）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">       <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;);//转发的请求路径</span></span><br><span class="line">       <span class="comment">//requestDispatcher.forward(req,resp);//调用forward实现请求转发</span></span><br><span class="line"></span><br><span class="line">       context.getRequestDispatcher(<span class="string">&quot;/getp&quot;</span>).forward(req,resp); <span class="comment">//上面两句合并为一句</span></span><br><span class="line">       <span class="comment">//通过getRequestDispatcher方法，实际走的是/gp的路径</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211118134620092-16374973526421.png" alt="image-20211118134620092"></p>
<ol start="4">
<li><p>读取资源文件</p>
<p>properties</p>
<ul>
<li>在Java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现都打包到了同一路径下：classes。我们俗称这个路径为classpath（类路径）</p>
<p>思路：需要一个文件流</p>
<p><img src="/2021/11/17/Javaweb/image-20211118141132299.png" alt="image-20211118141132299"></p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<span class="comment">//返回出一个流</span></span><br><span class="line">        <span class="comment">//路径的第一个斜杠必须打，表示当前项目下</span></span><br><span class="line">        <span class="comment">//访问的路径在target，映射包下</span></span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);<span class="comment">//拿到文件的流</span></span><br><span class="line">        String username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(username+<span class="string">&quot;:&quot;</span>+password);<span class="comment">//测试是不是读出来了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--做映射--&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211118141333770.png" alt="image-20211118141333770"></p>
<p><img src="/2021/11/17/Javaweb/image-20211118141631859.png" alt="image-20211118141631859"></p>
<h3 id="6-8HttpServletResponse"><a href="#6-8HttpServletResponse" class="headerlink" title="6.8HttpServletResponse"></a>6.8HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<p>源码分析：</p>
<ol>
<li><p><strong>简单分类</strong></p>
<p>负责向浏览器发送数据的方法</p>
<ul>
<li>```java<br>ServletOutputStream getOutputStream() throws IOException;<br>//一般流用它<br>PrintWriter getWriter() throws IOException;<br>//中文用它<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">负责向浏览器发送响应头的方法</span><br><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  void setCharacterEncoding(String var1);</span><br><span class="line">  </span><br><span class="line">  void setContentLength(int var1);</span><br><span class="line">  </span><br><span class="line">  void setContentLengthLong(long var1);</span><br><span class="line">  </span><br><span class="line">  void setContentType(String var1);    </span><br><span class="line">  </span><br><span class="line">  void setDateHeader(String var1, long var2);</span><br><span class="line">  </span><br><span class="line">  void addDateHeader(String var1, long var2);</span><br><span class="line">  </span><br><span class="line">  void setHeader(String var1, String var2);</span><br><span class="line">  </span><br><span class="line">  void addHeader(String var1, String var2);</span><br><span class="line">  </span><br><span class="line">  void setIntHeader(String var1, int var2);</span><br><span class="line">  </span><br><span class="line">  void addIntHeader(String var1, int var2);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>响应状态码</p>
<ul>
<li>```java<br>//常量<pre><code>int SC_CONTINUE = 100;
int SC_SWITCHING_PROTOCOLS = 101;
int SC_OK = 200;
int SC_CREATED = 201;
int SC_ACCEPTED = 202;
int SC_NON_AUTHORITATIVE_INFORMATION = 203;
int SC_NO_CONTENT = 204;
int SC_RESET_CONTENT = 205;
int SC_PARTIAL_CONTENT = 206;
int SC_MULTIPLE_CHOICES = 300;
int SC_MOVED_PERMANENTLY = 301;
int SC_MOVED_TEMPORARILY = 302;
int SC_FOUND = 302;
int SC_SEE_OTHER = 303;
int SC_NOT_MODIFIED = 304;
int SC_USE_PROXY = 305;
int SC_TEMPORARY_REDIRECT = 307;
int SC_BAD_REQUEST = 400;
int SC_UNAUTHORIZED = 401;
int SC_PAYMENT_REQUIRED = 402;
int SC_FORBIDDEN = 403;
int SC_NOT_FOUND = 404;
int SC_METHOD_NOT_ALLOWED = 405;
int SC_NOT_ACCEPTABLE = 406;
int SC_PROXY_AUTHENTICATION_REQUIRED = 407;
int SC_REQUEST_TIMEOUT = 408;
int SC_CONFLICT = 409;
int SC_GONE = 410;
int SC_LENGTH_REQUIRED = 411;
int SC_PRECONDITION_FAILED = 412;
int SC_REQUEST_ENTITY_TOO_LARGE = 413;
int SC_REQUEST_URI_TOO_LONG = 414;
int SC_UNSUPPORTED_MEDIA_TYPE = 415;
int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
int SC_EXPECTATION_FAILED = 417;
int SC_INTERNAL_SERVER_ERROR = 500;
int SC_NOT_IMPLEMENTED = 501;
int SC_BAD_GATEWAY = 502;
int SC_SERVICE_UNAVAILABLE = 503;
int SC_GATEWAY_TIMEOUT = 504;
int SC_HTTP_VERSION_NOT_SUPPORTED = 505;
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. **常见应用**</span><br><span class="line"></span><br><span class="line">   1. 向浏览器输出消息（前头一直在讲）</span><br><span class="line">   2. 下载文件</span><br><span class="line">      1. 获取下载文件的路径</span><br><span class="line">      2. 获取下载文件名</span><br><span class="line">      3. 使浏览器支持我们的下载</span><br><span class="line">      4. 获取下载文件的输入流</span><br><span class="line">      5. 创建缓冲区</span><br><span class="line">      6. 获取OutputStream对象</span><br><span class="line">      7. 将FileOutputStream流写入到buffer缓冲区</span><br><span class="line">      8. 使用OutputStream将缓冲区的数据输出到客户端</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //1. 获取下载文件的路径</span><br><span class="line">        String realPath = &quot;D:\\IDEA\\Maven\\javaweb-02-servlet\\response\\src\\main\\resources\\1.jpg&quot;;</span><br><span class="line">        System.out.println(&quot;下载的文件路径：&quot;+realPath);</span><br><span class="line">        //2. 获取下载文件名</span><br><span class="line">        String filename = realPath.substring(realPath.lastIndexOf(&quot;//&quot;) + 1);//让它识别斜杠后面的文件名；双斜杠用于转义斜杠</span><br><span class="line">        //3. 使浏览器支持(Content-disposition)我们的下载</span><br><span class="line">        resp.setHeader(&quot;Content-disposition&quot;,&quot;attachment;filename=&quot;+filename);</span><br><span class="line">        //4. 获取下载文件的输入流</span><br><span class="line">        FileInputStream in = new FileInputStream(realPath);</span><br><span class="line">        //5. 创建缓冲区</span><br><span class="line">        int len = 0;</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        //6. 获取OutputStream对象</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        //7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区的数据输出到客户端</span><br><span class="line">        while ((len=in.read(buffer))&gt;0)&#123;</span><br><span class="line">            out.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        //8.关闭流</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        </span><br><span class="line">        //如何让浏览器3秒自动刷新一次</span><br><span class="line">        //resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>验证码功能（了解一下原理）</p>
<p>怎么验证;</p>
<ul>
<li>前端实现</li>
<li>后端实现，需要用到Java的图片类，生产一个图片</li>
</ul>
</li>
<li><p><strong>实现重定向（需要掌握）</strong></p>
</li>
</ol>
<p>一个web资源收到客户端请求，他会通知客户端去访问另外一个web资源</p>
<p>常见场景：</p>
<ul>
<li>用户登录，登录成功后访问另一个页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        resp.setHeader(&quot;Location&quot;,&quot;./down&quot;);  跳转路径</span></span><br><span class="line"><span class="comment">        resp.setStatus(302);  状态码；有常量表示 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;./down&quot;</span>); <span class="comment">//重定向</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="面试题：重定向和转发的区别"><a href="#面试题：重定向和转发的区别" class="headerlink" title="面试题：重定向和转发的区别"></a>面试题：重定向和转发的区别</h3><p>相同点</p>
<ul>
<li>页面都会实实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化</li>
<li>重定向的时候，url地址栏会发生变化</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211118134620092-16374973526421.png" alt="image-20211118134620092"></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--index.jsp--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=gb2312&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径;web.xml中对应的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--success.jsp--%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; character=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Success&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RequestTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot;+&quot;</span>+password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向注意路径问题，否则404</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;./success.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211121201311172.png" alt="image-20211121201311172"></p>
<h3 id="6-9HttpServletRequest"><a href="#6-9HttpServletRequest" class="headerlink" title="6.9HttpServletRequest"></a>6.9HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过HTTP协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息</p>
<p>获取前端传递参数，请求转发</p>
<p><img src="/2021/11/17/Javaweb/image-20211124152742507.png" alt="image-20211124152742507"></p>
<p>一个返回string，一个返回数组；多个和单个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">    <span class="comment">//后台接受中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbies));</span><br><span class="line">    System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的/代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    doGet(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-Cookie、Session"><a href="#7-Cookie、Session" class="headerlink" title="7.Cookie、Session"></a>7.Cookie、Session</h2><h3 id="7-1-会话"><a href="#7-1-会话" class="headerlink" title="7.1 会话"></a>7.1 会话</h3><p><strong>会话：</strong>用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程叫会话</p>
<p><strong>有状态会话：</strong>一个同学来过教室，下次再来，我们会知道这个同学，曾经来过</p>
<p><strong>你怎么正面你是清华的学生？</strong></p>
<p>对象：  你    清华</p>
<ol>
<li>发票             清华给你发票</li>
<li>学校登记      清华标记你来过了</li>
</ol>
<p><strong>一个网站，怎么证明你来过</strong></p>
<p>客户端         服务端</p>
<ol>
<li>服务端给客户端一个信件，客户端下次访问客户端带上信件就可以了；cookie</li>
<li>服务器登记你来过了，下次你来的时候我匹配你；session</li>
</ol>
<h3 id="7-2-保存会话的两种技术"><a href="#7-2-保存会话的两种技术" class="headerlink" title="7.2 保存会话的两种技术"></a>7.2 保存会话的两种技术</h3><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（响应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息，可以把信息或数据放在 session 中</li>
</ul>
<p>常见场景：网站登录之后，下次不用登录，直接登上去</p>
<h3 id="7-3-Cookie"><a href="#7-3-Cookie" class="headerlink" title="7.3 Cookie"></a>7.3 Cookie</h3><ol>
<li>从请求中拿到cookie信息</li>
<li>服务器响应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">//获得Cookie</span></span><br><span class="line">cookie.getName();<span class="comment">//获得Cookie中的key</span></span><br><span class="line">cookie.getValue();<span class="comment">//获得Cookie中的vlaue</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);<span class="comment">//新建一个Cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置Cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie);<span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<p><strong>cookie：一般会保存在本地的用户目录下 appdata；</strong>（不好，因为不安全）</p>
<p>一个网站cookie是否存在上限！<strong>细节问题</strong></p>
<ul>
<li>一个Cookie只能保存一个信息</li>
<li>一个web站点可以给浏览器发送多个Cookie，每个站点最多存放20个Cookie</li>
<li>Cookie大小有限制4kb</li>
<li>300个Cookie，浏览器上限</li>
</ul>
<p>删除Cookie：</p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期为0</li>
</ul>
<p><strong>编码解码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;刘畅&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//编码</span></span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//解码</span></span><br></pre></td></tr></table></figure>



<h3 id="7-4-Session（重点）"><a href="#7-4-Session（重点）" class="headerlink" title="7.4 Session（重点）"></a>7.4 Session（重点）</h3><p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li>
<li>用户登录之后，整个网站都可以访问，与网页无关 –&gt;保存用户的信息；保存购物车信息…(长久保存的信息)</li>
</ul>
<p>Session和Cookie的区别</p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session是把用户的数据写到用户独占Session中，服务器保存（保存重要信息，减少服务器资源的浪费；一台浏览器对应一个Session）</li>
<li>Session对象由服务器创建</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>在整个网站中经常会使用的数据，将保存在Session中</li>
</ul>
<p>使用Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类(Person)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SessionDemo01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;character=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span>  Person(<span class="string">&quot;刘畅&quot;</span>,<span class="number">20</span>));<span class="comment">//记住这个name，Demo02里要用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功，ID&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session已经在服务器中存在，ID&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Session创建的时候做了什么</span></span><br><span class="line">        <span class="comment">//Session创建的时候，会带有一个Cookie的ID</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SessionDemo02</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;character=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//共享信息</span></span><br><span class="line">        <span class="comment">//创建新的 Person 对象，从Session中取出,在控制台显示</span></span><br><span class="line">        Person person = (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SessionDemo03</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//手动注销Session</span></span><br><span class="line">        <span class="comment">//注销后重新访问 s2,报错404</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>记得要在web.xml中映射地址</strong></p>
<p>web.xml自动注销</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置Session默认的失效时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        1min后Session自当失效，以分钟为单位--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="8-JSP（老技术了，看懂就行）"><a href="#8-JSP（老技术了，看懂就行）" class="headerlink" title="8. JSP（老技术了，看懂就行）"></a>8. JSP（老技术了，看懂就行）</h2><h3 id="8-1-什么是JSP"><a href="#8-1-什么是JSP" class="headerlink" title="8.1 什么是JSP"></a>8.1 什么是JSP</h3><p>为了简化Servlet的前端语言</p>
<p>Java Server Pages: Java服务器页面，也和Servlet一样，用于动态web技术</p>
<h3 id="8-2-JSP原理"><a href="#8-2-JSP原理" class="headerlink" title="8.2 JSP原理"></a>8.2 JSP原理</h3><p>思路：JSP是怎么执行的</p>
<ul>
<li>代码没有问题</li>
<li>服务器内部工作<ul>
<li>Tomcat有一个 work 目录</li>
</ul>
</li>
<li><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet</strong></li>
<li>JSP最终会被转换为一个Java类</li>
</ul>
<p><strong>JSP本质就是Servlet</strong></p>
<p>我的源码地址：只有编译的时候会产生work文件夹，中的/ROOT，包含index.jsp页面和新建的</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\帝</span>轩王<span class="keyword">\AppData</span><span class="keyword">\Local</span><span class="keyword">\JetBrains</span><span class="keyword">\IntelliJIdea</span>2020.1<span class="keyword">\tomcat</span><span class="keyword">\Unnamed</span><span class="built_in">_</span>javaweb-02-servlet<span class="built_in">_</span>13</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断请求</p>
</li>
<li><p>内置一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext; <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;   <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;  <span class="comment">//application</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;		<span class="comment">//配置</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;			<span class="comment">//输出对象</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;    			<span class="comment">//当前页</span></span><br><span class="line">HttpServletRequest request					   <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response				   <span class="comment">//响应</span></span><br></pre></td></tr></table></figure></li>
<li><p>输出页面增加的代码</p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211126122513911.png" alt="image-20211126122513911"></p>
<h3 id="8-3-JSP基础语法"><a href="#8-3-JSP基础语法" class="headerlink" title="8.3 JSP基础语法"></a>8.3 JSP基础语法</h3><p>耦合性太高（牵一发而动全身）</p>
<p><font color="yellow">高聚合，低耦合是开发的追求</font></p>
<p>HSP是Java技术的一些应用，拥有一些扩充给语法（了解）；Java所有语法都支持</p>
<p>**JSP表达式 **</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%=  变量或表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP脚本片段</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP脚本--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">        sum+=i;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>脚本片段的再实现</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--在代码中嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;hello!!&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP声明</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP声明:会被编译到JSP生成的Java类中！其他的，就会被生成到_jspService方法中</p>
<p>在JSP嵌入Java</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;&#125;     取值用的，或在里头编辑</span><br><span class="line">&lt;% %&gt;</span><br><span class="line">&lt;%= %&gt;</span><br><span class="line">&lt;%! %&gt;</span><br><span class="line">&lt;%--注释--%&gt;   jsp的注释不会在客户端显示，HTML的会（查看源代码）</span><br></pre></td></tr></table></figure>

<h3 id="8-4-JSP指令"><a href="#8-4-JSP指令" class="headerlink" title="8.4 JSP指令"></a>8.4 JSP指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page ... %&gt;         定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</span><br><span class="line">&lt;%@ include ... %&gt;      包含其他文件</span><br><span class="line">&lt;%@ taglib ... %&gt;	    引入标签库的定义</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/2021/10/26/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis-框架"><a href="#MyBatis-框架" class="headerlink" title="MyBatis 框架"></a>MyBatis 框架</h1><p><strong>官方文档</strong>：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis – MyBatis 3 | 入门</a></p>
<h1 id="第一章-框架的概述"><a href="#第一章-框架的概述" class="headerlink" title="第一章 框架的概述"></a>第一章 框架的概述</h1><h2 id="1-三层架构"><a href="#1-三层架构" class="headerlink" title="1.三层架构"></a>1.三层架构</h2><p>mvc：web开发中，使用mvc架构模式。  m：数据， v：视图， c：控制器。</p>
<p>​          c控制器： 接收请求，调用service对象，显示请求的处理结果。 当前使用servlet作为控制器</p>
<p>​          v视图： 现在使用jsp， html，css，js。 显示请求的处理结果，把m中数据显示出来。</p>
<p>​          m数据： 来自数据库mysql， 来自文件，来自网络</p>
<p>mvc作用：</p>
<p>​     1）实现解耦合。 </p>
<p>​     2）让mvc 各负其职。  </p>
<p>​     3）使的系统扩展更好。更容易维护。 </p>
<p>三层架构：</p>
<p>1.界面层（视图层）：接收用户的请求，调用service， 显示请求的处理结果的。 包含了jsp，html，servlet等对象。 对应的包controller，</p>
<p>2.业务逻辑层：处理业务逻辑， 使用算法处理数据的。 把数据返回给界面层。 对应的是service包，和包中的很多的XXXService类。 例如：  StudentService ， OrderService, ShopService </p>
<p>3.持久层（数据库访问层）：访问数据库，或者读取文件，访问网络。获取数据。 对应的包是dao。 dao包中很多的StudentDao,  OrderDao,  ShopDao等等。</p>
<h2 id="2-三层架构请求的处理流程"><a href="#2-三层架构请求的处理流程" class="headerlink" title="2. 三层架构请求的处理流程"></a>2. 三层架构请求的处理流程</h2><p>用户发起请求—-&gt;界面层—–&gt;业务逻辑层—-&gt;持久层—-&gt;数据库（mysql）</p>
<h2 id="3-为什么要使用三层？"><a href="#3-为什么要使用三层？" class="headerlink" title="3. 为什么要使用三层？"></a>3. 为什么要使用三层？</h2><p>1，结构清晰、耦合度低, 各层分工明确<br>2，可维护性高，可扩展性高<br>3，有利于标准化<br>4，开发人员可以只关注整个结构中的其中某一层的功能实现<br>5，有利于各层逻辑的复用</p>
<h2 id="4-三层架构模式和框架"><a href="#4-三层架构模式和框架" class="headerlink" title="4. 三层架构模式和框架"></a>4. 三层架构模式和框架</h2><p>每一层对应着一个框架</p>
<p>1）界面层—SpringMVC框架     controller</p>
<p>2）业务层—Spring框架             service</p>
<p>3）持久层—MyBatis框架           dao/mapper</p>
<h2 id="5-框架"><a href="#5-框架" class="headerlink" title="5 .框架"></a>5 .框架</h2><ol>
<li>什么是框架（framework）</li>
</ol>
<p>框架：就是一个软件， 完成了部分的功能。  软件中的类和类之间的方法调用都已经规定好了。 通过这些可以完成某些功能。  <strong>框架看做是模版</strong>。   </p>
<p>框架是可以升级的，改造的。 框架是安全的。</p>
<p>框架是对某一个方面有用的，不是全能的。 </p>
<h2 id="6-框架解决的问题"><a href="#6-框架解决的问题" class="headerlink" title="6. 框架解决的问题"></a>6. 框架解决的问题</h2><p>1）框架能实现技术的整合。 </p>
<p>2）提供开发的效率。 降低难度。</p>
<h2 id="7-jdbc访问数据库的优缺点"><a href="#7-jdbc访问数据库的优缺点" class="headerlink" title="7. jdbc访问数据库的优缺点"></a>7. jdbc访问数据库的优缺点</h2><p>优点：</p>
<ol>
<li>直观，好理解</li>
</ol>
<p>缺点：</p>
<ol>
<li>创建很多对象 Connection ,Statement, ResultSet</li>
<li>注册驱动</li>
<li>执行sql语句</li>
<li>把ResultSet转为 Student ， List集合。</li>
<li>关闭资源</li>
<li>sql语句和业务逻辑代码混在一起</li>
</ol>
<h2 id="8-MyBatis框架"><a href="#8-MyBatis框架" class="headerlink" title="8 MyBatis框架"></a>8 MyBatis框架</h2><p>什么 mybatis： 是一个持久层框架， 原名是ibatis， 2013改名为 MyBatis.   MyBatis可以操作数据库，对数据执行增删改查。  </p>
<p>底层是jdbc，看做是高级的jdbc封装。  解决jdbc的缺点。</p>
<p>mybatis能做什么？</p>
<p> 1） 注册驱动 。</p>
<p>  2） 创建jdbc中使用的Connection， Statement，ResultSet</p>
<ol start="3">
<li><p>  执行sql语句， 得到ResultSet</p>
</li>
<li><p>  处理ResultSet， 把记录集中的数据转为java对象，  同时还能把java对象放入到List集合。</p>
</li>
</ol>
<p>  5）关闭资源</p>
<p>  6）实现sql语句和java代码的解耦合。</p>
<p>mybatis的文档： <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h1 id="第二章-MyBatis入门"><a href="#第二章-MyBatis入门" class="headerlink" title="第二章  MyBatis入门"></a>第二章  MyBatis入门</h1><h2 id="2-1-第一个例子"><a href="#2-1-第一个例子" class="headerlink" title="2.1 第一个例子"></a>2.1 第一个例子</h2><p>实现步骤：</p>
<p>0.创建student表（id，name，email，age）</p>
<p>1.新建maven项目</p>
<p>2.修改pom.xml </p>
<p>   1）加入依赖 mybatis依赖， mysql驱动， junit</p>
<p>   2）在<build>加入资源插件</build></p>
<p>3.创建实体类Student。定义属性， 属性名和列名保持一致</p>
<p>4.创建Dao接口， 定义操作数据库的方法。</p>
<p>5.创建xml文件（mapper文件）， 写sql语句。 </p>
<p>   mybatis框架推荐是把sql语句和java代码分开</p>
<p>   mapper文件：定义和dao接口在同一目录， 一个表一个mapper文件。</p>
<p>6.创建mybatis的主配置文件（xml文件）：有一个， 放在resources目录下</p>
<p>   1）定义创建连接实例的数据源（DataSource）对象</p>
<ol start="2">
<li>  指定其他mapper文件的位置</li>
</ol>
<p>7.创建测试的内容。</p>
<p>   使用main方法，测试mybatis访问数据库</p>
<p>   也可以使用junit 访问数据库</p>
<h2 id="2-2-概念"><a href="#2-2-概念" class="headerlink" title="2.2 概念"></a>2.2 概念</h2><p>1.自动提交：当你的 sql语句执行完毕后， 提交事务。 数据库更新操作之间保存到数据</p>
<p>2.手动（手工）提交事务：在你需要提交事务的位置， 执行方法，提交事务或者回顾事务。</p>
<h2 id="2-3-MyBatis的一些重要对象"><a href="#2-3-MyBatis的一些重要对象" class="headerlink" title="2.3 MyBatis的一些重要对象"></a>2.3 MyBatis的一些重要对象</h2><p>1） Resources ： mybatis框架中的对象， 一个作用读取 主配置信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>2）SqlSessionFactoryBuilder：负责创建SqlSessionFactory对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>



<p>3）SqlSessionFactory: 重要对象</p>
<p>SqlSessionFactory是重量级对象：创建此对象需要使用更多的资源和时间。  在项目中有一个就可以了。</p>
<p>SqlSessionFactory接口：作用是SqlSession的工厂， 就是创建SqlSession对象。</p>
<p>DefaultSqlSessionFactory实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123; &#125; </span><br></pre></td></tr></table></figure>



<p>SqlSessionFactory接口中的方法</p>
<p>openSession(): 获取一个默认的SqlSession对象， 默认是需要手工提交事务的。</p>
<p>openSession(boolean): boolean参数表示是否自动提交事务。 </p>
<p>​                   true： 创建一个自动提交事务的SqlSession</p>
<p>​                  false:   等同于没有参数的openSession</p>
<ol start="4">
<li>SqlSession对象</li>
</ol>
<p>SqlSession对象是通过SqlSessionFactory获取的。 SqlSession本身是接口</p>
<p>DefaultSqlSession: 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>SqlSession作用是提供了大量的执行sql语句的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selectOne：执行sql语句，最多得到一行记录，多余1行是错误。</span><br><span class="line">selectList：执行sql语句，返回多行数据</span><br><span class="line">selectMap：执行sql语句的，得到一个Map结果</span><br><span class="line">insert：执行insert语句</span><br><span class="line">update：执行update语句</span><br><span class="line">delete：执行delete语句</span><br><span class="line">commit：提交事务</span><br><span class="line">rollback：回顾事务</span><br></pre></td></tr></table></figure>



<p>注意SqlSession对象不是线程安全的， 使用的步骤：</p>
<p>①：在方法的内部，执行sql语句之前，先获取SqlSession对象</p>
<p>②：调用SqlSession的方法，执行sql语句</p>
<p>③：关闭SqlSession对象，执行SqlSession.close()</p>
<h2 id="2-4-使用工具类和模版"><a href="#2-4-使用工具类和模版" class="headerlink" title="2.4 使用工具类和模版"></a>2.4 使用工具类和模版</h2><p>1）创建模版，mapper文件模版和mybatis主配置文件模版</p>
<p>创建模版的步骤：</p>
<p><img src="D:/Typora/images/image-20201019094212830.png" alt="image-20201019094212830">    </p>
<p>创建模版文件：</p>
<p><img src="D:/Typora/images/image-20201019094359625.png" alt="image-20201019094359625">    </p>
<p>创建文件选择使用的模版：</p>
<p><img src="D:/Typora/images/image-20201019094616208.png" alt="image-20201019094616208">    </p>
<h1 id="第三章-MyBatis的Dao代理"><a href="#第三章-MyBatis的Dao代理" class="headerlink" title="第三章  MyBatis的Dao代理"></a>第三章  MyBatis的Dao代理</h1><h2 id="3-1-dao代理"><a href="#3-1-dao代理" class="headerlink" title="3.1  dao代理"></a>3.1  dao代理</h2><h3 id="3-1-1-mybatis提供代理："><a href="#3-1-1-mybatis提供代理：" class="headerlink" title="3.1.1 mybatis提供代理："></a>3.1.1 mybatis提供代理：</h3><p> mybatis创建Dao接口的实现类对象， 完成对sql语句的执行。  mybatis创建一个对象代替你的 dao实现类功能。</p>
<h3 id="3-1-2-使用mybatis代理要求"><a href="#3-1-2-使用mybatis代理要求" class="headerlink" title="3.1.2 使用mybatis代理要求"></a>3.1.2 使用mybatis代理要求</h3><p>1）mapper文件中的namespace 一定dao接口的全限定名称</p>
<p>2）mapper文件中 标签的id是dao接口方法名称</p>
<h3 id="3-1-3-mybatis代理实现方式"><a href="#3-1-3-mybatis代理实现方式" class="headerlink" title="3.1.3 mybatis代理实现方式"></a>3.1.3 mybatis代理实现方式</h3><p>使用SqlSession对象的方法 getMapper(dao.class)</p>
<p>例如： 现在有 StudentDao接口。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session  = MyBatisUtils.getSqlSession();</span><br><span class="line">StudentDao dao  = session.getMapper(StudentDao.class);</span><br><span class="line">Student student = dao.selectById(<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码中</span></span><br><span class="line">StudentDao dao  = session.getMapper(StudentDao.class);</span><br><span class="line">等同于</span><br><span class="line">StudentDao dao  = <span class="keyword">new</span> StudentDaoImpl();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-2-理解参数"><a href="#3-2-理解参数" class="headerlink" title="3.2 理解参数"></a>3.2 理解参数</h2><p>理解参数是： 通过java程序把数据传入到mapper文件中的sql语句。 参数主要是指dao接口方法的形参</p>
<h3 id="3-2-1-parameterType"><a href="#3-2-1-parameterType" class="headerlink" title="3.2.1 parameterType"></a>3.2.1 parameterType</h3><p>parameterType:表示参数的类型， 指定dao方法的形参数据类型。 这个形参的数据类型是给mybatis使用。 mybatis在给sql语句的参数赋值时使用。 PreparedStatement.setXXX( 位置， 值) </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">第一个用法： java类型的全限定类型名称   parameterType=&quot;java.lang.Integer&quot;</span><br><span class="line">第二个用法： mybatis定义的java类型的别名  parameterType=&quot;int&quot;</span><br><span class="line"></span><br><span class="line">parameterType：mybatis通过反射机制可以获取 dao接口方法参数的类型， 可以不写(接口那里需要定义integer)</span><br><span class="line">Student selectById(Integer id);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">   select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-dao接口方法是一个简单类型的参数"><a href="#3-2-2-dao接口方法是一个简单类型的参数" class="headerlink" title="3.2.2 dao接口方法是一个简单类型的参数"></a>3.2.2 dao接口方法是一个简单类型的参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao接口的方法形参是一个简单类型的</span></span><br><span class="line"><span class="comment">//简单类型： java基本数据类型和String</span></span><br><span class="line"><span class="function">Student <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   dao接口是一个简单类型的参数</span></span><br><span class="line"><span class="comment">   mapper文件，获取这个参数值，使用#&#123;任意字符&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByEmail&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where email=#&#123;studentEmail&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-dao接口方法有多个简单类型的参数"><a href="#3-2-3-dao接口方法有多个简单类型的参数" class="headerlink" title="3.2.3 dao接口方法有多个简单类型的参数"></a>3.2.3 dao接口方法有多个简单类型的参数</h3><p>@Param: 命名参数， 在方法的形参前面使用的， 定义参数名。  这个名称可以用在mapper文件中。</p>
<p>dao接口，方法的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  多个简单类型的参数</span></span><br><span class="line"><span class="comment">  使用@Param命名参数， 注解是mybatis提供的</span></span><br><span class="line"><span class="comment">  位置：在形参定义的前面</span></span><br><span class="line"><span class="comment">  属性：value 自定义的参数名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByNameOrAge</span><span class="params">(<span class="meta">@Param(&quot;myname&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="meta">@Param(&quot;myage&quot;)</span> Integer age)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   多个简单类型的参数.</span></span><br><span class="line"><span class="comment">   当使用了@Param命名后，例如@Param(&quot;myname&quot;).</span></span><br><span class="line"><span class="comment">   在mapper中，使用#&#123;命名的参数&#125;， 例如 #&#123;myname&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByNameOrAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">parameterType:代替未识别的数据类型</span><br><span class="line">resultType:全限定名称</span><br><span class="line">javaType:java中的数据类型名；实体类中</span><br><span class="line">jdbcType:数据类型名称，数据库</span><br></pre></td></tr></table></figure>



<h3 id="3-2-4-dao接口方法使用一个对象作为参数"><a href="#3-2-4-dao接口方法使用一个对象作为参数" class="headerlink" title="3.2.4 dao接口方法使用一个对象作为参数"></a>3.2.4 dao接口方法使用一个对象作为参数</h3><p>方法的形参是一个java对象。这个java对象表示多个参数。使用对象的属性值作为参数使用</p>
<p>java对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//set|get方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object p1;</span><br><span class="line">    <span class="keyword">private</span> Object p2;</span><br><span class="line">    <span class="comment">//set|get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>dao接口中的方法定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一个java对象作为参数( 对象由属性， 每个属性有set，get方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByObject</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByQueryParam</span><span class="params">(QueryParam param)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   一个java对象作为方法的参数，使用对象的属性作为参数值使用</span></span><br><span class="line"><span class="comment">   简单的语法： #&#123;属性名&#125; ， mybatis调用此属性的getXXX()方法获取属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name=#&#123;name&#125; or age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByQueryParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">     select id,name,email,age from student where name=#&#123;p1&#125; or age=#&#123;p2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--负责的语法格式： #&#123;属性名,javaType=java类型的全限定名称,jdbcType=mybatis中定义列的数据类型&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student where</span><br><span class="line">        name=#&#123;name,javaType=java.lang.String,jdbcType=VARCHAR&#125;</span><br><span class="line">        or</span><br><span class="line">        age=#&#123;age,javaType=java.lang.Integer,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-5-dao接口中多个简单类型的参数，使用位置"><a href="#3-2-5-dao接口中多个简单类型的参数，使用位置" class="headerlink" title="3.2.5 dao接口中多个简单类型的参数，使用位置"></a>3.2.5 dao接口中多个简单类型的参数，使用位置</h3><p><strong>不建议使用，如果修改了项数容易出错，arg0和1也比较模糊</strong></p>
<p>参数位置： dao接口中方法的形参列表，从左往右，参数位置是 0 ， 1， 2……</p>
<p>语法格式：#{arg0} ,#{arg1}</p>
<p>dao接口的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   使用位置，获取参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByPosition</span><span class="params">(String name,Integer age)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   mybatis版本是 3.5.1</span></span><br><span class="line"><span class="comment">   使用位置获取参数值， dao接口方法是多个简单类型的参数</span></span><br><span class="line"><span class="comment">   语法： #&#123;arg0&#125;, #&#123;arg1&#125;....</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPosition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name=#&#123;arg0&#125; or age=#&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-6-dao接口参数是一个Map"><a href="#3-2-6-dao接口参数是一个Map" class="headerlink" title="3.2.6 dao接口参数是一个Map"></a>3.2.6 dao接口参数是一个Map</h3><p>map作为dao接口的参数， 使用 key 获取参数值，mapper文件中，语法格式 #{key}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   使用Map作为参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudentByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   使用Map传递参数，   在mapper文件中，获取map的值，是通过key获取的，语法：#&#123;key&#125;--&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span>     select id,name,email,age from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试，调用方法的位置</p>
<p>key-value方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao  = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用map传递参数</span></span><br><span class="line">    Map&lt;String,Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    data.put(<span class="string">&quot;myname&quot;</span>, <span class="string">&quot;李思思&quot;</span>);</span><br><span class="line">    data.put(<span class="string">&quot;myage&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    List&lt;Student&gt; students = dao.selectStudentByMap(data);</span><br><span class="line"></span><br><span class="line">    students.forEach( stu-&gt; System.out.println(<span class="string">&quot;stu=&quot;</span>+stu));</span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-3-和-的区别"><a href="#3-3-和-的区别" class="headerlink" title="3.3 #和$的区别"></a>3.3 #和$的区别</h2><h3 id="3-3-1-占位符"><a href="#3-3-1-占位符" class="headerlink" title="3.3.1 # 占位符"></a>3.3.1 # 占位符</h3><p>语法： #{字符}</p>
<p>mybatis处理#{} 使用jdbc对象是 PrepareStatment对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mybatis出创建PrepareStatement对象，执行sql语句</span><br><span class="line">String sql=&quot; select id,name,email,age from student where id=?&quot;;</span><br><span class="line">PrepareStatement pst = conn.prepareStatement(sql);</span><br><span class="line">pst.setInt(1,1001);  //传递参数</span><br><span class="line">ResultSet rs  = pst.executeQuery(); //执行sql语句</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>#{}特点：</p>
<p>1）使用的PrepareStatement对象，执行sql语句，效率高。使用时编译一次即可</p>
<p>2）使用的PrepareStatement对象，能避免sql语句， sql语句执行更安全。</p>
<p>3） #{} 常常作为 列<strong>值</strong>使用的， 位于等号的右侧，  #{}位置的值和数据类型有关的。</p>
<h3 id="3-3-2-占位符"><a href="#3-3-2-占位符" class="headerlink" title="3.3.2 $ 占位符"></a>3.3.2 $ 占位符</h3><p>语法 :  ${字符}</p>
<p>mybatis执行${}占位符的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=$&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>	</span><br><span class="line"></span><br><span class="line">$&#123;&#125; 表示字符串连接， 把sql语句的其他内容和 $&#123;&#125;内容使用 字符串（+） 连接的方式连在一起</span><br><span class="line">String sql=&quot;select id,name,email,age from student where id=&quot; + &quot;1001&quot;;</span><br><span class="line"></span><br><span class="line">mybatis创建Statement对象， 执行sql语句。</span><br><span class="line">Statement stmt  = conn.createStatement(sql);</span><br><span class="line">ResultSet rs  = stmt.executeQuery();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>${} 的特点</p>
<p>1）使用Statement对象，执行sql语句，效率低。每次使用都要编译</p>
<p>2）${}占位符的值，使用的字符串连接方式， 有sql注入的风险。 有代码安全的问题</p>
<ol start="3">
<li> ${} 数据是原样使用的， 不会区分数据类型。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">想传字符串“李四”  (&quot;李四&quot;)这样的传过去就是李四，不会辨认数据类型			   (&quot;&#x27;李四&#x27;&quot;) 这样才行</span><br></pre></td></tr></table></figure>



<p>4） ${} 常用作 表名或者列名， 在能保证数据安全的情况下使用 $${}</p>
<h2 id="3-4-封装MyBatis输出结果"><a href="#3-4-封装MyBatis输出结果" class="headerlink" title="3.4 封装MyBatis输出结果"></a>3.4 封装MyBatis输出结果</h2><p>封装输出结果： MyBatis执行sql语句，得到ResultSet, 转为java对象。 </p>
<p>讲两个 resultType, resultMap</p>
<h3 id="3-4-1-resultType"><a href="#3-4-1-resultType" class="headerlink" title="3.4.1 resultType"></a>3.4.1 resultType</h3><p>resultType属性： 在执行select时使用， 作为<select>标签的属性出现的。</select></p>
<p>resultType:表示结果类型 ，  mysql执行sql语句，得到java对象的类型。  它的值有两种</p>
<p>​             1） java类型的全限定名称  。 2）使用别名</p>
<p>1） resultType:表示java自定义对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Student selectById(Integer id);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">resultType:现在使用java类型的全限定名称。 表示的意思 mybatis执行sql，把ResultSet中的数据转为Student类型的对象。  mybatis会做以下操作：</span><br><span class="line">1. 调用com.bjpowernode.domain.Student的无参数构造方法，创建对象。</span><br><span class="line">    Student student = new Student(); //使用反射创建对象</span><br><span class="line">2. 同名的列赋值给同名的属性。</span><br><span class="line">    student.setId( rs.getInt(&quot;id&quot;));</span><br><span class="line">    student.setName(rs.getString(&quot;name&quot;));</span><br><span class="line">3. 得到java对象， 如果dao接口返回值是List集合， mybatis把student对象放入到List集合。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">所以执行 Student mystudent = dao.selectById(1001); 得到 数据库中 id=1001这行数据， </span><br><span class="line">这行数据的列值， 付给了mystudent对象的属性。 你能得到mystudent对象。 就相当于是 id=1001这行数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2）resultType表示简单类型</p>
<p>dao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">countStudent</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  执行sql语句，得到是一个值（一行一列）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">    select count(*) from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3） resultType:表示一个map结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询结果返回是一个Map</span></span><br><span class="line"><span class="function">Map&lt;Object,Object&gt; <span class="title">selectMap</span><span class="params">(<span class="meta">@Param(&quot;stuid&quot;)</span> Integer id)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   执行sql得到一个Map结构数据， mybatis执行sql，把ResultSet转为map</span></span><br><span class="line"><span class="comment">   sql执行结果， 列名做map的key ， 列值作为value</span></span><br><span class="line"><span class="comment">   sql执行得到是一行记录，转为map结构是正确的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   dao接口返回是一个map， sql语句最多能获取一行记录，多余一行是错误，key-value结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.HashMap&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email from student where id != #&#123;stuid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>练习题：</p>
<p> 输入一个省份id ，得到 省份id ，省份name， 城市id，城市名称</p>
<p>例如输入 省份id=1</p>
<p>1 河北  1 石家庄</p>
<p>1 河北   2 秦皇岛</p>
<h3 id="3-4-2-resultMap"><a href="#3-4-2-resultMap" class="headerlink" title="3.4.2 resultMap"></a>3.4.2 resultMap</h3><p>resultMap: 结果映射。 自定义列名和java对象属性的对应关系。 常用在列名和属性名不同的情况。</p>
<p>用法：</p>
<p>1.先定义 resultMap标签， 指定列名和属性名称对应关系</p>
<p>2.在select标签使用resultMap属性，指定上面定义的resultMap的id值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用resultMap定义列和属性的关系--&gt;</span><span class="comment">&lt;!--定义resultMap    id:给resultMap的映射关系起个名称，唯一值    type:java类型的全限定名称--&gt;</span><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;customMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.vo.CustomObject&quot;</span>&gt;</span>    <span class="comment">&lt;!--定义列名和属性名的对应--&gt;</span>    <span class="comment">&lt;!--主键类型使用id标签--&gt;</span>    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span>    <span class="comment">&lt;!--非主键类型使用result标签--&gt;</span>    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> /&gt;</span>    <span class="comment">&lt;!--列名和属性名相同不用定义--&gt;</span>    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span><span class="comment">&lt;!--使用resultMap属性，指定映射关系的id    resultMap和resultType 不能同时使用， 二选一。--&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;customMap&quot;</span>&gt;</span>  select id,name,email,age from student where id=#&#123;stuid&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-5-自定义别名"><a href="#3-5-自定义别名" class="headerlink" title="3.5 自定义别名"></a>3.5 自定义别名</h2><p>mybatis提供的对java类型定义简短，好记名称。</p>
<p>自定义别名的步骤：</p>
<p>1）在mybatis主配置文件，使用 typeAliases标签声明别名</p>
<p>2）在mapper文件中， resultType=”别名”</p>
<p>声明别名（mybatis主配置文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种语法格式</span></span><br><span class="line"><span class="comment">        type:java类型的全限定名称（自定义类型）</span></span><br><span class="line"><span class="comment">        alias:自定义别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>mapper文件中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">resultType=&quot;别名&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-6-列名和java对象属性名称不一样解决方式"><a href="#3-6-列名和java对象属性名称不一样解决方式" class="headerlink" title="3.6 列名和java对象属性名称不一样解决方式"></a>3.6 列名和java对象属性名称不一样解决方式</h2><p>1） 使用resultMap： 自定义列名和属性名称对应关系</p>
<p>2）使用resultType:  使用列别名，让别名和java对象属性名称一样</p>
<h2 id="3-7-like"><a href="#3-7-like" class="headerlink" title="3.7 like"></a>3.7 like</h2><p>第一种方式： 在java程序中，把like的内容组装好。 把这个内容传入到sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//like第一种方式</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectLikeOne</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--like第一种方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>执行like</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLikeOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao  = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    String name=<span class="string">&quot;%李%&quot;</span>;</span><br><span class="line">    List&lt;Student&gt; students = dao.selectLikeOne(name);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    students.forEach( stu-&gt; System.out.println(stu));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>第二种方式： 在sql语句，组织like的内容。 </p>
<p>sql语句like的格式：  where name like “%”空格#{name}空格”%”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//like第二种方式</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectLikeTwo</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--like第二种方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name like &quot;%&quot; #&#123;name&#125; &quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLikeTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao  = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    String name=<span class="string">&quot;李&quot;</span>;</span><br><span class="line">    List&lt;Student&gt; students = dao.selectLikeTwo(name);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    students.forEach( stu-&gt; System.out.println(stu));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="第四章-动态sql"><a href="#第四章-动态sql" class="headerlink" title="第四章 动态sql"></a>第四章 动态sql</h1><p>什么是动态sql： 同一个dao的方法， 根据不同的条件可以表示不同的sql语句， 主要是where部分有变化</p>
<p>使用mybatis提供的标签，实现动态sql的能力，  主要讲 if ，where ，foreach， sql。</p>
<p>使用动态sql的时候， dao方法的形参使用java对象。 </p>
<p>什么时候使用动态sql：</p>
<p><img src="D:/Typora/images/image-20201020114831474.png" alt="image-20201020114831474">    </p>
<h2 id="4-1-if-标签"><a href="#4-1-if-标签" class="headerlink" title="4.1  if 标签"></a>4.1  if 标签</h2><p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;boolean判断结果&quot;</span>&gt;</span></span><br><span class="line">   sql 代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在mapper文件中</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpwoernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">      select *from student</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件&quot;</span>&gt;</span></span><br><span class="line">          sql语句</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件&quot;</span>&gt;</span></span><br><span class="line">          sql语句</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectIf</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--if    test: 使用对象的属性值作为条件--&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span>    select * from student    where id=-1    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span>       or  name = #&#123;name&#125;    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span>        or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;    <span class="tag">&lt;/<span class="name">if</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-2-where-标签"><a href="#4-2-where-标签" class="headerlink" title="4.2 where 标签"></a>4.2 where 标签</h2><p>使用if标签时，容易引起sql语句语法错误。  使用where标签解决if产生的语法问题。</p>
<p>使用时 where ,里面是一个或多个if 标签， 当有一个if标签 判断条件为true，  where标签会转为 WHERE 关键字附加到sql语句的后面。  如果 if 没有一个条件为true ， 忽略where和里面的if。</p>
<p>where标签删除 和他最近的or 或者 and。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">语法：<span class="tag">&lt;<span class="name">where</span>&gt;</span>    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件1&quot;</span>&gt;</span>sql语句1<span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件2&quot;</span>&gt;</span>sql语句2<span class="tag">&lt;/<span class="name">if</span>&gt;</span><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//whereList&lt;Student&gt; selectWhere(Student student);</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--where--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or  name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span></span><br><span class="line">            or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-3-foreach-循环"><a href="#4-3-foreach-循环" class="headerlink" title="4.3 foreach 循环"></a>4.3 foreach 循环</h2><p>使用foreach可以循环数组，list集合， 一般使用在in语句中。</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt; foreach collection=&quot;集合类型&quot; open=&quot;开始的字符&quot; close=&quot;结束的字符&quot;</span><br><span class="line">          item=&quot;集合中的成员&quot; separator=&quot;集合成员之间的分隔符&quot;&gt;</span><br><span class="line">              #&#123;item 的值&#125;</span><br><span class="line">&lt;/ foreach&gt;</span><br><span class="line"></span><br><span class="line">标签属性：</span><br><span class="line">collection： 表示，循环的对象是 数组， 还是list集合。  如果dao接口方法的形参是 数组， </span><br><span class="line">             collection=&quot;array&quot; ,如果dao接口形参是List， collection=&quot;list&quot;</span><br><span class="line"></span><br><span class="line">open:循环开始时的字符。  sql.append(&quot;(&quot;);</span><br><span class="line">close：循环结束时字符。  sql.append(&quot;)&quot;);</span><br><span class="line">item：集合成员， 自定义的变量。   Integer item  = idlist.get(i);// item是集合成员</span><br><span class="line">separator：集合成员之间的分隔符。  sql.append(&quot;,&quot;); //集合成员之间的分隔符</span><br><span class="line">#&#123;item 的值&#125;：获取集合成员的值。</span><br></pre></td></tr></table></figure>



<p>第一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach-1</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectForeachOne</span><span class="params">(List&lt;Integer&gt; idlist)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--foreach第一种方式， 循环简单类型的List--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectForeachOne&quot;</span> resultType=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span><br><span class="line">      select * from student</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;list !=null and list.size&gt;0&quot;</span>&gt;</span><br><span class="line">            where id in</span><br><span class="line">            &lt;foreach collection=<span class="string">&quot;list&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span> separator=<span class="string">&quot;,&quot;</span> item=<span class="string">&quot;myid&quot;</span>&gt;</span><br><span class="line">                  #&#123;myid&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectForeachOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSession</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">//2.获取dao的代理</span></span><br><span class="line">        StudentDao dao = session.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; idlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        idlist.add(<span class="number">1001</span>);</span><br><span class="line">        idlist.add(<span class="number">1002</span>);</span><br><span class="line">        idlist.add(<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students  = dao.selectForeachOne(idlist);</span><br><span class="line"></span><br><span class="line">        students.forEach( stu-&gt; System.out.println(<span class="string">&quot;stu==&quot;</span>+stu));</span><br><span class="line">        <span class="comment">//3.关闭SqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>第二种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach-2</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectForeachTwo</span><span class="params">(List&lt;Student&gt; studentList)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;!--foreach第二种方式， 循环的List&lt;Student&gt;--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectForeachTwo&quot;</span> resultType=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span><br><span class="line">        select * from student</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;list != null and list.size&gt;0&quot;</span>&gt;</span><br><span class="line">            where id in</span><br><span class="line">            &lt;foreach collection=<span class="string">&quot;list&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span> separator=<span class="string">&quot;,&quot;</span> item=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">                  #&#123;stu.id&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">            </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectForeachTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSession</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">//2.获取dao的代理</span></span><br><span class="line">        StudentDao dao = session.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setId(<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setId(<span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students  = dao.selectForeachTwo(list);</span><br><span class="line"></span><br><span class="line">        students.forEach( stu-&gt; System.out.println(<span class="string">&quot;stu==&quot;</span>+stu));</span><br><span class="line">        <span class="comment">//3.关闭SqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure>

<h2 id="4-4-sql标签"><a href="#4-4-sql标签" class="headerlink" title="4.4 sql标签"></a>4.4 sql标签</h2><p>sql标签标示 一段sql代码， 可以是表名，几个字段， where条件都可以， 可以在其他地方复用sql标签的内容。</p>
<p>使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1) 在mapper文件中定义 sql代码片段 <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;唯一字符串&quot;</span>&gt;</span>  部分sql语句  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">2）在其他的位置，使用include标签引用某个代码片段</span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义代码片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;studentFieldList&quot;</span>&gt;</span></span><br><span class="line">    id,name,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectStudent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        where id=-1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">           or  name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span></span><br><span class="line">            or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--where--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;studentFieldList&quot;</span>/&gt;</span> from student</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                or  name = #&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span></span><br><span class="line">                or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="第五章-MyBatis配置文件"><a href="#第五章-MyBatis配置文件" class="headerlink" title="第五章 MyBatis配置文件"></a>第五章 MyBatis配置文件</h1><p>mybatis配置文件两大类： 1 mybatis主配置文件； 2 mybatis的mapper文件</p>
<ol>
<li>mybatis主配置文件，提供mybatis全局设置的。包含的内容 日志， 数据源，mapper文件位置</li>
<li>mapper文件： 写sql语句的。 一个表一个mapper文件</li>
</ol>
<h2 id="5-1-settings部分"><a href="#5-1-settings部分" class="headerlink" title="5.1 settings部分"></a>5.1 settings部分</h2><p>settings是mybatis的全局设置，影响整个mybatis的运行。 这个设置一般使用默认值就可以了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-typeAliase-别名"><a href="#5-2-typeAliase-别名" class="headerlink" title="5.2 typeAliase 别名"></a>5.2 typeAliase 别名</h2><p>设置别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--第一种语法格式</span></span><br><span class="line"><span class="comment">           type:java类型的全限定名称（自定义类型）</span></span><br><span class="line"><span class="comment">           alias:自定义别名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           优点： 别名可以自定义</span></span><br><span class="line"><span class="comment">           缺点： 每个类型必须单独定义</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.vo.QueryParam&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;qp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--第二种方式</span></span><br><span class="line"><span class="comment">           name:包名， mybatis会把这个包中所有类名作为别名（不用区分大小写）</span></span><br><span class="line"><span class="comment">           优点：使用方便，一次给多个类定义别名</span></span><br><span class="line"><span class="comment">           缺点: 别名不能自定义，必须是类名。</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.domain&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.vo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-3-配置环境"><a href="#5-3-配置环境" class="headerlink" title="5.3 配置环境"></a>5.3 配置环境</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">environments: 环境标签， 在他里面可以配置多个environment</span><br><span class="line">       属性： default ，必须是某个environment的id属性值。 表示mybatis默认连接的数据库</span><br><span class="line">environment： 表示一个数据库的连接信息。</span><br><span class="line">       属性： id 自定义的环境的标识。 唯一值。</span><br><span class="line">transactionManager：事务管理器</span><br><span class="line">       属性：  type 表示事务管理器的类型。</span><br><span class="line">       属性值：1）JDBC: 使用Connection对象， 由mybatis自己完成事务的处理。</span><br><span class="line">             2） MANAGED: 管理，表示把事务的处理交给容器实现（由其他软件完成事务的提交，回滚）</span><br><span class="line">dataSource： 数据源，创建的Connection对象，连接数据库。</span><br><span class="line">       属性：  type 数据源的类型</span><br><span class="line">       属性值：1） POOLED， mybatis会在内存中创建PooledDataSource类，管理多个Connection连接对象，使                           用的连接池</span><br><span class="line">             2） UNPOOLED ，不使用连接池， mybatis创建一个UnPooledDataSource这个类， 每次执行sql                           语句先创建Connection对象，再执行sql语句，最后关闭Connection</span><br><span class="line">             3) JNDI : java的命名和目录服务。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;online&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源： 创建Connection对象。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver:驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目上线后使用的数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;online&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源： 创建Connection对象。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver:驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-4-使用数据库属性配置文件（-）"><a href="#5-4-使用数据库属性配置文件（-）" class="headerlink" title="5.4 使用数据库属性配置文件（*）"></a>5.4 使用数据库属性配置文件（*）</h2><p>需要把数据库的配置信息放到一个单独文件中， 独立管理。 这个文件扩展名是 properties. 在这个文件中，使用自定义的key=value的格式表示数据</p>
<p>使用步骤：</p>
<p>1.在resources目录中，创建xxxx.properties</p>
<p>2.在文件中，使用 key=value的格式定义数据。</p>
<p>   例如 jdbc.url=jdbc:mysq://localhost:3306/springdb</p>
<p>3.在mybatis主配置文件， 使用properties标签引用外部的属性配置文件</p>
<p>4.在使用值的位置， 使用${key}获取key对应的value（等号右侧的值）</p>
<p>例子：</p>
<p>jdbc.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/springdb?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure>



<p>mybatis主配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用外部属性配置文件</span></span><br><span class="line"><span class="comment">    resource:指定类路径下的某个属性配置文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源： 创建Connection对象。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver:驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5-mapper-标签"><a href="#5-5-mapper-标签" class="headerlink" title="5.5 mapper 标签(*)"></a>5.5 mapper 标签(*)</h2><p>使用mapper指定其他mapper文件的位置， </p>
<p>mapper标签使用的格式有两个常用的方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>    <span class="comment">&lt;!--第一种方式， resources=&quot;mapper文件的路径&quot;        优点：文件清晰。 加载的文件是明确的。              文件的位置比较灵活。        缺点：文件比较多， 代码量会比较大， 管理难度大    --&gt;</span>    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bjpowernode/dao/StudentDao.xml&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bjpowernode/dao/OrderDao.xml&quot;</span>/&gt;</span>    <span class="comment">&lt;!--       第二种方式，使用&lt;package&gt;       name:包名， mapper文件所在的包名。       特点： 把这个包中的所有mapper文件，一次加载。       使用要求：        1. mapper文件和dao接口在同一目录        2. mapper文件和dao接口名称完全一样。    --&gt;</span>    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.dao1&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="第六章-PageHelper"><a href="#第六章-PageHelper" class="headerlink" title="第六章 PageHelper"></a>第六章 PageHelper</h1><p>PageHelper做数据分页。 在你的select语句后面加入 分页的 sql 内容， 如果你使用的mysql数据库， 它就是在select * from student 后面加入 limit 语句。</p>
<p>使用步骤：</p>
<p>1.加入依赖pagehelper依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.在mybatis主配置文件， 加入plugin声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">environments</span>&gt;</span> 之前加入<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>   <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span> =<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br></pre></td></tr></table></figure>



<p>3.在select语句之前，调用PageHelper.startPage(页码， 每页大小)</p>
<p>对比：</p>
<p>没有使用PageHelper</p>
<p>select * from student order by id</p>
<p>使用PageHelper</p>
<p>SELECT count(0) FROM student </p>
<p>select * from student order by id LIMIT ? </p>]]></content>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2021/10/26/SpringBoot/</url>
    <content><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">详细参照微服务文档</a></p>
<h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/">http://www.gulixueyuan.com/</a> 谷粒学院</p>
<p>环境约束</p>
<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>
<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>
<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>
<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>
<p>统一环境；</p>
<h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p>
<p>![idea设置](../../../../../Program Files/Typora/images/搜狗截图20180129151045.png)</p>
<p>![images/](../../../../../Program Files/Typora/images/搜狗截图20180129151112.png)</p>
<h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
<h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter</strong>-==web==：</p>
<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>
<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>
<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>
<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>

<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>
<p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>
<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>​        给容器中导入组件？</p>
<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        ![自动配置类](../../../../../Program Files/Typora/images/搜狗截图20180129224104.png)</p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>
<p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>
<p>​        </p>
<p>==Spring注解版（谷粒学院）==</p>
<h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>
<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>
<p>默认生成的Spring Boot项目；</p>
<ul>
<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>
<li>resources文件夹中目录结构<ul>
<li>static：保存所有的静态资源； js css  images；</li>
<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>
<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr>
<h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<p>•application.properties</p>
<p>•application.yml</p>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup Language）</p>
<p>​    YAML  A Markup Language：是一个标记语言</p>
<p>​    YAML   isn’t Markup Language：不是一个标记语言；</p>
<p>标记语言：</p>
<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>
<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>
<p>​    YAML：配置例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>​    XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感；</p>
<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p>
<p>​        字符串默认不用加上单引号或者双引号；</p>
<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p>
<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p>
<h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>
<p>​        对象还是k: v的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">lastName:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>



<h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>



<h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>
<p>![idea配置乱码](../../../../../Program Files/Typora/images/搜狗截图20180130161620.png)</p>
<h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;person&quot;)默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>



<p>不来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.springboot.service.HelloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类**@Configuration**——&gt;Spring配置文件</p>
<p>2、使用**@Bean**给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类@Bean给容器中添加组件了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##4、配置文件占位符</p>
<h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>



<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>





<h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>
<p>​    2、命令行：</p>
<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>
<p>​        可以直接在测试的时候，配置传入命令行参数</p>
<p>​    3、虚拟机参数；</p>
<p>​        -Dspring.profiles.active=dev</p>
<h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/</p>
<p>–file:./</p>
<p>–classpath:/config/</p>
<p>–classpath:/</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>
<h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； –配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>
<p>==<strong>优先加载带profile</strong>==</p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p>==<strong>再来加载不带profile</strong>==</p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p>
<h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p>
<h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p>
</li>
<li><p>可以查看selectImports()方法的内容；</p>
</li>
<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</String></p>
<ul>
<li>```java<br>SpringFactoriesLoader.loadFactoryNames()<br>扫描所有jar包类路径下  META-INF/spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**</span><br><span class="line"></span><br><span class="line">```properties</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span>  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span>  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span>  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>





<p><strong>精髓：</strong></p>
<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>
<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>
<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>
<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>
<p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p>**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> &#x27;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&#x27;</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes &#x27;org.aspectj.lang.annotation.Aspect&#x27;, &#x27;org.aspectj.lang.reflect.Advice&#x27; <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br></pre></td></tr></table></figure>





<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>
<p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p>
<p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p>
<p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p>
<p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p>
<p>​        5、JDBC—数据库驱动；</p>
<p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p>
<p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p>
<p><strong>市面上的日志框架；</strong></p>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>
<p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p>
<h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示；</p>
<p>![images/concrete-bindings.png](../../../../../Program Files/Typora/images/concrete-bindings.png)</p>
<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>
<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>
<p>![](../../../../../Program Files/Typora/images/legacy.png)</p>
<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>==1、将系统中其他日志框架先排除出去；==</p>
<p>==2、用中间包来替换原有的日志框架；==</p>
<p>==3、我们导入slf4j其他的实现==</p>
<h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>SpringBoot使用它来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>底层依赖关系</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180131220946.png)</p>
<p>总结：</p>
<p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
<p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p>
<p>​    3）、中间替换包？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">&quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180131221411.png)</p>
<p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>
<p>​            Spring框架用的是commons-logging；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p>
<h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器	Logger logger = LoggerFactory.getLogger(getClass());	@Test	public void contextLoads() &#123;		//System.out.println();		//日志的级别；		//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error		//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效		logger.trace(&quot;这是trace日志...&quot;);		logger.debug(&quot;这是debug日志...&quot;);		//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别		logger.info(&quot;这是info日志...&quot;);		logger.warn(&quot;这是warn日志...&quot;);		logger.error(&quot;这是error日志...&quot;);	&#125;</span></span><br></pre></td></tr></table></figure>



<pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n
</code></pre>
<p>SpringBoot修改日志的默认配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace#logging.path=# 不指定路径在当前项目下生成springboot.log日志# 可以指定完整的路径；#logging.file=G:/springboot.log# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件logging.path=/spring/log#  在控制台输出的日志的格式logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n# 指定文件中日志输出的格式logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;staging&quot;</span>&gt;</span>    <span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span>  	可以指定某段配置只在某个环境下生效<span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="comment">&lt;!--        日志输出格式：			%d表示日期时间，			%thread表示线程名，			%-5level：级别从左显示5个字符宽度			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 			%msg：日志消息，			%n是换行符        --&gt;</span>        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span>            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!dev&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span>        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span>    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<p> <code>no applicable action for [springProfile]</code></p>
<h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>切换为log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p>
<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>
<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>
<p><strong>3）、自己编写业务代码；</strong></p>
<p><strong>自动配置原理？</strong></p>
<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure>



<h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebMvcAuotConfiguration：		<span class="meta">@Override</span>		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;			<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;				logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);				<span class="keyword">return</span>;			&#125;			Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();			<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;				customizeResourceHandlerRegistration(						registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)								.addResourceLocations(										<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)						.setCachePeriod(cachePeriod));			&#125;			String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();          	<span class="comment">//静态资源文件夹映射			if (!registry.hasMappingForPattern(staticPathPattern)) &#123;				customizeResourceHandlerRegistration(						registry.addResourceHandler(staticPathPattern)								.addResourceLocations(										this.resourceProperties.getStaticLocations())						.setCachePeriod(cachePeriod));			&#125;		&#125;        //配置欢迎页映射		@Bean		public WelcomePageHandlerMapping welcomePageHandlerMapping(				ResourceProperties resourceProperties) &#123;			return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),					this.mvcProperties.getStaticPathPattern());		&#125;       //配置喜欢的图标		@Configuration		@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)		public static class FaviconConfiguration &#123;			private final ResourceProperties resourceProperties;			public FaviconConfiguration(ResourceProperties resourceProperties) &#123;				this.resourceProperties = resourceProperties;			&#125;			@Bean			public SimpleUrlHandlerMapping faviconHandlerMapping() &#123;				SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();				mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);              	//所有  **/favicon.ico 				mapping.setUrlMap(Collections.singletonMap(&quot;**/favicon.ico&quot;,						faviconRequestHandler()));				return mapping;			&#125;			@Bean			public ResourceHttpRequestHandler faviconRequestHandler() &#123;				ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();				requestHandler						.setLocations(this.resourceProperties.getFaviconLocations());				return requestHandler;			&#125;		&#125;</span></span><br></pre></td></tr></table></figure>



<p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p>
<p>​    webjars：以jar包的方式引入静态资源；</p>
<p><a href="http://www.webjars.org/">http://www.webjars.org/</a></p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180203181751.png)</p>
<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>

<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>
<p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p>
<p>​    localhost:8080/   找index页面</p>
<p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p>
<h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<p>![](../../../../../Program Files/Typora/images/template-engine.png)</p>
<p>SpringBoot推荐的Thymeleaf；</p>
<p>语法更简单，功能更强大；</p>
<h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>          	2.1.6		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>切换thymeleaf版本<span class="tag">&lt;<span class="name">properties</span>&gt;</span>		<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span>		<span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span>		<span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span>		<span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">&quot;text/html&quot;</span>);	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;  	<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>
<p>使用：</p>
<p>1、导入thymeleaf的名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、使用thymeleaf语法；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>
<p>​    th：任意html属性；来替换原生属性的值</p>
<p>![](../../../../../Program Files/Typora/images/2018-02-04_123955.png)</p>
<p>2）、表达式？</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:（表达式语法）    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；    		1）、获取对象的属性、调用方法    		2）、使用内置的基本对象：    			#ctx : the context object.    			#vars: the context variables.                #locale : the context locale.                #request : (only in Web Contexts) the HttpServletRequest object.                #response : (only in Web Contexts) the HttpServletResponse object.                #session : (only in Web Contexts) the HttpSession object.                #servletContext : (only in Web Contexts) the ServletContext object.                                $&#123;session.foo&#125;            3）、内置的一些工具对象：#execInfo : information about the template being processed.#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.#uris : methods for escaping parts of URLs/URIs#conversions : methods for executing the configured conversion service (if any).#dates : methods for java.util.Date objects: formatting, component extraction, etc.#calendars : analogous to #dates , but for java.util.Calendar objects.#numbers : methods for formatting numeric objects.#strings : methods for String objects: contains, startsWith, prepending/appending, etc.#objects : methods for objects in general.#bools : methods for boolean evaluation.#arrays : methods for arrays.#lists : methods for lists.#sets : methods for sets.#maps : methods for maps.#aggregates : methods for creating aggregates on arrays or collections.#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；    	补充：配合 th:object=&quot;$&#123;session.user&#125;：   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;    &lt;/div&gt;        Message Expressions: #&#123;...&#125;：获取国际化内容    Link URL Expressions: @&#123;...&#125;：定义URL；    		@&#123;/order/process(execId=$&#123;execId&#125;,execType=&#x27;FAST&#x27;)&#125;    Fragment Expressions: ~&#123;...&#125;：片段引用表达式    		&lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;    		Literals（字面量）      Text literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…      Number literals: 0 , 34 , 3.0 , 12.3 ,…      Boolean literals: true , false      Null literal: null      Literal tokens: one , sometext , main ,…Text operations:（文本操作）    String concatenation: +    Literal substitutions: |The name is $&#123;name&#125;|Arithmetic operations:（数学运算）    Binary operators: + , - , * , / , %    Minus sign (unary operator): -Boolean operations:（布尔运算）    Binary operators: and , or    Boolean negation (unary operator): ! , notComparisons and equality:（比较运算）    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )    Equality operators: == , != ( eq , ne )Conditional operators:条件运算（三元运算符）    If-then: (if) ? (then)    If-then-else: (if) ? (then) : (else)    Default: (value) ?: (defaultvalue)Special tokens:    No-Operation: _ </span></span><br></pre></td></tr></table></figure>

<h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>
<h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>
<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>
<li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>
</li>
<li><p>Static <code>index.html</code> support. 静态首页访问</p>
</li>
<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>
</li>
<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>
<ul>
<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>
<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class="comment">//在文件中配置日期格式化的规则		public Formatter&lt;Date&gt; dateFormatter() &#123;			return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件		&#125;</span></span><br></pre></td></tr></table></figure>

<p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p>
<ul>
<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>
<ul>
<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>
</li>
<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>
<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>
</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>
<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化WebDataBinder；请求数据=====JavaBean；</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>
<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
<h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span>            <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p>
<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>
<p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;      <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();	 <span class="comment">//从容器中获取所有的WebMvcConfigurer      @Autowired(required = false)      public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) &#123;          if (!CollectionUtils.isEmpty(configurers)) &#123;              this.configurers.addWebMvcConfigurers(configurers);            	//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；              	@Override             // public void addViewControllers(ViewControllerRegistry registry) &#123;              //    for (WebMvcConfigurer delegate : this.delegates) &#123;               //       delegate.addViewControllers(registry);               //   &#125;              &#125;          &#125;	&#125;</span></span><br></pre></td></tr></table></figure>

<p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>
<p>​    4）、我们的配置类也会被调用；</p>
<p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>
<h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>
<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@EnableWebMvc@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>为什么@EnableWebMvc自动配置就失效了；</p>
<p>1）@EnableWebMvc的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure>

<p>2）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,		WebMvcConfigurerAdapter.class &#125;)</span><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,		ValidationAutoConfiguration.class &#125;)public class WebMvcAutoConfiguration &#123;</span></span><br></pre></td></tr></table></figure>

<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>
<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>
<h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>
<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>
<p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>
<p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>
<h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能//@EnableWebMvc   不要接管SpringMVC@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    &#125;    //所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123;        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() &#123;            @Override            public void addViewControllers(ViewControllerRegistry registry) &#123;                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);            &#125;        &#125;;        return adapter;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>
<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>
<p>3）、在页面使用fmt:message取出国际化内容</p>
<p>步骤：</p>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180211130721.png)</p>
<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;        <span class="comment">/**	 * Comma-separated list of basenames (essentially a fully-qualified classpath	 * location), each following the ResourceBundle convention with relaxed support for	 * slash based locations. If it doesn&#x27;t contain a package qualifier (such as	 * &quot;org.mypackage&quot;), it will be resolved from the classpath root.	 */</span>	<span class="keyword">private</span> String basename = <span class="string">&quot;messages&quot;</span>;      <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；        @Bean	public MessageSource messageSource() &#123;		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();		if (StringUtils.hasText(this.basename)) &#123;            //设置国际化资源文件的基础名（去掉语言国家代码的）			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(					StringUtils.trimAllWhitespace(this.basename)));		&#125;		if (this.encoding != null) &#123;			messageSource.setDefaultEncoding(this.encoding.name());		&#125;		messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);		messageSource.setCacheSeconds(this.cacheSeconds);		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);		return messageSource;	&#125;</span></span><br></pre></td></tr></table></figure>



<p>3）、去页面获取国际化的值；</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180211134506.png)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>	<span class="tag">&lt;<span class="name">head</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span>		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span>		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/bootstrap.min.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span>		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span>		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/signin.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span>	<span class="tag">&lt;/<span class="name">head</span>&gt;</span>	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span>			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span>			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span>				<span class="tag">&lt;<span class="name">label</span>&gt;</span>          		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span>/&gt;</span> [[#&#123;login.remember&#125;]]        <span class="tag">&lt;/<span class="name">label</span>&gt;</span>			<span class="tag">&lt;/<span class="name">div</span>&gt;</span>			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span>			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span>			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span>			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span>		<span class="tag">&lt;/<span class="name">form</span>&gt;</span>	<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：根据浏览器语言设置的信息切换了国际化；</p>
<p>原理：</p>
<p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>		<span class="meta">@ConditionalOnMissingBean</span>		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span>		<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;			<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;				<span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());			&#125;			AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();			localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());			<span class="keyword">return</span> localeResolver;		&#125;默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>

<p>4）、点击链接切换国际化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 可以在连接上携带区域信息 */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;        <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;        String l = request.getParameter(<span class="string">&quot;l&quot;</span>);        Locale locale = Locale.getDefault();        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;            String[] split = l.split(<span class="string">&quot;_&quot;</span>);            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);        &#125;        <span class="keyword">return</span> locale;    &#125;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;    &#125;&#125; <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>
<p>1）、禁用模板引擎的缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 禁用缓存spring.thymeleaf.cache=false </span><br></pre></td></tr></table></figure>

<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>
<p>登陆错误消息的显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 登陆检查， */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;    <span class="comment">//目标方法执行之前    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        Object user = request.getSession().getAttribute(&quot;loginUser&quot;);        if(user == null)&#123;            //未登陆，返回登陆页面            request.setAttribute(&quot;msg&quot;,&quot;没有权限请先登陆&quot;);            request.getRequestDispatcher(&quot;/index.html&quot;).forward(request,response);            return false;        &#125;else&#123;            //已登陆，放行请求            return true;        &#125;    &#125;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>



<p>注册拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123;        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() &#123;            @Override            public void addViewControllers(ViewControllerRegistry registry) &#123;                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;);            &#125;            //注册拦截器            @Override            public void addInterceptors(InterceptorRegistry registry) &#123;                //super.addInterceptors(registry);                //静态资源；  *.css , *.js                //SpringBoot已经做好了静态资源映射                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(&quot;/**&quot;)                        .excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;);            &#125;        &#125;;        return adapter;    &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>
<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
<p>2）、实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p>3）、员工列表：</p>
<h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、抽取公共片段<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span>2、引入公共片段<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>~&#123;templatename::selector&#125;：模板名::选择器~&#123;templatename::fragmentname&#125;:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>



<p>三种引入公共片段的th属性：</p>
<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span>引入方式<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>效果<span class="tag">&lt;<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>引入片段的时候传入参数： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span>                   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>                   <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span>                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-home&quot;</span>&gt;</span>                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span>                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span>                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span>                <span class="tag">&lt;/<span class="name">a</span>&gt;</span>            <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan@atguigu.com&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交的数据格式不对：生日：日期；</p>
<p>2017-12-12；2017/12/12；2017.12.12；</p>
<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>
<p>2017-12-12—Date； 类型转换，格式化;</p>
<p>默认日期是按照/的方式；</p>
<h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span>    <span class="comment">&lt;!--1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）2、页面创建一个post表单3、创建一个input项，name=&quot;_method&quot;;值就是我们指定的请求方式--&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan@atguigu.com&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="comment">&lt;!--提交的是部门的id--&gt;</span>        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;depts&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender&#125;==0?&#x27;女&#x27;:&#x27;男&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span>        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    $(<span class="string">&quot;.deleteBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        <span class="comment">//删除当前员工的        $(&quot;#deleteEmpForm&quot;).attr(&quot;action&quot;,$(this).attr(&quot;del_uri&quot;)).submit();        return false;    &#125;);</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>
<p>​        1）、浏览器，返回一个默认的错误页面</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180226173408.png)</p>
<p>  浏览器发送请求的请求头：</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180226180347.png)</p>
<p>​        2）、如果是其他客户端，默认响应一个json数据</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180226173527.png)</p>
<p>​        ![](../../../../../Program Files/Typora/images/搜狗截图20180226180504.png)</p>
<p>原理：</p>
<p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>
<pre><code>  给容器中添加了以下组件
</code></pre>
<p>​    1、DefaultErrorAttributes：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">帮我们在页面共享信息；<span class="meta">@Override</span>	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,			<span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;		Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();		errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());		addStatus(errorAttributes, requestAttributes);		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);		addPath(errorAttributes, requestAttributes);		<span class="keyword">return</span> errorAttributes;	&#125;</span><br></pre></td></tr></table></figure>



<p>​    2、BasicErrorController：处理默认/error请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;        <span class="meta">@RequestMapping(produces = &quot;text/html&quot;)</span><span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理	public ModelAndView errorHtml(HttpServletRequest request,			HttpServletResponse response) &#123;		HttpStatus status = getStatus(request);		Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));		response.setStatus(status.value());                //去哪个页面作为错误页面；包含页面地址和页面内容		ModelAndView modelAndView = resolveErrorView(request, response, status, model);		return (modelAndView == null ? new ModelAndView(&quot;error&quot;, model) : modelAndView);	&#125;	@RequestMapping	@ResponseBody    //产生json数据，其他客户端来到这个方法处理；	public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;		Map&lt;String, Object&gt; body = getErrorAttributes(request,				isIncludeStackTrace(request, MediaType.ALL));		HttpStatus status = getStatus(request);		return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);	&#125;</span></span><br></pre></td></tr></table></figure>



<p>​    3、ErrorPageCustomizer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span>	<span class="keyword">private</span> String path = <span class="string">&quot;/error&quot;</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>



<p>​    4、DefaultErrorViewResolver：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,			Map&lt;String, Object&gt; model)</span> </span>&#123;		ModelAndView modelAndView = resolve(String.valueOf(status), model);		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);		&#125;		<span class="keyword">return</span> modelAndView;	&#125;	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404		String errorViewName = &quot;error/&quot; + viewName;                //模板引擎可以解析这个页面地址就用模板引擎解析		TemplateAvailabilityProvider provider = this.templateAvailabilityProviders				.getProvider(errorViewName, this.applicationContext);		if (provider != null) &#123;            //模板引擎可用的情况下返回到errorViewName指定的视图地址			return new ModelAndView(errorViewName, model);		&#125;        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html		return resolveResource(errorViewName, model);	&#125;</span></span><br></pre></td></tr></table></figure>



<p>​    步骤：</p>
<p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>
<p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;    <span class="comment">//所有的ErrorViewResolver得到ModelAndView   for (ErrorViewResolver resolver : this.errorViewResolvers) &#123;      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);      if (modelAndView != null) &#123;         return modelAndView;      &#125;   &#125;   return null;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>
<p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p>
<p>​            页面能获取的信息；</p>
<p>​                timestamp：时间戳</p>
<p>​                status：状态码</p>
<p>​                error：错误提示</p>
<p>​                exception：异常对象</p>
<p>​                message：异常消息</p>
<p>​                errors：JSR303数据校验的错误都在这里</p>
<p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>
<p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>
<h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvicepublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;    <span class="meta">@ResponseBody</span>    <span class="meta">@ExceptionHandler(UserNotExistException.class)</span>    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);        map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());        <span class="keyword">return</span> map;    &#125;&#125;<span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>



<p>​        2）、转发到/error进行自适应响应效果处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(UserNotExistException.class)</span>    <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程        /**         * Integer statusCode = (Integer) request         .getAttribute(&quot;javax.servlet.error.status_code&quot;);         */        request.setAttribute(&quot;javax.servlet.error.status_code&quot;,500);        map.put(&quot;code&quot;,&quot;user.notexist&quot;);        map.put(&quot;message&quot;,e.getMessage());        //转发到/error        return &quot;forward:/error&quot;;    &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>
<p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>
<p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>
<p>自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes@Componentpublic class MyErrorAttributes extends DefaultErrorAttributes &#123;    @Override    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) &#123;        Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace);        map.put(&quot;company&quot;,&quot;atguigu&quot;);        return map;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180228135513.png)</p>
<h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180301142915.png)</p>
<p>问题？</p>
<h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081server.context-path=/crudserver.tomcat.uri-encoding=UTF-8//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>

<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer()&#123;    return new EmbeddedServletContainerCustomizer() &#123;        //定制嵌入式的Servlet容器相关的规则        @Override        public void customize(ConfigurableEmbeddedServletContainer container) &#123;            container.setPort(8083);        &#125;    &#125;;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<p>ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册三大组件@Beanpublic ServletRegistrationBean myServlet()&#123;    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),&quot;/myServlet&quot;);    return registrationBean;&#125;</span></span><br></pre></td></tr></table></figure>

<p>FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/myServlet&quot;</span>));    <span class="keyword">return</span> registrationBean;&#125;</span><br></pre></td></tr></table></figure>

<p>ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());    <span class="keyword">return</span> registrationBean;&#125;</span><br></pre></td></tr></table></figure>



<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>
<p>DispatcherServletAutoConfiguration中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(      DispatcherServlet dispatcherServlet)</span> </span>&#123;   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径       registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);   registration.setLoadOnStartup(         this.webMvcProperties.getServlet().getLoadOnStartup());   if (this.multipartConfig != null) &#123;      registration.setMultipartConfig(this.multipartConfig);   &#125;   return registration;&#125;</span></span><br></pre></td></tr></table></figure>

<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>
<h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p>![](../../../../../Program Files/Typora/images/搜狗截图20180302114401.png)</p>
<p>默认支持：</p>
<p>Tomcat（默认使用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Jetty</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Undertow</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span><span class="meta">@Import(BeanPostProcessorsRegistrar.class)</span><span class="comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作public class EmbeddedServletContainerAutoConfiguration &#123;        @Configuration	@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)//判断当前是否引入了Tomcat依赖；	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器	public static class EmbeddedTomcat &#123;		@Bean		public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() &#123;			return new TomcatEmbeddedServletContainerFactory();		&#125;	&#125;        /**	 * Nested configuration if Jetty is being used.	 */	@Configuration	@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class,			WebAppContext.class &#125;)	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)	public static class EmbeddedJetty &#123;		@Bean		public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() &#123;			return new JettyEmbeddedServletContainerFactory();		&#125;	&#125;	/**	 * Nested configuration if Undertow is being used.	 */	@Configuration	@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)	public static class EmbeddedUndertow &#123;		@Bean		public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() &#123;			return new UndertowEmbeddedServletContainerFactory();		&#125;	&#125;</span></span><br></pre></td></tr></table></figure>

<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;   <span class="comment">//获取嵌入式的Servlet容器   EmbeddedServletContainer getEmbeddedServletContainer(         ServletContextInitializer... initializers);&#125;</span></span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180302144835.png)</p>
<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180302144910.png)</p>
<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Overridepublic</span> <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(      ServletContextInitializer... initializers)</span> </span>&#123;    <span class="comment">//创建一个Tomcat   Tomcat tomcat = new Tomcat();        //配置Tomcat的基本环节   File baseDir = (this.baseDirectory != null ? this.baseDirectory         : createTempDir(&quot;tomcat&quot;));   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = new Connector(this.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(false);   configureEngine(tomcat.getEngine());   for (Connector additionalConnector : this.additionalTomcatConnectors) &#123;      tomcat.getService().addConnector(additionalConnector);   &#125;   prepareContext(tomcat.getHost(), initializers);        //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器   return getTomcatEmbeddedServletContainer(tomcat);&#125;</span></span><br></pre></td></tr></table></figure>

<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>



<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>
<p>怎么修改的原理？</p>
<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化之前@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName)      throws BeansException &#123;    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件   if (bean instanceof ConfigurableEmbeddedServletContainer) &#123;       //      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);   &#125;   return bean;&#125;private void postProcessBeforeInitialization(			ConfigurableEmbeddedServletContainer bean) &#123;    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;        customizer.customize(bean);    &#125;&#125;private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() &#123;    if (this.customizers == null) &#123;        // Look up does not include the parent context        this.customizers = new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(            this.beanFactory            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件            .getBeansOfType(EmbeddedServletContainerCustomizer.class,                            false, false)            .values());        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);        this.customizers = Collections.unmodifiableList(this.customizers);    &#125;    return this.customizers;&#125;ServerProperties也是定制器</span></span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>
<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>
<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>
<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>
<p>###5）、嵌入式Servlet容器启动原理；</p>
<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>
<p>获取嵌入式的Servlet容器工厂：</p>
<p>1）、SpringBoot应用启动运行run方法</p>
<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>
<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;      <span class="comment">// Prepare this context for refreshing.      prepareRefresh();      // Tell the subclass to refresh the internal bean factory.      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();      // Prepare the bean factory for use in this context.      prepareBeanFactory(beanFactory);      try &#123;         // Allows post-processing of the bean factory in context subclasses.         postProcessBeanFactory(beanFactory);         // Invoke factory processors registered as beans in the context.         invokeBeanFactoryPostProcessors(beanFactory);         // Register bean processors that intercept bean creation.         registerBeanPostProcessors(beanFactory);         // Initialize message source for this context.         initMessageSource();         // Initialize event multicaster for this context.         initApplicationEventMulticaster();         // Initialize other special beans in specific context subclasses.         onRefresh();         // Check for listener beans and register them.         registerListeners();         // Instantiate all remaining (non-lazy-init) singletons.         finishBeanFactoryInitialization(beanFactory);         // Last step: publish corresponding event.         finishRefresh();      &#125;      catch (BeansException ex) &#123;         if (logger.isWarnEnabled()) &#123;            logger.warn(&quot;Exception encountered during context initialization - &quot; +                  &quot;cancelling refresh attempt: &quot; + ex);         &#125;         // Destroy already created singletons to avoid dangling resources.         destroyBeans();         // Reset &#x27;active&#x27; flag.         cancelRefresh(ex);         // Propagate exception to caller.         throw ex;      &#125;      finally &#123;         // Reset common introspection caches in Spring&#x27;s core, since we         // might not ever need metadata for singleton beans anymore...         resetCommonCaches();      &#125;   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>
<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>
<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>
<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>
<p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>
<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>
<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>
<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>
<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>
<h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>
<p>​        优点：简单、便携；</p>
<p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>
<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>
<p>2）、将嵌入式的Tomcat指定为provided；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;   <span class="meta">@Override</span>   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;       <span class="comment">//传入SpringBoot应用的主程序      return application.sources(SpringBoot04WebJspApplication.class);   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>4）、启动服务器就可以使用；</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>
<p>servlet3.0（Spring注解版）：</p>
<p>8.2.4 Shared libraries / runtimes pluggability：</p>
<p>规则：</p>
<p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>
<p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>
<p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>
<p>流程：</p>
<p>1）、启动Tomcat</p>
<p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p>
<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>
<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>
<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180302221835.png)</p>
<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>
<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(      ServletContext servletContext)</span> </span>&#123;    <span class="comment">//1、创建SpringApplicationBuilder   SpringApplicationBuilder builder = createSpringApplicationBuilder();   StandardServletEnvironment environment = new StandardServletEnvironment();   environment.initPropertySources(servletContext, null);   builder.environment(environment);   builder.main(getClass());   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);   if (parent != null) &#123;      this.logger.info(&quot;Root context already created (using as parent).&quot;);      servletContext.setAttribute(            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);      builder.initializers(new ParentContextApplicationContextInitializer(parent));   &#125;   builder.initializers(         new ServletContextApplicationContextInitializer(servletContext));   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);        //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来   builder = configure(builder);        //使用builder创建一个Spring应用   SpringApplication application = builder.build();   if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils         .findAnnotation(getClass(), Configuration.class) != null) &#123;      application.getSources().add(getClass());   &#125;   Assert.state(!application.getSources().isEmpty(),         &quot;No SpringApplication sources have been defined. Either override the &quot;               + &quot;configure method or add an @Configuration annotation&quot;);   // Ensure error pages are registered   if (this.registerErrorPageFilter) &#123;      application.getSources().add(ErrorPageFilterConfiguration.class);   &#125;    //启动Spring应用   return run(application);&#125;</span></span><br></pre></td></tr></table></figure>

<p>7）、Spring的应用就启动并且创建IOC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = <span class="keyword">null</span>;   FailureAnalyzers analyzers = <span class="keyword">null</span>;   configureHeadlessProperty();   SpringApplicationRunListeners listeners = getRunListeners(args);   listeners.starting();   <span class="keyword">try</span> &#123;      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(            args);      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);      Banner printedBanner = printBanner(environment);      context = createApplicationContext();      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);              <span class="comment">//刷新IOC容器      refreshContext(context);      afterRefresh(context, applicationArguments);      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) &#123;         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      &#125;      return context;   &#125;   catch (Throwable ex) &#123;      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p>
<h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180303145450.png)</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180303145531.png)</p>
<h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>
<p>docker客户端(Client)：连接docker主机进行操作；</p>
<p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>
<p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p>
<p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180303165113.png)</p>
<p>使用Docker的步骤：</p>
<p>1）、安装Docker</p>
<p>2）、去Docker仓库找到这个软件对应的镜像；</p>
<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
<p>4）、对容器的启动停止就是对软件的启动停止；</p>
<h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p>
<p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p>
<p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p>
<p>​    4）、使用客户端连接linux服务器进行命令操作；</p>
<p>​    5）、设置虚拟机网络；</p>
<p>​        桥接网络===选好网卡====接入网线；</p>
<p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>​    7）、查看linux的ip地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>​    8）、使用客户端连接linux；</p>
<h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</span><br></pre></td></tr></table></figure>

<h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>
<p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure>



<h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>



<p>错误的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure>

<p>正确的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure>

<p>做了端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure>



<p>几个其他的高级操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>



<h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql://192.168.15.22:3306/jdbc    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>
<p>​    数据源的相关配置都在DataSourceProperties里面；</p>
<p>自动配置原理：</p>
<p>org.springframework.boot.autoconfigure.jdbc：</p>
<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>
<p>2、SpringBoot默认可以支持；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>

<p>3、自定义数据源类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * Generic DataSource configuration. */</span><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;   <span class="meta">@Bean</span>   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性      return properties.initializeDataSourceBuilder().build();   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>
<p>​    作用：</p>
<p>​        1）、runSchemaScripts();运行建表语句；</p>
<p>​        2）、runDataScripts();运行插入数据的sql语句；</p>
<p>默认只需要将文件命名为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；可以使用</span>   	<span class="string">schema:      - classpath:department.sql      指定位置</span></span><br></pre></td></tr></table></figure>

<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>
<h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">导入druid数据源<span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span>    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();    &#125;    <span class="comment">//配置Druid的监控    //1、配置一个管理后台的Servlet    @Bean    public ServletRegistrationBean statViewServlet()&#123;        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);        initParams.put(&quot;allow&quot;,&quot;&quot;);//默认就是允许所有访问        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);        bean.setInitParameters(initParams);        return bean;    &#125;    //2、配置一个web监控的filter    @Bean    public FilterRegistrationBean webStatFilter()&#123;        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));        return  bean;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180305194443.png)</p>
<p>步骤：</p>
<p>​    1）、配置数据源相关属性（见上一节Druid）</p>
<p>​    2）、给数据库建表</p>
<p>​    3）、创建JavaBean</p>
<h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper@Mapperpublic interface DepartmentMapper &#123;    @Select(&quot;select * from department where id=#&#123;id&#125;&quot;)    public Department getDeptById(Integer id);    @Delete(&quot;delete from department where id=#&#123;id&#125;&quot;)    public int deleteDeptById(Integer id);    @Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)    @Insert(&quot;insert into department(departmentName) values(#&#123;departmentName&#125;)&quot;)    public int insertDept(Department department);    @Update(&quot;update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;&quot;)    public int updateDept(Department department);&#125;</span></span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configurationpublic <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);            &#125;        &#125;;    &#125;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；<span class="meta">@MapperScan(value = &quot;com.atguigu.springboot.mapper&quot;)</span><span class="meta">@SpringBootApplicationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;		SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);	&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:  config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span>  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>

<p>更多使用参照</p>
<p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p>![](../../../../../Program Files/Typora/images/搜狗截图20180306105412.png)</p>
<h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>
<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系@Entity //告诉JPA这是一个实体类（和数据表映射的类）@Table(name = &quot;tbl_user&quot;) //@Table来指定和哪个数据表对应;如果省略默认表名就是user；public class User &#123;    @Id //这是一个主键    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键    private Integer id;    @Column(name = &quot;last_name&quot;,length = 50) //这是和数据表对应的一个列    private String lastName;    @Column //省略默认列名就是属性名    private String email;</span></span><br></pre></td></tr></table></figure>

<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>3）、基本的配置JpaProperties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:   jpa:</span>    <span class="string">hibernate:#</span>     <span class="string">更新或者创建数据表结构</span>      <span class="attr">ddl-auto:</span> <span class="string">update#</span>    <span class="string">控制台显示SQL</span>    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>
<p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<p><strong>SpringApplicationRunListener</strong></p>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<p><strong>CommandLineRunner</strong></p>
<p>启动流程：</p>
<h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialize(sources);<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;    <span class="comment">//保存主配置类    if (sources != null &amp;&amp; sources.length &gt; 0) &#123;        this.sources.addAll(Arrays.asList(sources));    &#125;    //判断当前是否一个web应用    this.webEnvironment = deduceWebEnvironment();    //从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来    setInitializers((Collection) getSpringFactoriesInstances(        ApplicationContextInitializer.class));    //从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));    //从多个配置类中找到有main方法的主配置类    this.mainApplicationClass = deduceMainApplicationClass();&#125;</span></span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180306145727.png)</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180306145855.png)</p>
<h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = <span class="keyword">null</span>;   FailureAnalyzers analyzers = <span class="keyword">null</span>;   configureHeadlessProperty();       <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories   SpringApplicationRunListeners listeners = getRunListeners(args);    //回调所有的获取SpringApplicationRunListener.starting()方法   listeners.starting();   try &#123;       //封装命令行参数      ApplicationArguments applicationArguments = new DefaultApplicationArguments(            args);      //准备环境      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);       		//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成             Banner printedBanner = printBanner(environment);              //创建ApplicationContext；决定创建web的ioc还是普通的ioc      context = createApplicationContext();             analyzers = new FailureAnalyzers(context);       //准备上下文环境;将environment保存到ioc中；而且applyInitializers()；       //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法       //回调所有的SpringApplicationRunListener的contextPrepared()；       //      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);       //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；              //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版       //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）      refreshContext(context);       //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调       //ApplicationRunner先回调，CommandLineRunner再回调      afterRefresh(context, applicationArguments);       //所有的SpringApplicationRunListener回调finished方法      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) &#123;         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      &#125;       //整个SpringBoot应用启动完成以后返回启动的ioc容器；      return context;   &#125;   catch (Throwable ex) &#123;      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;        System.out.println(<span class="string">&quot;ApplicationContextInitializer...initialize...&quot;</span>+applicationContext);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringApplicationRunListener</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;    <span class="comment">//必须有的构造器    public HelloSpringApplicationRunListener(SpringApplication application, String[] args)&#123;    &#125;    @Override    public void starting() &#123;        System.out.println(&quot;SpringApplicationRunListener...starting...&quot;);    &#125;    @Override    public void environmentPrepared(ConfigurableEnvironment environment) &#123;        Object o = environment.getSystemProperties().get(&quot;os.name&quot;);        System.out.println(&quot;SpringApplicationRunListener...environmentPrepared..&quot;+o);    &#125;    @Override    public void contextPrepared(ConfigurableApplicationContext context) &#123;        System.out.println(&quot;SpringApplicationRunListener...contextPrepared...&quot;);    &#125;    @Override    public void contextLoaded(ConfigurableApplicationContext context) &#123;        System.out.println(&quot;SpringApplicationRunListener...contextLoaded...&quot;);    &#125;    @Override    public void finished(ConfigurableApplicationContext context, Throwable exception) &#123;        System.out.println(&quot;SpringApplicationRunListener...finished...&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>配置（META-INF/spring.factories）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\com.atguigu.springboot.listener.HelloApplicationContextInitializerorg.springframework.boot.SpringApplicationRunListener=\com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>





<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="string">&quot;ApplicationRunner...run....&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>CommandLineRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="string">&quot;CommandLineRunner...run...&quot;</span>+ Arrays.asList(args));    &#125;&#125;</span><br></pre></td></tr></table></figure>



<h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p>
<p>​    1、这个场景需要使用到的依赖是什么？</p>
<p>​    2、如何编写自动配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类@ConditionalOnXXX  //在指定条件成立的情况下自动配置类生效@AutoConfigureAfter  //指定自动配置类的顺序@Bean  //给容器中添加组件@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置@EnableConfigurationProperties //让xxxProperties生效加入到容器中自动配置类要能加载将需要启动就加载的自动配置类，配置在META-INF/spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br></pre></td></tr></table></figure>

<p>​    3、模式：</p>
<p>启动器只用来做依赖导入；</p>
<p>专门来写一个自动配置模块；</p>
<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>
<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>
<p>步骤：</p>
<p>1）、启动器模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--启动器--&gt;</span>    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>        <span class="comment">&lt;!--引入自动配置模块--&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）、自动配置模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span>   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span>   <span class="tag">&lt;<span class="name">parent</span>&gt;</span>      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span>   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>   <span class="tag">&lt;<span class="name">properties</span>&gt;</span>      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span>      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span>      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;<span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<span class="meta">@ConfigurationProperties(prefix = &quot;atguigu.hello&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;    <span class="keyword">private</span> String prefix;    <span class="keyword">private</span> String suffix;    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> prefix;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;        <span class="keyword">this</span>.prefix = prefix;    &#125;    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> suffix;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;        <span class="keyword">this</span>.suffix = suffix;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;    HelloProperties helloProperties;    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> helloProperties;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;        <span class="keyword">this</span>.helloProperties = helloProperties;    &#125;    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">&quot;-&quot;</span> +name + helloProperties.getSuffix();    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;<span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<span class="keyword">import</span> org.springframework.context.annotation.Bean;<span class="keyword">import</span> org.springframework.context.annotation.Configuration;<span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration &#123;    @Autowired    HelloProperties helloProperties;    @Bean    public HelloService helloService()&#123;        HelloService service = new HelloService();        service.setHelloProperties(helloProperties);        return service;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>]]></content>
  </entry>
</search>
