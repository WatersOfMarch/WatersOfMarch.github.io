<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>List问题总结</title>
    <url>/2021/11/26/List%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="相爱相杀好基友——数组与链表"><a href="#相爱相杀好基友——数组与链表" class="headerlink" title="相爱相杀好基友——数组与链表"></a>相爱相杀好基友——数组与链表</h2><p>作为线性表的两种存储方式—-链表和数组，各有优缺点</p>
<h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p><strong>无法高效获取长度，无法根据下标快速找到访问元素，是链表的两个劣势；</strong>然而面试中会经常碰到诸如<font color="yellow">如何获取第k个元素</font>、<font color="yellow">获取中间位置元素、</font><font color="yellow">判断链表是否存在环、</font><font color="yellow">判断环的长度</font>这些与长度和位置有关的问题。都可以用双指针来解决</p>
<p><strong>Tips：双指针并不是固定的公式，而是一种思维方式</strong></p>
<ol>
<li>倒数第k个问题</li>
</ol>
<p>设有两个指针 p 和 q，初始时都指向头节点。首先，先让 q 沿着 next 移动 k 次；此时，p 指向头节点，q 指向 k+1 个节点，两个指针的距离为 k。然后，同时移动 p 和 q，直到 q 指向空，此时，p 指向倒数第 k 个节点</p>
<p><img src="/2021/11/26/List%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/1.png" alt="移动过程中保持距离为 k "></p>
<ol start="2">
<li><p>获取中间元素问题</p>
<ol>
<li><p>遍历一遍链表，得知链表长度；即可知道中间元素，再次遍历（u1s1，有点蠢）</p>
</li>
<li><p>设有两个指针 a 和 b。每次移动时，a 向前走一次，b 向前走两次，直到 b 无法再走两次；即 b.next.next=null ；</p>
<p>设链表长度为 n，那么最多移动 n/2 轮。当 n 为<strong>奇数</strong>，a 恰好指向中间节点；当 n 为<strong>偶数</strong>，a 恰好指向中间两个节点靠前的那个</p>
</li>
</ol>
</li>
</ol>
<p><img src="/2021/11/26/List%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/2.png" alt="快慢指针"></p>
<ol start="3">
<li><p>是否存在环的问题。如果尾节点的指针指向其他任意一个节点，就代表有环的存在</p>
<p><img src="/2021/11/26/List%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/3.png" alt="一个有环的链表"></p>
<p>当链表有环，快慢指针会陷入无限次移动，然后变成追击问题；快指针一次移动两步，慢指针一次移动一步；只要一直移动下去，快指针总会追上慢指针；<font color="yellow">快慢指针相遇</font>，代表有环的存在</p>
<p><img src="/2021/11/26/List%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/4.gif" alt="快慢指针在环上追及"></p>
</li>
<li><p>最后，如果存在环，如何判断环的长度？快慢指针继续移动，<font color="yellow">直到相遇第二次。</font>两次相遇间的移动次数即为环的长度</p>
</li>
</ol>]]></content>
  </entry>
  <entry>
    <title>Nginx相关介绍</title>
    <url>/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Nginx-相关介绍-Nginx是什么？能干嘛？"><a href="#Nginx-相关介绍-Nginx是什么？能干嘛？" class="headerlink" title="Nginx 相关介绍(Nginx是什么？能干嘛？)"></a>Nginx 相关介绍(Nginx是什么？能干嘛？)</h1><h2 id="Nginx的产生"><a href="#Nginx的产生" class="headerlink" title="Nginx的产生"></a>Nginx的产生</h2><p>　　没有听过Nginx？那么一定听过它的”同行”Apache吧！Nginx同Apache一样都是一种WEB服务器，基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。</p>
<p>　　然而，这些服务器在设计之初受到当时环境的局限，例如当时的用户规模，网络带宽，产品特点等局限并且各自的定位和发展都不尽相同。这也使得各个WEB服务器有着各自鲜明的特点。</p>
<p>　　Apache的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。它是不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。</p>
<p>　　这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。</p>
<p>　　俄罗斯的工程师Igor Sysoev，他在为Rambler Media工作期间，使用C语言开发了Nginx。Nginx作为WEB服务器一直为Rambler Media提供出色而又稳定的服务。</p>
<p>然后呢，Igor Sysoev将Nginx代码开源，并且赋予自由软件许可证。</p>
<p>　　由于：</p>
<ul>
<li>Nginx使用基于事件驱动架构，使得其可以支持数以百万级别的TCP连接</li>
<li>高度的模块化和自由软件许可证使得第三方模块层出不穷（这是个开源的时代啊~）</li>
<li>Nginx是一个跨平台服务器，可以运行在Linux，Windows，FreeBSD，Solaris，AIX，Mac OS等操作系统上</li>
<li>这些优秀的设计带来的是极大的稳定性</li>
</ul>
<p>　　所以，Nginx火了！</p>
<h2 id="Nginx的用武之地"><a href="#Nginx的用武之地" class="headerlink" title="Nginx的用武之地"></a>Nginx的用武之地</h2><p>　　Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p>
<h3 id="关于代理"><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h3><p>　　说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；</p>
<p>　　此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店~客人到adidas专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是adidas厂家，目标角色就是用户。</p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>　　说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触的到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理。</p>
<p>　　在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个操作FQ进行访问，FQ的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</p>
<p>　　上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。来看个示意图（我把客户端和正向代理框在一块，同属于一个环境，后面我有介绍）：</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20181211123717325-1261206014.png" alt="img"></p>
<p>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</p>
<p>　　总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>　　<strong>正向代理的用途：</strong><br>（1）访问原来无法访问的资源，如Google<br>（2）可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>　　明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：<strong>分布式部署</strong>；也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/%E3%80%82%E9%82%A3%E4%B9%88%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%85%B7%E4%BD%93%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C%E5%91%A2%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%AA%E7%A4%BA%E6%84%8F%E5%9B%BE%EF%BC%88%E6%88%91%E6%8A%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%A1%86%E5%9C%A8%E4%B8%80%E5%9D%97%EF%BC%8C%E5%90%8C%E5%B1%9E%E4%BA%8E%E4%B8%80%E4%B8%AA%E7%8E%AF%E5%A2%83%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%88%91%E6%9C%89%E4%BB%8B%E7%BB%8D%EF%BC%89%EF%BC%9A">http://tengine.taobao.org/。那么反向代理具体是通过什么样的方式实现的分布式的集群操作呢，我们先看一个示意图（我把服务器和反向代理框在一块，同属于一个环境，后面我有介绍）：</a></p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406175939873-925019958.png" alt="img"></p>
<p>　　通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p>
<p>　　客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p>
<p>　　反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p>
<p>　　<strong>反向代理的作用：</strong><br>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网<br>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>
<h3 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h3><p>　　通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在在一个应用场景中，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器。具体的拓扑图如下：</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406180130452-1246060303.png" alt="img"></p>
<h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><p>　　截了一张图来说明正向代理和反向代理二者之间的区别，如图。</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20181211122806997-940664368.png" alt="img"></p>
<p>图解：</p>
<p>在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息；</p>
<p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p>
<p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>　　我们已经明确了所谓代理服务器的概念，那么接下来，Nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p>
<p>　　这里提到的客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p>
<p>　　请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p>
<p>　　所以，将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p>
<p>　　负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406180405961-333776342.png" alt="img"></p>
<p><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p>
<ol>
<li>weight轮询（默认，常用，具有HA功效！）：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li>
<li>ip_hash（常用）：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li>
<li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li>
<li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li>
</ol>
<h2 id="几种常用的web服务器对比"><a href="#几种常用的web服务器对比" class="headerlink" title="几种常用的web服务器对比"></a>几种常用的web服务器对比</h2><table>
<thead>
<tr>
<th>对比项\服务器</th>
<th>Apache</th>
<th>Nginx</th>
<th>Lighttpd</th>
</tr>
</thead>
<tbody><tr>
<td>Proxy代理</td>
<td>非常好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Rewriter</td>
<td>好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Fcgi</td>
<td>不好</td>
<td>好</td>
<td>非常好</td>
</tr>
<tr>
<td>热部署</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>系统压力</td>
<td>很大</td>
<td>很小</td>
<td>比较小</td>
</tr>
<tr>
<td>稳定性</td>
<td>好</td>
<td>非常好</td>
<td>不好</td>
</tr>
<tr>
<td>安全性</td>
<td>好</td>
<td>一般</td>
<td>一般</td>
</tr>
<tr>
<td>静态文件处理</td>
<td>一般</td>
<td>非常好</td>
<td>好</td>
</tr>
<tr>
<td>反向代理</td>
<td>一般</td>
<td>非常好</td>
<td>一般</td>
</tr>
</tbody></table>
<ul>
<li>proxy代理的使用（解决跨域，配置多个代理）</li>
<li>Rewriter：隐藏路径或者隐藏参数的作用</li>
<li>fcgi作为中间层，需要与后端server通信进行数据处理</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Nginx部署Vue项目</title>
    <url>/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Nginx部署Vue项目"><a href="#Nginx部署Vue项目" class="headerlink" title="Nginx部署Vue项目"></a>Nginx部署Vue项目</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>下载 Xshell 连接阿里云服务器</li>
<li>下载 Xftp 便于管理文件和上传文件</li>
<li>打包好 vue 项目，出现一个dist文件夹，注意里头使用绝对路径</li>
</ol>
<h2 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h2><p>我的阿里云服务器装的 CentOS 系统，使用命令安装：</p>
<p>官方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>国内：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>

<p>启动 Docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>



<h2 id="三、通过-Docker-安装-Nginx"><a href="#三、通过-Docker-安装-Nginx" class="headerlink" title="三、通过 Docker 安装 Nginx"></a>三、通过 Docker 安装 Nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images             ------------列出本地镜像</span><br></pre></td></tr></table></figure>

<p>先查看下本地镜像，没有结果，因为还没有镜像，但也说明了我们 Docker 已经安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search nginx       ------------找到nginx相关镜像服务，后头是介绍</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908102511105.png" alt="image-20210908102511105"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx       ------------安装nginx</span><br><span class="line">docker images           ------------安装后再次查看</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908102817179.png" alt="image-20210908102817179"></p>
<p>启动该镜像，使用nginx服务，代理本机8080端口（服务器安全组需要开放8080端口）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name nginx-8080 nginx</span><br><span class="line"></span><br><span class="line">-d: 后台运行</span><br><span class="line">8080: 服务器端口</span><br><span class="line">80： nginx端口</span><br><span class="line">nginx-8080: 取容器名为此</span><br><span class="line">nginx: 镜像名</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps               ------------查看安装的容器，安装后会有一个id号</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908103920679.png" alt="image-20210908103920679"></p>
<p><strong>Docker 命令：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images                ------------列出本地镜像</span><br><span class="line">docker ps                    ------------列出容器(跑着的)</span><br><span class="line">docker ps -a                 ------------列出容器(跑+没跑)</span><br><span class="line">docker stop nginx-8080       ------------停止名为nginx-8080的服务</span><br><span class="line">docker restart nginx-8080    ------------重启</span><br></pre></td></tr></table></figure>



<p>在浏览器访问服务器 ip：8080  出现该图说明成功</p>
<img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908114359253.png" alt="image-20210908114359253" style="zoom: 80%;">



<h2 id="四、将vue项目上传到服务器上"><a href="#四、将vue项目上传到服务器上" class="headerlink" title="四、将vue项目上传到服务器上"></a>四、将vue项目上传到服务器上</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin             ------------里头的nginx用于启动</span><br><span class="line">/usr/local/nginx/conf/nginx.conf  ------------配置文件</span><br><span class="line">ps -ef | grep nginx               ------------查看安装目录</span><br></pre></td></tr></table></figure>

<p>用 Xftp 把 dist 文件夹上传到服务器，<strong>注意不要放在/root下，nginx访问不到root</strong></p>
<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908115305556.png" alt="image-20210908115305556"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">进入配置文件，按 i 进入编辑模式，按 Esc 退出编辑</span><br><span class="line">:q    退出</span><br><span class="line">：wq  保存操作退出</span><br></pre></td></tr></table></figure>

<img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908115916541.png" alt="image-20210908115916541" style="zoom:80%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启服务：(每次修改完都要保存重启)：</span><br><span class="line"></span><br><span class="line">让服务定位到配置文件：</span><br><span class="line">/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<p>打开浏览器访问公网地址，就能看到界面啦！！！</p>
<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908120431261.png" alt="image-20210908120431261"></p>
<h2 id="五、错误总结"><a href="#五、错误总结" class="headerlink" title="五、错误总结"></a>五、错误总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">404     ------------找不到文件，配置文件中 try_files未指定文件</span><br><span class="line">500     ------------路径对了，服务无法访问，因为文件放在/root里了</span><br><span class="line">访问后页面白屏  ------程序里没有是绝对路径</span><br><span class="line">有的页面部分图片加载不出   -------应该是我的服务器配置不够</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考文档：</span><br><span class="line">部署：</span><br><span class="line">https://blog.csdn.net/longqizhanshen/article/details/106963318</span><br><span class="line">https://www.jianshu.com/p/05f889faa74b</span><br><span class="line">报错：</span><br><span class="line">https://blog.csdn.net/weixin_43465090/article/details/89027047</span><br><span class="line">https://blog.csdn.net/qq_43059674/article/details/110296807</span><br><span class="line">https://blog.csdn.net/Xu_JL1997/article/details/105751623</span><br></pre></td></tr></table></figure>

<p>我们的项目是前后端分离，这样的话，就把8080端口占用掉了，需要把后端换个端口</p>]]></content>
  </entry>
  <entry>
    <title>mysql忘记密码</title>
    <url>/2022/03/30/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="服务器-Mysql忘记密码"><a href="#服务器-Mysql忘记密码" class="headerlink" title="服务器-Mysql忘记密码"></a>服务器-Mysql忘记密码</h1><p>问题描述：使用阿里云服务器，CentOS7系统，Mysql忘记密码</p>
<p>报错如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@mytestlnx02</span> <span class="operator">~</span>]# mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: </span><br><span class="line">ERROR <span class="number">1045</span> (<span class="number">28000</span>): Access denied <span class="keyword">for</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (<span class="keyword">using</span> password: YES)</span><br></pre></td></tr></table></figure>

<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><ol>
<li>关闭服务</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@mytestlnx02</span> <span class="operator">~</span>]# service mysql stop</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改配置文件 my.cnf 一般在 /etc/my.cnf,  有些版本在<code>/etc/mysql/my.cnf</code></li>
</ol>
<p>在配置文件中[mysqld]下，加行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">skip-grant-tables</span><br><span class="line">#作用是登录 mysql 时跳过密码验证</span><br></pre></td></tr></table></figure>

<p>然后启动 mysql 服务，进入 mysql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@mytestlnx02</span> <span class="operator">~</span>]# service mysql restart</span><br><span class="line">[root<span class="variable">@mytestlnx02</span> <span class="operator">~</span>]# mysql <span class="operator">-</span>u root </span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改密码</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"> </span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> update mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;新密代放这里&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges;     #刷新缓存</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> exit</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重启 mysql 服务</li>
</ol>
<p><strong>重启之前把 skip-grant-tables 删掉或注释掉</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@mytestlnx02</span> <span class="operator">~</span>]# service mysql restart</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>密码登录查看即可</li>
</ol>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>查看所有数据库 <strong>show databases;</strong></p>
<p>use 数据库名</p>
<p>show tables；</p>
<p>对表进行操作</p>
<h3 id="项目服务报错-500"><a href="#项目服务报错-500" class="headerlink" title="项目服务报错-500"></a>项目服务报错-500</h3><p><img src="/2022/03/30/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/image-20220330144823086.png" alt="image-20220330144823086"></p>
<p><strong>报错信息：</strong>java.sql.SQLException: null, message from server: “Host ‘XXX’ is not allowed to connect</p>
<p>问题原因：数据库访问权限问题，这个异常是数据库只允许localhost或127.0.0.1访问，不允许远程访问。</p>
<p>解决：</p>
<p><img src="/2022/03/30/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NDYwMDEy,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
  </entry>
  <entry>
    <title>初探返回类</title>
    <url>/2021/08/05/%E5%88%9D%E6%8E%A2%E8%BF%94%E5%9B%9E%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="初探返回类"><a href="#初探返回类" class="headerlink" title="初探返回类"></a>初探返回类</h1><h2 id="为什么要对SpringBoot返回统一的标准格式"><a href="#为什么要对SpringBoot返回统一的标准格式" class="headerlink" title="为什么要对SpringBoot返回统一的标准格式"></a>为什么要对SpringBoot返回统一的标准格式</h2><p>默认情况下，SpringBoot的返回格式常见的有三种：</p>
<ul>
<li>返回String</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello,javadaily&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,javadaily</span><br></pre></td></tr></table></figure>

<ul>
<li>返回自定义对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/aniaml&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Aniaml <span class="title">getAniaml</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Aniaml aniaml = <span class="keyword">new</span> Aniaml(<span class="number">1</span>,<span class="string">&quot;pig&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> aniaml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pig&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/error&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">9</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-07-08T08:05:15.423+00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/wrong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于上述情况，如果和前端开发人员联调接口，前端人员就会一脸懵逼；由于我们没有给他统一的格式，所以无法处理这些返回值</p>
<p>或者，不同的人对结果进行封装，小明用Result对象，小张用Response对象，这样也是会抓狂的  ╭(°A°`)╮ </p>
<p>所以项目需要一个统一返回格式标准，一般公司开发都或有统一的格式要求</p>
<h2 id="定义返回标准格式"><a href="#定义返回标准格式" class="headerlink" title="定义返回标准格式"></a>定义返回标准格式</h2><p>一个标准的返回格式包括三个部分：</p>
<ol>
<li>status 状态值：由后端统一定义各种返回结果的状态码</li>
<li>message 描述：本次接口调用的结果描述</li>
<li>data 数据：本次返回的数据</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>:<span class="string">&quot;hello,javadaily&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以按照需要添加需要的信息</p>
<p>一种方式是可以直接在controller中返回成功的信息，但比较蠢，还会重复很多相同的动作，所以我们用一种更加便捷的方式来调用它</p>
<p><strong>创建一个枚举类 BackEnum 来存放所有的返回值结构</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 枚举类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BackEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 请求数据成功，无异常情况 */</span></span><br><span class="line">    REQUEST_SUCCESS(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 服务器异常 */</span></span><br><span class="line">    UNKNOWN_ERROR(<span class="number">500</span>,<span class="string">&quot;未知错误&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 无法获得用户session信息，或用户session信息不存在 */</span></span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>,<span class="string">&quot;请先登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 前端数据参数错误 */</span></span><br><span class="line">    PARAM_ERROR(<span class="number">400</span>,<span class="string">&quot;参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据不符合要求 */</span></span><br><span class="line">    DATA_ERROR(<span class="number">400</span>,<span class="string">&quot;数据错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求方式错误，get/post等 */</span></span><br><span class="line">    REQUEST_METHOD_ERROR(<span class="number">405</span>,<span class="string">&quot;请求方式错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码错误 */</span></span><br><span class="line">    PWD_ERROR(<span class="number">2</span>,<span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户名不存在 */</span></span><br><span class="line">    NO_USER(<span class="number">3</span>,<span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 账号长度过短，一般用于注册 */</span></span><br><span class="line">    ACCOUNT_LESS(<span class="number">4</span>,<span class="string">&quot;账号小于6位&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码长度过短，一般用于注册 */</span></span><br><span class="line">    PASSWORD_LESS(<span class="number">5</span>,<span class="string">&quot;密码过短&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据库已存在该数据 */</span></span><br><span class="line">    REPETITION(<span class="number">7</span>, <span class="string">&quot;数据重复添加&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">//注意语句间“逗号”隔开，语句最后“分号”结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举的构造函数是缺省的</span></span><br><span class="line">    BackEnum(Integer code, String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> message; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用生成 set 方法，因为ORDER_CREATE_FAIL已经吧code和message赋值了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>创建返回类 BackMessage 执行刚才的枚举类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.first_demo3.back.BackEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackMessage</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标识返回状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//返回成功或失败的一个消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//返回的数据类型，Object 在开发中返回的数据类型不确定</span></span><br><span class="line">    <span class="comment">//后续可以用泛型来解决</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何为属性赋值：一个构造函数，set方法</span></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(BackEnum backEnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=backEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message=backEnum.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(BackEnum backEnum, Object t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=backEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message=backEnum.getMessage();</span><br><span class="line">        <span class="keyword">this</span>.data=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重要的是上面3个构造函数，可以重载，通过参数来确定调用哪个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123; <span class="keyword">this</span>.code = code;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> message; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123; <span class="keyword">this</span>.data = data; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里返回中的data数据我使用的是 Object 类型，后续可以使用泛型<T>来定义</T></li>
</ul>
<h2 id="测试测试！！！-ง-•̀-•́-ง"><a href="#测试测试！！！-ง-•̀-•́-ง" class="headerlink" title="测试测试！！！ (ง •̀_•́)ง"></a>测试测试！！！ (ง •̀_•́)ง</h2><p>数据库信息：表名为check</p>
<p><img src="/2021/08/05/%E5%88%9D%E6%8E%A2%E8%BF%94%E5%9B%9E%E7%B1%BB/image-20210805181202470.png" alt="image-20210805181202470"></p>
<p>实体类就不贴出来了，就这些信息</p>
<p><strong>dao层的CheckMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(String number)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCheck</span><span class="params">(Check check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CheckMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;get&quot;</span> resultType=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><br><span class="line">    SELECT n</span><br><span class="line">    FROM `check`</span><br><span class="line">    WHERE picture = #&#123;picture&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=<span class="string">&quot;updateCheck&quot;</span> parameterType=<span class="string">&quot;com.example.first_demo3.entity.Check&quot;</span>&gt;</span><br><span class="line">    update `check`</span><br><span class="line">    set n = #&#123;n,jdbcType=VARCHAR&#125;</span><br><span class="line">    where picture = #&#123;picture&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<p>重头重头！！！</p>
<p><strong>service层CheckService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckService</span> </span>&#123;</span><br><span class="line">    <span class="function">BackMessage <span class="title">get</span><span class="params">(String number)</span></span>;</span><br><span class="line">    <span class="function">BackMessage <span class="title">updateCheck</span><span class="params">(Check check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CheckServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckServiceImpl</span> <span class="keyword">implements</span> <span class="title">CheckService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CheckMapper checkMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">get</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">        String p = checkMapper.get(number);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BackMessage</span><br><span class="line">            (BackEnum.REQUEST_SUCCESS,p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">updateCheck</span><span class="params">(Check check)</span> </span>&#123;</span><br><span class="line">        checkMapper.updateCheck(check);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BackMessage</span><br><span class="line">            (BackEnum.REQUEST_SUCCESS,<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>controller层CheckController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CheckService checkService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get/&#123;picture&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> String picture)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkService.get(picture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCheck</span><span class="params">(<span class="meta">@RequestBody</span> Check check)</span></span>&#123;</span><br><span class="line">        checkService.updateCheck(check);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>postman测试</strong></p>
<p>获取值接口：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">localhost:8081/check/get/1</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;111&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改接口：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">localhost:8081/update</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;picture&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;n&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此返回类成功写成，其余返回值大同小异</p>
<p>返回类的具体内容还可参照：</p>
<p><a href="https://zhuanlan.zhihu.com/p/391288136">SpringBoot 如何统一后端返回格式？老鸟们都是这样玩的！ - 知乎 (zhihu.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    The author disclaims copyright to this source code.</span></span><br><span class="line"><span class="comment">**    In place of a legal notice, here is a blessing:</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**    May you do good and not evil.</span></span><br><span class="line"><span class="comment">**    May you find forgiveness for yourself and forgive others.</span></span><br><span class="line"><span class="comment">**    May you share freely, never taking more than you give.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>springboot查询</title>
    <url>/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/</url>
    <content><![CDATA[<h1 id="SpringBoot-MyBatis-查询语句-（根据条件查询）"><a href="#SpringBoot-MyBatis-查询语句-（根据条件查询）" class="headerlink" title="SpringBoot + MyBatis 查询语句  （根据条件查询）"></a>SpringBoot + MyBatis 查询语句  （根据条件查询）</h1><h3 id="1-新建数据库和表内容"><a href="#1-新建数据库和表内容" class="headerlink" title="1.新建数据库和表内容"></a>1.新建数据库和表内容</h3><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722152711177.png"></p>
<p>全部根据 tt 中的数据进行查询</p>
<h3 id="2-创建工程目录结构（springboot创建好后）"><a href="#2-创建工程目录结构（springboot创建好后）" class="headerlink" title="2.创建工程目录结构（springboot创建好后）"></a>2.创建工程目录结构（springboot创建好后）</h3><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722152928143.png"></p>
<ul>
<li>pom.xml依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kejian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis.jar--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mySql的驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml（修改全局变量）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接数据库（我的是数据库名是kejain）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/kejian?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="comment">#?后增加编码格式</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> <span class="comment">#数据库用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment">#数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#扫描相关文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在resources目录下新建mybatis-config.xml（按需求添加，可以不要）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     使用jdbc的getGeneratedKeys获得数据库自增主键值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--           使用列标签替换列别名，默认true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        开启驼峰命名create_time-&gt;createTime--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>至此基础配置OK，在目录下添加类</strong></p>
<h2 id="3-entity层下添加实体类"><a href="#3-entity层下添加实体类" class="headerlink" title="3.entity层下添加实体类"></a>3.entity层下添加实体类</h2><p>entity包也有叫 pojo, damain， 都是一个意思</p>
<ul>
<li>新建 Poem.java（添加实体类，和数据库对应）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String tt;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String A;</span><br><span class="line">    <span class="keyword">private</span> String B;</span><br><span class="line">    <span class="keyword">private</span> String C;</span><br><span class="line">    <span class="keyword">private</span> String D;</span><br><span class="line">    <span class="keyword">private</span> String letter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTt</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tt = tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        A = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(String b)</span> </span>&#123;</span><br><span class="line">        B = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        C = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> D;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setD</span><span class="params">(String d)</span> </span>&#123;</span><br><span class="line">        D = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> letter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLetter</span><span class="params">(String letter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.letter = letter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Poem&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, time=&#x27;&quot;</span> + tt + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, A=&#x27;&quot;</span> + A + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, B=&#x27;&quot;</span> + B + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, C=&#x27;&quot;</span> + C + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, D=&#x27;&quot;</span> + D + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, letter=&#x27;&quot;</span> + letter + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-添加-mapper-操纵数据库"><a href="#4-添加-mapper-操纵数据库" class="headerlink" title="4.添加 mapper 操纵数据库"></a>4.添加 mapper 操纵数据库</h2><p>dao 层名为持久层，也可叫 mapper 层</p>
<ul>
<li>dao 层下新建PoemMapper.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PoemMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//因为需要返回多个，设为List</span></span><br><span class="line">    <span class="function">List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(<span class="meta">@Param(&quot;tt&quot;)</span>String time)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>resources 下新建 mapper 文件夹，存放dao 层 mapper 的映射文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是命名空间，对应dao层mapper文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.first_demo3.dao.PoemMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id名对应dao层mapper的函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findSome&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.first_demo3.entity.Poem&quot;</span>&gt;</span></span><br><span class="line">        select id,title,A,B,C,D,letter from poem where tt = #&#123;tt&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-添加业务逻辑"><a href="#5-添加业务逻辑" class="headerlink" title="5.添加业务逻辑"></a>5.添加业务逻辑</h2><p>service层为业务逻辑层，处理算法并返回数据给界面层</p>
<ul>
<li>service下新建 PoemService.java 选择接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PoemService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(String time)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>service下新建impl文件夹，管理映射</li>
<li>impl下新建PoemServiceImpl.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoemServiceImpl</span> <span class="keyword">implements</span> <span class="title">PoemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PoemMapper poemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> poemMapper.findSome(tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-终于可以写接口了"><a href="#6-终于可以写接口了" class="headerlink" title="6.终于可以写接口了"></a>6.终于可以写接口了</h2><p>controller 层又名界面层，调用 service</p>
<ul>
<li>controller 下新建PoemController.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">PoemController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> PoemService poemService;        </span><br><span class="line">    <span class="comment">//查找后返回部分数据    </span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get/&#123;tt&#125;&quot;)</span>    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Poem&gt;getSome(<span class="meta">@PathVariable</span> String tt)&#123;        <span class="keyword">return</span> poemService.findSome(tt);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-PostMan测试接口"><a href="#7-PostMan测试接口" class="headerlink" title="7.PostMan测试接口"></a>7.PostMan测试接口</h2><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722160646581.png"></p>
<p>其他的雷同，在 /get/  输入对应的 tt 值就可调用</p>
<p><strong>最终的目录</strong></p>
<p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722160822033.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    The author disclaims copyright to this source code.</span></span><br><span class="line"><span class="comment">**    In place of a legal notice, here is a blessing:</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**    May you do good and not evil.</span></span><br><span class="line"><span class="comment">**    May you find forgiveness for yourself and forgive others.</span></span><br><span class="line"><span class="comment">**    May you share freely, never taking more than you give.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mybatis-plus 笔记</title>
    <url>/2022/08/26/mybatis-plus/</url>
    <content><![CDATA[<h1 id="mybatis-plus-开发"><a href="#mybatis-plus-开发" class="headerlink" title="mybatis-plus 开发"></a>mybatis-plus 开发</h1><h2 id="一、-配置工作"><a href="#一、-配置工作" class="headerlink" title="一、 配置工作"></a>一、 配置工作</h2><p>开发环境：IDEA 2019    jdk8    maven 3.6     mybatis-plus 3.5.2</p>
<p>1.创个数据库，和表    数据库名—–demo；表名—-User</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/26/mybatis-plus/image-20220608134704532.png" alt="image-20220608134704532"></p>
<p>2.全局配置文件-导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--mybatis-plus启动器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--lombok用于简化实体类开发--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--mySql的驱动--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.下载 lombok 插件</p>
<p>4.springboot 配置文件</p>
<p>application.yml</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源的类型</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.util.DriverDataSource</span></span><br><span class="line"><span class="comment"># 驱动类型 如是mysql是5版本，就用 com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="comment"># 数据源信息  </span></span><br><span class="line">  <span class="attr">datasource:</span>  </span><br><span class="line">    <span class="comment"># 数据源类型  </span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span>  </span><br><span class="line">    <span class="comment"># 连接数据的库的信息  </span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置日志，打印执行的sql语句  </span></span><br><span class="line"><span class="attr">mybatis-plus:</span>  </span><br><span class="line">  <span class="attr">configuration:</span>  </span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  </span><br><span class="line">  <span class="comment"># 设置mybatis-plus的全局设置  </span></span><br><span class="line">  <span class="attr">global-config:</span>  </span><br><span class="line">    <span class="attr">db-config:</span>  </span><br><span class="line">      <span class="comment"># 设置统一的主键生成策略  </span></span><br><span class="line">      <span class="comment"># 让主键自增的两种方法：1.直接在pojo中加@TableId(type = IdType.AUTO)</span></span><br><span class="line">	  <span class="comment">#                    2.在在·全局配置中添加如下字段，并打开数据库主键自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span>  </span><br><span class="line">      <span class="comment"># 设置实体类唆对应的统一前缀；如：数据库是t_user，实体类是User;需要该配置自动加上所有前缀，或在实体类通过注释指定表  </span></span><br><span class="line"><span class="comment">#      table-prefix: t_  </span></span><br><span class="line">  <span class="comment"># 配置类型别名所对应的包（mapper中就不用写全路径了）  </span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demomybatisplus.pojo</span>  </span><br><span class="line">  <span class="comment"># 扫描通用枚举  </span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.example.demomybatisplus.enums</span></span><br></pre></td></tr></table></figure>
<p>type-aliases-package: xml文件中 不需要写pojo的全路径名称了，如：<br>com.example.demomybatisplus.pojo.User  -&gt; User</p>
<h2 id="二、-实体类"><a href="#二、-实体类" class="headerlink" title="二、 实体类"></a>二、 实体类</h2><p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 无参构造  </span></span><br><span class="line"><span class="comment"> * 有参构造  </span></span><br><span class="line"><span class="comment"> * get方法  </span></span><br><span class="line"><span class="comment"> * set方法  </span></span><br><span class="line"><span class="comment"> * 重写equals和hashcode方法  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@Getter</span>  </span><br><span class="line"><span class="meta">@Setter</span>  </span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化一下<br>@Data注释在编译后会自动添加所有方法（除了有参方法要自己加）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 和上面结果是一样的</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/26/mybatis-plus/image-20220608141413411-16614839740642.png" alt="image-20220608141413411"></p>
<p>alt+7 打开类结构           没有有参构造</p>
<p><img src="/2022/08/26/mybatis-plus/image-20220608141851450.png" alt="image-20220608141851450"></p>
<p>@Accessors:存取器，@Accessors用于配置getter和setter方法的生成结果,下面介绍三个属性<br>链式更有一种取巧，方便我更好的调用方法；与传统get、set方法区别在于返回类型是当前对象，而非基础类型，并且set方法有return，传统的set是没有return的<br>流式一般要看情况而定，在序列化和反序列化中，支持的是传统的get、set方法，就不适用于流式；如果需要以流式的方式来处理，那么就使用流式</p>
<p>fluent：流式<br>设置为true，则getter和setter方法的方法名都是基础属性名，且setter方法返回当前对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@Accessors(fluent = true)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">	<span class="keyword">private</span> Long id; </span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 生成的getter和setter方法如下，方法体略 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">id</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">id</span><span class="params">(Long id)</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">name</span><span class="params">(String name)</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>chain：链式<br>意为链式的，设置为true，则setter方法返回当前对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@Accessors(chain = true)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">	<span class="keyword">private</span> Long id; </span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成的setter方法如下，方法体略 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>prefix<br>意为前缀，用于生成getter和setter方法的字段名会忽略指定的前缀名（遵守驼峰命名）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@Accessors(prefix = &quot;p&quot;)</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> Long pId; </span><br><span class="line"><span class="keyword">private</span> String pName; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成的getter和setter方法如下，方法体略 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、-接口类"><a href="#三、-接口类" class="headerlink" title="三、 接口类"></a>三、 接口类</h2><p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承 BaseMapper 中的各种方法   BaseMapper 是mybatis-plus内置的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改写启动类，添加扫描mapper文件  @MapperScan</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在mapper中添加@Mapper或@Repository注释，将接口注释为持久层。<br>使用@Mapper需要在启动类中@MapperScan(“com.example.demo.mapper”)<br>使用@Repository可以不用加mapper扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2个均为将接口注释为持久层的意思  </span></span><br><span class="line"><span class="comment">// @Mapper 不需要配置扫描地址，通过xml中的namespace里的接口地址，生成Bean后注入到service中  </span></span><br><span class="line"><span class="comment">//@Mapper 需要在spring中配置扫描地址，生成Bean后注入到service中  </span></span><br><span class="line"><span class="comment">// @Repository</span></span><br></pre></td></tr></table></figure>


<h2 id="四、-测试"><a href="#四、-测试" class="headerlink" title="四、 测试"></a>四、 测试</h2><p><img src="/2022/08/26/mybatis-plus/image-20220608144206483.png" alt="image-20220608144206483"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">// usermapper可能会有下划线报错，不影响，因为IOC容器只接受类，不接受接口；但在编译过程中不影响</span></span><br><span class="line">    <span class="comment">// 想把下划线消除，回mapper文件加注释 @Repository</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过条件构造器查询一个list集合，若没有条件，就写null</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        list.forEach(System.out::println); <span class="comment">// forEach方法打印全部</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>小技巧：自动补全变量名</p>
<p>打完后  Alt + Enter  选择 introduce local variable</p>
<p>在配置文件中加日志配置</p>
<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<p>测试类打印后，看到自动调用的sql语句</p>
<p><img src="/2022/08/26/mybatis-plus/image-20220608145030092.png" alt="image-20220608145030092"></p>
<h2 id="五、-BaseMapper和IService"><a href="#五、-BaseMapper和IService" class="headerlink" title="五、 BaseMapper和IService"></a>五、 BaseMapper和IService</h2><p>BaseMapper是Mapper层或者叫Dao层的接口。</p>
<p>IService是业务逻辑层接口。</p>
<p>差别：两者功能差不多，都封装了很多方法，只是作用的层不同；IService是对BaseMapper的扩展<br>IService依赖于spring容器，而BaseMapper不依赖。BaseMapper 可以继承并添加新的数据库操作，IService 要扩展的话还是得调用 Mapper，显得有些多此一举。</p>
<p>IService支持实现批量操作，BaseMapper不行<br>批量操作的实现实际是循环多次执行BaseMapper语句（就很呆）</p>
<h3 id="1-继承BaseMapper的测试"><a href="#1-继承BaseMapper的测试" class="headerlink" title="1. 继承BaseMapper的测试"></a>1. 继承BaseMapper的测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 通过构造器查询一个list集合，若无需判断条件就写null  </span></span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(<span class="keyword">null</span>);  </span><br><span class="line">        list.forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 新增  </span></span><br><span class="line">        <span class="comment">// INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )  </span></span><br><span class="line">        User user = <span class="keyword">new</span> User();  </span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);  </span><br><span class="line">        user.setAge(<span class="number">18</span>);  </span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsan@123.com&quot;</span>);  </span><br><span class="line">        <span class="keyword">int</span> res = userMapper.insert(user);  </span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+res);  </span><br><span class="line">        <span class="comment">// id号很长，是通过雪花算法自动添加的唯一值  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+user.getId());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 通过id删除用户信息  </span></span><br><span class="line">        <span class="comment">// DELETE FROM user WHERE id=?  </span></span><br><span class="line"><span class="comment">//        userMapper.deleteById(1557240268732936193L); // id号超出int范围了，加L变为长整型  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 根据map集合中的条件删除用户信息  </span></span><br><span class="line">        <span class="comment">// DELETE FROM user WHERE name = ? AND age = ?  </span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();  </span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,&quot;张三&quot;);  </span></span><br><span class="line"><span class="comment">//        map.put(&quot;age&quot;,18);  </span></span><br><span class="line"><span class="comment">//        userMapper.deleteByMap(map);  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 通过多个id实现批量删除  </span></span><br><span class="line">        <span class="comment">// DELETE FROM user WHERE id IN ( ? , ? , ? )  </span></span><br><span class="line">        List&lt;Long&gt; list = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>); <span class="comment">// 数据库里id设的是Long型  </span></span><br><span class="line">        userMapper.deleteBatchIds(list);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 修改用户信息  </span></span><br><span class="line">        <span class="comment">// UPDATE user SET name=?, age=? WHERE id=?  </span></span><br><span class="line">        User user = <span class="keyword">new</span> User();  </span><br><span class="line">        user.setId(<span class="number">2L</span>);  </span><br><span class="line">        user.setName(<span class="string">&quot;李斯&quot;</span>);  </span><br><span class="line">        user.setAge(<span class="number">20</span>);  </span><br><span class="line">        userMapper.updateById(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 通过id查询  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user WHERE id=?  </span></span><br><span class="line"><span class="comment">//        userMapper.selectById(1L);  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 通过多个id查询多个用户信息  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )  </span></span><br><span class="line"><span class="comment">//        List&lt;Long&gt; list = Arrays.asList(1L, 2L, 3L);  </span></span><br><span class="line"><span class="comment">//        userMapper.selectBatchIds(list);  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 根据map集合中的条件查询信息  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user WHERE name = ? AND age = ?  </span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();  </span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,&quot;Jack&quot;);  </span></span><br><span class="line"><span class="comment">//        map.put(&quot;age&quot;,20);  </span></span><br><span class="line"><span class="comment">//        userMapper.selectByMap(map);  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 自定义的方法  </span></span><br><span class="line">        userMapper.selectMapById(<span class="number">1L</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper里的自定义方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义方法，根据id查询为map集合  </span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">selectMapById</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMapById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">    select id,name,age,email from user where id = #&#123;id&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-带条件构造器-Wrapper-的方法"><a href="#2-带条件构造器-Wrapper-的方法" class="headerlink" title="2. 带条件构造器(Wrapper)的方法"></a>2. 带条件构造器(Wrapper)的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusWrapperTest</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 查询用户名包含a,年龄在20~30之间，邮箱不为空的  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user WHERE (name LIKE ? AND age BETWEEN ? AND ? AND email IS NULL)  </span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="comment">// column的内容是数据库的字段名  </span></span><br><span class="line">                        .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)   <span class="comment">// 链式编程的写法</span></span><br><span class="line">                        . isNotNull(<span class="string">&quot;email&quot;</span>);  </span><br><span class="line">        userMapper.selectList(queryWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 查询用户信息，按照年龄的降序排序，若年龄相同，按id升序排序  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user ORDER BY age DESC,id ASC  </span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>)  </span><br><span class="line">                        .orderByAsc(<span class="string">&quot;id&quot;</span>);  </span><br><span class="line">        userMapper.selectList(queryWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 删除邮箱地址为空的用户信息  </span></span><br><span class="line">        <span class="comment">// DELETE FROM user WHERE (email IS NULL)  </span></span><br><span class="line">        <span class="comment">// 如果有isDeleted字段，则该语句是自动执行修改语句  </span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);  </span><br><span class="line">        userMapper.delete(queryWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 修改（年龄大于20并且名字中包含a的）或邮箱为空的  </span></span><br><span class="line">        <span class="comment">// UPDATE user SET name=?, email=? WHERE (age &gt; ? AND name LIKE ? OR email IS NULL)  </span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        <span class="comment">// gt: &gt;    lt: &lt;    ge: &gt;=    le: &lt;=  </span></span><br><span class="line">        queryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)  </span><br><span class="line">                        .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)  </span><br><span class="line">                        .or()  </span><br><span class="line">                        .isNull(<span class="string">&quot;email&quot;</span>);  </span><br><span class="line">        User user = <span class="keyword">new</span> User();  </span><br><span class="line">        user.setName(<span class="string">&quot;小明&quot;</span>);  </span><br><span class="line">        user.setEmail(<span class="string">&quot;test@qq.com&quot;</span>);  </span><br><span class="line">        userMapper.update(user,queryWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 修改用户命中包含a并且（年龄大于20或邮箱为null）的用户信息  </span></span><br><span class="line">        <span class="comment">// UPDATE user SET name=?, email=? WHERE (name LIKE ? AND (age &gt; ? OR email IS NULL))  </span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)  </span><br><span class="line">                <span class="comment">// lambda表达式的内容会优先执行  </span></span><br><span class="line">                .and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));  </span><br><span class="line">        User user = <span class="keyword">new</span> User();  </span><br><span class="line">        user.setName(<span class="string">&quot;小hong&quot;</span>);  </span><br><span class="line">        user.setEmail(<span class="string">&quot;test@qq.com&quot;</span>);  </span><br><span class="line">        userMapper.update(user,queryWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 修改用户命中包含a并且（年龄大于20或邮箱为null）的用户信息  </span></span><br><span class="line">        <span class="comment">// UPDATE user SET name=?,email=? WHERE (name LIKE ? AND (age &gt; ? OR email IS NULL))  </span></span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();  </span><br><span class="line">        updateWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)  </span><br><span class="line">                .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));  </span><br><span class="line">        updateWrapper.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小黑&quot;</span>).set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@123.com&quot;</span>);  </span><br><span class="line">        userMapper.update(<span class="keyword">null</span>,updateWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 与上面实现相同，lambda的作用只是避免写错字段名  </span></span><br><span class="line">        <span class="comment">// UPDATE user SET name=?,email=? WHERE (name LIKE ? AND (age &gt; ? OR email IS NULL))  </span></span><br><span class="line">        LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> LambdaUpdateWrapper&lt;&gt;();  </span><br><span class="line">        updateWrapper.like(User::getName,<span class="string">&quot;a&quot;</span>)  </span><br><span class="line">                .and(i -&gt; i.gt(User::getAge,<span class="number">20</span>).or().isNull(User::getEmail));  </span><br><span class="line">        updateWrapper.set(User::getName,<span class="string">&quot;小黑&quot;</span>).set(User::getEmail,<span class="string">&quot;abc@123.com&quot;</span>);  </span><br><span class="line">        userMapper.update(<span class="keyword">null</span>,updateWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 查询用户名  </span></span><br><span class="line">        <span class="comment">// SELECT name FROM user  </span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.select(<span class="string">&quot;name&quot;</span>);  </span><br><span class="line">        userMapper.selectMaps(queryWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">//  公司业务中常用  </span></span><br><span class="line">        <span class="comment">// 先判断条件是否符合，再组装相对应的条件到sql语句中  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user WHERE (name LIKE ? AND age &lt;= ?)  </span></span><br><span class="line">        String name = <span class="string">&quot;a&quot;</span>;  </span><br><span class="line">        Integer ageBegin = <span class="keyword">null</span>;  </span><br><span class="line">        Integer ageEnd = <span class="number">30</span>;  </span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.like(StringUtils.isNotBlank(name),<span class="string">&quot;name&quot;</span>,<span class="string">&quot;name&quot;</span>)  </span><br><span class="line">                <span class="comment">// isNotBlank 不为空字符串，不为null  </span></span><br><span class="line">                .ge(ageBegin != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)  </span><br><span class="line">                .le(ageEnd != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);  </span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(queryWrapper);  </span><br><span class="line">        list.forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 和上面执行是一样的，只是写法不同；可防止把字段名写错  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user WHERE (name LIKE ? AND age &lt;= ?)  </span></span><br><span class="line">        String name = <span class="string">&quot;a&quot;</span>;  </span><br><span class="line">        Integer ageBegin = <span class="keyword">null</span>;  </span><br><span class="line">        Integer ageEnd = <span class="number">30</span>;  </span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();  </span><br><span class="line">        queryWrapper.like(StringUtils.isNotBlank(name),User::getName, name)  </span><br><span class="line">                .ge(ageBegin != <span class="keyword">null</span>, User::getAge, ageBegin)  </span><br><span class="line">                .le(ageEnd != <span class="keyword">null</span>, User::getAge, ageEnd);  </span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(queryWrapper);  </span><br><span class="line">        list.forEach(System.out::println);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-实现IService接口的得到的方法"><a href="#3-实现IService接口的得到的方法" class="headerlink" title="3. 实现IService接口的得到的方法"></a>3. 实现IService接口的得到的方法</h3><p>UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IService mybatis-plus提供的service接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="comment">// ServiceImpl&lt;M,T&gt; IService的实现方法  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IService中的很多方法作用和BaseMapper的一样，但是方法名不一样</p>
<p>IService支持实现批量操作，BaseMapper不行<br>批量操作的实现实际是循环多次执行BaseMapper语句（就很呆）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusServiceTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> UserService userService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCount</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 查询总记录数  </span></span><br><span class="line">        <span class="comment">// SELECT COUNT( * ) FROM user  </span></span><br><span class="line">        userService.count();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertMore</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 批量添加：实际是IService通过循环调用baseMapper的单条添加语句  </span></span><br><span class="line">        <span class="comment">// INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? )  </span></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;  </span><br><span class="line">             User user = <span class="keyword">new</span> User();  </span><br><span class="line">             user.setName(<span class="string">&quot;lc&quot;</span>+i);  </span><br><span class="line">             user.setAge(<span class="number">20</span>+i);  </span><br><span class="line">             list.add(user);  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="comment">// 返回值是 boolean        boolean b = userService.saveBatch(list);  </span></span><br><span class="line">        System.out.println(b);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IService的方法</span></span><br><span class="line"> <span class="comment">//查询所有</span></span><br><span class="line">userService .list();</span><br><span class="line"><span class="comment">//查询数量</span></span><br><span class="line">userService .count();</span><br><span class="line"><span class="comment">//根据ID查list集合</span></span><br><span class="line">userService .listByIds());</span><br><span class="line"><span class="comment">//根据ID删除</span></span><br><span class="line">userService .removeById();</span><br><span class="line">userService .removeByIds();</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">userService .update();</span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line">userService .save();</span><br></pre></td></tr></table></figure>

<h3 id="4-实体类中常用的注释和如何实现字段枚举（逻辑删除字段）"><a href="#4-实体类中常用的注释和如何实现字段枚举（逻辑删除字段）" class="headerlink" title="4. 实体类中常用的注释和如何实现字段枚举（逻辑删除字段）"></a>4. 实体类中常用的注释和如何实现字段枚举（逻辑删除字段）</h3><p>User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="comment">// 可以设置实体类对应的表名  </span></span><br><span class="line"><span class="comment">//@TableName(&quot;t_user&quot;)  </span></span><br><span class="line"><span class="comment">// 前缀名可在配置文件中统一去掉</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 将属性对应的字段指定为主键；比方主键名为“uid”（主键不叫id），需要该标签帮助指定主键  </span></span><br><span class="line"><span class="comment">//    @TableId  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 设置主键生成策略，不使用雪花算法自增。数据库打开自增  </span></span><br><span class="line">    <span class="comment">// 默认是IdType.ASSIGN_ID，即雪花递增，与数据库是否开启递增无关  </span></span><br><span class="line">    <span class="comment">// 可以在配置文件中进行全局配置  </span></span><br><span class="line"><span class="comment">//    @TableId(type = IdType.AUTO)  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="comment">// 可指定属性所对应的字段名；（如果属性和数据库的对应不是同名的话）  </span></span><br><span class="line"><span class="comment">//    @TableField(&quot;user_name&quot;)  将数据库中的user_name对应为name</span></span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> String email;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 要在枚举类和配置文件配置  </span></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 逻辑删除字段注释  </span></span><br><span class="line">    <span class="comment">// 删除时实际语句是修改功能，把isDeleted默认值0改为1  </span></span><br><span class="line">    <span class="comment">// 用法：可用于用户数据恢复；原理：数据库的数据还在，但无法被识别（查询）  </span></span><br><span class="line"><span class="comment">//    @TableLogic  </span></span><br><span class="line"><span class="comment">//    private Integer isDeleted;  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>逻辑删除的解释：</strong><br>    在数据库中添加isDeleted字段，默认值设为0.可在删除后将该字段数值改为1；便于以后恢复数据。<br>    当执行查询语句时，只会会查看逻辑删除字段为0的。sql语句中会自动添加if语句的<br>    当执行删除语句时，实际上执行的是修改操作，是把逻辑删除字段的0改为1</p>
<p>配置文件：在mybatis-plus:下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描通用枚举  </span></span><br><span class="line"><span class="attr">type-enums-package:</span> <span class="string">com.example.demomybatisplus.enums</span></span><br></pre></td></tr></table></figure>
<p>Project 枚举类<br>![Pasted image 20220815094733](Pasted image 20220815094733.png)</p>
<p><img src="/2022/08/26/mybatis-plus/1.png" alt="1"></p>
<p>SexEnum<br>对性别进行枚举；数据库中放1，2；分别代表 男、女</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> </span>&#123;  </span><br><span class="line">    MALE(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),  </span><br><span class="line">    FEMALE(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@EnumValue</span>  <span class="comment">// 将注解所标识的属性的值存储到数据库中  </span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;  </span><br><span class="line">    <span class="keyword">private</span> String sexName;  </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造方法</span></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.sex = sex;  </span><br><span class="line">        <span class="keyword">this</span>.sexName = sexName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusEnumTest</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    UserMapper userMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        User user = <span class="keyword">new</span> User();  </span><br><span class="line">        user.setName(<span class="string">&quot;admin&quot;</span>);  </span><br><span class="line">        user.setAge(<span class="number">21</span>);  </span><br><span class="line">        user.setSex(SexEnum.MALE);  </span><br><span class="line">        userMapper.insert(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="5-分页功能"><a href="#5-分页功能" class="headerlink" title="5. 分页功能"></a>5. 分页功能</h3><p><strong>分页功能：</strong><br>配置类：（插件）<br>![Pasted image 20220815102657](Pasted image 20220815102657.png)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="comment">// 扫描mapper接口所在包,一样的，有配置类后可以把扫描放在这里</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demomybatisplus.mapper&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusApplication</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="comment">//  MybatisPlusInterceptor-分页插件的使用  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();  </span><br><span class="line">        <span class="comment">// 添加分页插件  </span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));  </span><br><span class="line">       </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 通过年龄查询用户信息并分页(第一个参数必须是page)  </span></span><br><span class="line">    <span class="function">Page&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span></span>;  </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Page&lt;User&gt; selectPageVo(@Param(&quot;page&quot;) Page&lt;User&gt; page, @Param(&quot;age&quot;) Integer age);--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">        select * from user where age &gt; #&#123;age&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusPluginsTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    UserMapper userMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">	<span class="comment">// 用内置方法实现分页</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// current-当前页页码  size-每页显示的几条数据  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user LIMIT ?  </span></span><br><span class="line"><span class="comment">//        Page&lt;User&gt; page = new Page&lt;&gt;(1,3);  </span></span><br><span class="line">        <span class="comment">// SELECT id,name,age,email FROM user LIMIT ?,?        </span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">3</span>);  </span><br><span class="line">        userMapper.selectPage(page,<span class="keyword">null</span>);  </span><br><span class="line">        System.out.println(page);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(page.getRecords()); <span class="comment">// 获得当前页数据  </span></span><br><span class="line">        System.out.println(page.getPages()); <span class="comment">// 获得总页数  </span></span><br><span class="line">        System.out.println(page.getTotal()); <span class="comment">// 获得总记录数  </span></span><br><span class="line">        System.out.println(page.hasNext()); <span class="comment">// 判断是否有下一页  </span></span><br><span class="line">        System.out.println(page.hasPrevious()); <span class="comment">// 判断是否有上一页  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="comment">// 对自定义的sql语句使用分页插件实现分页功能  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageVo</span><span class="params">()</span></span>&#123;  </span><br><span class="line">	    <span class="comment">// select * from user where age &gt; ? LIMIT ?</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);  </span><br><span class="line">        userMapper.selectPageVo(page,<span class="number">20</span>);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(page.getRecords()); <span class="comment">// 获得当前页数据  </span></span><br><span class="line">        System.out.println(page.getPages()); <span class="comment">// 获得总页数  </span></span><br><span class="line">        System.out.println(page.getTotal()); <span class="comment">// 获得总记录数  </span></span><br><span class="line">        System.out.println(page.hasNext()); <span class="comment">// 判断是否有下一页  </span></span><br><span class="line">        System.out.println(page.hasPrevious()); <span class="comment">// 判断是否有上一页  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="6-乐观锁"><a href="#6-乐观锁" class="headerlink" title="6. 乐观锁"></a>6. 乐观锁</h3><p>配置类：（在刚才的配置类中添加新的插件）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="comment">// 扫描mapper接口所在包  </span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demomybatisplus.mapper&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusApplication</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="comment">//  MybatisPlusInterceptor-分页插件的使用  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();  </span><br><span class="line">        <span class="comment">// 添加分页插件  </span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));  </span><br><span class="line">        <span class="comment">// 添加乐观锁插件  </span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());  </span><br><span class="line">        <span class="keyword">return</span> interceptor;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟场景：原商品定价100，老板让小李先+50，再让小王-30，预期的价格是120<br>解释：两人都查询原价后，进行操作，如果没有锁机制，小王得到的不是小李操作后的价格，结果会直接覆盖，最后结果为100-30<br>![Pasted image 20220815103007](Pasted image 20220815103007-16614841405733.png)</p>
<p>实体类：Product</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 商品名</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;  </span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">// 标记乐观锁版本号字段  </span></span><br><span class="line">    <span class="keyword">private</span> Integer version;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProductMapper继承BaseMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Product</span>&gt; </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取出记录时，获取当前version</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,`name`,price,`version` <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>更新时，version + 1，如果where语句中的version版本不对，则更新失败</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE product <span class="keyword">SET</span> price<span class="operator">=</span>price<span class="operator">+</span><span class="number">50</span>, `version`<span class="operator">=</span>`version` <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span></span><br><span class="line"></span><br><span class="line">`version`<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusPluginsTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    ProductMapper productMapper;  </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 乐观锁和悲观锁测试  </span></span><br><span class="line">    <span class="comment">// 模拟场景，原商品定价100，老板让小李先+50，再让小王-30，预期的价格是120，但没有锁机制，小王会覆盖小李的结果，最后结果为100-30  </span></span><br><span class="line">    <span class="comment">// 添加乐观锁之后，最后结果为150，因为小李操作成功后，版本号改变，小王就没法操作  </span></span><br><span class="line">    <span class="comment">// 优化后可实现期待结果  </span></span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProduct01</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">// 小李查询商品价格  </span></span><br><span class="line">        Product productLi = productMapper.selectById(<span class="number">1</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;小李查询的商品价格：&quot;</span>+productLi.getPrice());  </span><br><span class="line">        <span class="comment">// 小王查询商品价格  </span></span><br><span class="line">        Product productWang = productMapper.selectById(<span class="number">1</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;小王查询的商品价格：&quot;</span>+productWang.getPrice());  </span><br><span class="line">        <span class="comment">// 小李将价格+50  </span></span><br><span class="line">        productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);  </span><br><span class="line">        productMapper.updateById(productLi);  </span><br><span class="line">        <span class="comment">// 小王将价格-30  </span></span><br><span class="line">        productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);  </span><br><span class="line"><span class="comment">//        productMapper.updateById(productWang);  </span></span><br><span class="line">        <span class="comment">// 优化  </span></span><br><span class="line">        <span class="keyword">int</span> result = productMapper.updateById(productWang);  </span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>) &#123; <span class="comment">// 影响行数为0,说明版本号已改变，需要重新查询后再操作</span></span><br><span class="line">            Product productNew = productMapper.selectById(<span class="number">1</span>);  </span><br><span class="line">            productNew.setPrice(productNew.getPrice()-<span class="number">30</span>);  </span><br><span class="line">            productMapper.updateById(productNew);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 老板查询商品价格  </span></span><br><span class="line">        Product productBoss = productMapper.selectById(<span class="number">1</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;老板查询的商品价格：&quot;</span>+productBoss.getPrice());  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="六、-代码生成器"><a href="#六、-代码生成器" class="headerlink" title="六、 代码生成器"></a>六、 代码生成器</h2><p>一个自动生成项目的，MVC三层可自动生成。<strong>个人觉得比较鸡肋，没啥卵用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 代码生成器，直接生成全新的mybatis-plus项目，把MVC三层全部生成。生成的位置是自己配置的 如：D://mybatis_plus  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastAutoGeneratorTest</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis_plus? characterEncoding=utf-8&amp;userSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>)  </span><br><span class="line">                .globalConfig(builder -&gt; &#123;  </span><br><span class="line">                    builder.author(<span class="string">&quot;lc&quot;</span>) <span class="comment">// 设置作者  </span></span><br><span class="line">                            <span class="comment">//.enableSwagger() // 开启swagger模式  </span></span><br><span class="line">                            .fileOverride() <span class="comment">// 覆盖已生成文件（重新生成代码，覆盖之前的）  </span></span><br><span class="line">                            .outputDir(<span class="string">&quot;D://mybatis_plus&quot;</span>); <span class="comment">// 指定输出目录  </span></span><br><span class="line">                &#125;)  </span><br><span class="line">                .packageConfig(builder -&gt; &#123;  </span><br><span class="line">                    builder.parent(<span class="string">&quot;com.example&quot;</span>) <span class="comment">// 设置父包名  </span></span><br><span class="line">                            .moduleName(<span class="string">&quot;demomybatisplus&quot;</span>) <span class="comment">// 设置父包模块名  </span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml,<span class="string">&quot;D://mybatis_plus&quot;</span>)); <span class="comment">// 设置mapperxml生成路径  </span></span><br><span class="line">                &#125;)  </span><br><span class="line">                .strategyConfig(builder -&gt; &#123;  </span><br><span class="line">                    builder.addInclude(<span class="string">&quot;t_user&quot;</span>) <span class="comment">// 设置需要生成的表名  </span></span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;t_&quot;</span>,<span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀  </span></span><br><span class="line">                &#125;)  </span><br><span class="line">                .templateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine()) <span class="comment">// 使用Freemarker引擎模板，默认是Velocity引擎模板  </span></span><br><span class="line">                .execute();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="七、mybatisX-真正的代码生成器"><a href="#七、mybatisX-真正的代码生成器" class="headerlink" title="七、mybatisX 真正的代码生成器"></a>七、mybatisX 真正的代码生成器</h2><p>依赖：mybatis-plus的启动器，lombok，mysql</p>
<p>Setting中Plugins添加MybatisX插件</p>
<p>添加数据库进去：<br>![Pasted image 20220815104243](Pasted image 20220815104243.png)<br>版本可能太高，把数据库调低一点<br>![Pasted image 20220815104327](Pasted image 20220815104327.png)</p>
<p>![Pasted image 20220815110222](Pasted image 20220815110222.png)</p>
<p>![Pasted image 20220815110352](Pasted image 20220815110352.png)<br>在url的后半部分加：?createDatabaseIfNotExist=true&amp;useSSL=false<br>否则会SSL协议报错</p>
<p>新项目中自动生成表的MVC三成结构<br><strong>直接自己建也可以；但这样也方便了很多，xml语句中会自动写入resultMap</strong></p>
<p>![Pasted image 20220815110642](Pasted image 20220815110642.png)</p>
<p>配置基础的路径<br>![Pasted image 20220815110923](Pasted image 20220815110923.png)<br>![Pasted image 20220815111043](Pasted image 20220815111043.png)</p>
<p>自定义一些方法在Mapper中<br>![Pasted image 20220815111940](Pasted image 20220815111940.png)<br>条件写好后 alt+enter 选择<br>会自动在xml中写好sql语句<br>![Pasted image 20220815111957](Pasted image 20220815111957.png)</p>
<p>![Pasted image 20220815112129](Pasted image 20220815112129.png)</p>
<p>报错是因为我xml不是自动生成，里头没有BaseResultMap表<br>![Pasted image 20220815112154](Pasted image 20220815112154.png)</p>
<h2 id="八、对mybatis-plus的总结"><a href="#八、对mybatis-plus的总结" class="headerlink" title="八、对mybatis-plus的总结"></a>八、对mybatis-plus的总结</h2><p>plus是对mybatis的加强，很多自动生成工具非常好用，但这都建立在对基本手写没问题后，否则无法掌控。虽然BaseMapper和IService封装了很多方法，但我个人更倾向于使用MybatisX的自动生成sql工具，有问题了直接在sql语句里改</p>]]></content>
  </entry>
  <entry>
    <title>Javaweb</title>
    <url>/2021/11/17/Javaweb/</url>
    <content><![CDATA[<h1 id="javaWeb"><a href="#javaWeb" class="headerlink" title="javaWeb"></a>javaWeb</h1><p><a href="http://c.biancheng.net/servlet2/what-is-servlet.html">Servlet到底是什么（非常透彻） (biancheng.net)</a></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="1-1前言"><a href="#1-1前言" class="headerlink" title="1.1前言"></a>1.1前言</h3><p>web开发：</p>
<ul>
<li><p>web，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a></p>
</li>
<li><p>静态web</p>
<ul>
<li>html,css</li>
<li>提供给所有人看的数据不会变化</li>
</ul>
</li>
<li><p>动态web</p>
<ul>
<li>淘宝，几乎所有的网站</li>
<li>每个人看的数据会变化，不同时间，不同地点看到的都不同</li>
<li>技术栈：Servlet/JSP，ASP，PHP</li>
</ul>
<p>在java中，动态web资源开发的技术统称为javaWeb</p>
</li>
</ul>
<h3 id="1-2web应用程序"><a href="#1-2web应用程序" class="headerlink" title="1.2web应用程序"></a>1.2web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；（a.html、b.html…）</p>
<ul>
<li><p>URL</p>
</li>
<li><p>这个统一的web资源会放在同一个文件夹下，web应用程序—&gt;Tomcat：服务器</p>
</li>
<li><p>一个web应用由多个部分组成（静态web，动态web）</p>
<ul>
<li>html, css, js</li>
<li>jsp, servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
<p>web应用程序编写完成后，若想提供给外界访问；需要一个服务器来统一管理</p>
</li>
</ul>
<h3 id="1-3静态web"><a href="#1-3静态web" class="headerlink" title="1.3静态web"></a>1.3静态web</h3><ul>
<li>*.htm, *.html, 都是网页后缀，如果服务器上一直存在这些，就可以直接访问</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211104192853102.png" alt="image-20211104192853102"></p>
<ul>
<li>静态web存在的缺点<ul>
<li>Web页面无法更新，所有用户看到的都是一样的内容<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript[实际开发，它用的多]</li>
<li>VBScript(微软用)</li>
</ul>
</li>
<li>它无法和数据库交互(数据无法持久化，用户无法交互)</li>
</ul>
</li>
</ul>
<h3 id="1-4动态web"><a href="#1-4动态web" class="headerlink" title="1.4动态web"></a>1.4动态web</h3><p>页面可以动态展示，“Web的页面展示效果因人而异”</p>
<p><img src="/2021/11/17/Javaweb/image-20211104194226662.png" alt="image-20211104194226662"></p>
<p>缺点</p>
<ul>
<li>加入服务器的动态web资源出现错误，需要重新编写<strong>后台程序</strong>，然后发布<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点</p>
<ul>
<li>web页面可以动态更新，所有用户看到的页面不一样</li>
<li>可以和数据库交互（数据持久化：注册，商品信息..）</li>
</ul>
<h2 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2.web服务器"></a>2.web服务器</h2><h3 id="2-1技术讲解"><a href="#2-1技术讲解" class="headerlink" title="2.1技术讲解"></a>2.1技术讲解</h3><p>ASP：</p>
<ul>
<li>微软：国内最早流行的就是ASP</li>
<li>在HTML中嵌入VB脚本，ASP+COM</li>
<li>在ASP开发中，基本一个页面都有上千行的业务代码，页面及其混乱</li>
<li>维护成本高！</li>
<li>C#</li>
<li>IIS</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            &lt;%</span><br><span class="line">               System.out.println(&quot;hello&quot;)</span><br><span class="line">               %&gt;&lt;/%&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP:</p>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码很简单</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p>JSP/Servlet:</p>
<p>B/S:浏览器和服务器</p>
<p>C/S:客户端和服务端</p>
<ul>
<li>sun公司主推的B/S架构</li>
<li>基于Java语言的（所有的大公司，或者一些开源的组件，都用）</li>
<li>可以承载三高问题带来的影响：高并发，高可用，高性能</li>
<li>语法像ASP，加强市场强度</li>
</ul>
<h3 id="2-2web服务器"><a href="#2-2web服务器" class="headerlink" title="2.2web服务器"></a>2.2web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息</p>
<p><strong>IIS</strong></p>
<p>微软的；ASP…，Windows中自带的</p>
<p><strong>Tomcat</strong></p>
<p><img src="/2021/11/17/Javaweb/image-20211104200606748.png" alt="image-20211104200606748"></p>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学javaWeb的人来说，是最佳选择</p>
<p>Tomcat和<a href="https://baike.baidu.com/item/IIS">IIS</a>等Web服务器一样，Tomcat最新版本为10.0.5<strong>。</strong></p>
<p>工作3-5年，手写Tomcat</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>java的添加机制：jdk–&gt;jre–&gt;lib–&gt;rt.jar    (jar包就是压缩包)</p>
<p>预览下可看到类：如String</p>
<p><img src="/2021/11/17/Javaweb/image-20211104201836112.png" alt="image-20211104201836112"></p>
<h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3.Tomcat"></a>3.Tomcat</h2><h3 id="3-1Tomcat启动和配置"><a href="#3-1Tomcat启动和配置" class="headerlink" title="3.1Tomcat启动和配置"></a>3.1Tomcat启动和配置</h3><p>进入Tomcat文件夹下：</p>
<p><img src="/2021/11/17/Javaweb/image-20211104162043831.png" alt="image-20211104162043831"></p>
<p><img src="/2021/11/17/Javaweb/image-20211104162147641.png" alt="image-20211104162147641"></p>
<p>/bin 文件下：</p>
<p><img src="/2021/11/17/Javaweb/image-20211104162550525.png" alt="image-20211104162550525"></p>
<h3 id="3-2配置"><a href="#3-2配置" class="headerlink" title="3.2配置"></a>3.2配置</h3><p>配置启动端口号（进入server.xml）：</p>
<ul>
<li>Tomcat默认启动端口：8080</li>
<li>mysql：3306</li>
<li>http:80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置主机名称：</p>
<ul>
<li>默认的主机名：localhost-&gt;127.0.0.1</li>
<li>默认网站应用存放的位置：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.liuchang.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="高难度面试题"><a href="#高难度面试题" class="headerlink" title="高难度面试题"></a><strong>高难度面试题</strong></h3><p>请你谈谈网站是如何访问的！</p>
<ol>
<li><p>输入域名；回车</p>
</li>
<li><p>(访问域名后检查客户端的host配置文件)检查<strong>本机</strong>的 C:\Windows\System32\drivers\etc\hosts 配置文件下有没有这个域名映射</p>
<ul>
<li>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       www.liuchang.com</span><br></pre></td></tr></table></figure>

<ul>
<li>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</li>
</ul>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211104165742268.png" alt="image-20211104170209976"></p>
<p><img src="/2021/11/17/Javaweb/image-20211104170033543.png" alt="image-20211104170033543"></p>
<h2 id="4-HTTP"><a href="#4-HTTP" class="headerlink" title="4.HTTP"></a>4.HTTP</h2><h3 id="4-1什么是HTTP"><a href="#4-1什么是HTTP" class="headerlink" title="4.1什么是HTTP"></a>4.1什么是HTTP</h3><p>超文本传输协议（HTTP）是一个简单的请求-响应协议，它通常运行在<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>之上。</p>
<ul>
<li>文本：html，字符串。~…</li>
<li>超文本：图片，音乐，视频，定位</li>
</ul>
<h3 id="4-2两个时代"><a href="#4-2两个时代" class="headerlink" title="4.2两个时代"></a>4.2两个时代</h3><ul>
<li>http1.0<ul>
<li>HTTP/1.0：客户端可以与服务器连接，但只能获得一个web资源，就断开连接</li>
</ul>
</li>
<li>http2.0<ul>
<li>HTTP/1.1：客户端可以与服务器连接，获得多个web资源</li>
</ul>
</li>
</ul>
<h3 id="4-3HTTP请求"><a href="#4-3HTTP请求" class="headerlink" title="4.3HTTP请求"></a>4.3HTTP请求</h3><ul>
<li>客户端—-发请求(Request)—-服务器</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>请求行</span><br><span class="line">Request URL: https:<span class="comment">//www.baidu.com/    请求地址</span></span><br><span class="line">Request Method: GET				get方法/post方法</span><br><span class="line">Status Code: <span class="number">200</span> OK				状态码：<span class="number">200</span></span><br><span class="line">Remote Address: <span class="number">180.101</span><span class="number">.49</span><span class="number">.12</span>:<span class="number">443</span> 访问的远程地址</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>请求头</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*     请求的类型</span><br><span class="line">Accept-Encoding: gzip, deflate, br   类型的编码</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,en;q=<span class="number">0.8</span>,en-GB;q=<span class="number">0.7</span>,en-US;q=<span class="number">0.6</span>   语言</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Connection: keep-aliveand</span><br></pre></td></tr></table></figure>

<ol>
<li>请求行<ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>GET</strong>，<strong>POST</strong>，HEAD，DELETE，PUT，TRACT…<ul>
<li>get：请求能携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li>
</ul>
</li>
</ul>
</li>
<li>消息头</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:告诉浏览器，所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK  UTF-<span class="number">8</span>  GB2312   ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机....../..</span><br></pre></td></tr></table></figure>



<h3 id="4-4HTTP响应"><a href="#4-4HTTP响应" class="headerlink" title="4.4HTTP响应"></a>4.4HTTP响应</h3><ul>
<li>服务器—-响应—-客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection: keep-alive 	  连接</span><br><span class="line">Content-Encoding: gzip    编码</span><br><span class="line">Content-Type: text/html;charset=utf-<span class="number">8</span>  响应类型</span><br></pre></td></tr></table></figure>

<ol>
<li>响应体</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:告诉浏览器，所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK  UTF-<span class="number">8</span>  GB2312   ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机....../..</span><br><span class="line">Refresh:告诉客户端，多久刷新一次</span><br><span class="line">Location：让网页重新定位</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>响应状态码</p>
<p>200：响应成功</p>
<p>3xx：请求重定向</p>
<ul>
<li>重定向：重新到我规定的新的位置</li>
</ul>
<p>4xx：找不到资源  404</p>
<ul>
<li>资源不存在</li>
</ul>
<p>5xx：服务器代码错误   500   502：网关错误</p>
</li>
</ol>
<h3 id="常见面试题："><a href="#常见面试题：" class="headerlink" title="常见面试题："></a><strong>常见面试题：</strong></h3><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<h2 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5.Maven"></a>5.Maven</h2><p><strong>我问什么要学习这个技术？</strong></p>
<ol>
<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入</p>
</li>
<li><p>如何能够让一个东西自动帮我们导入和配置jar包</p>
<p>Maven诞生了</p>
</li>
</ol>
<h3 id="5-1Maven项目架构管理工具"><a href="#5-1Maven项目架构管理工具" class="headerlink" title="5.1Maven项目架构管理工具"></a>5.1Maven项目架构管理工具</h3><p>目前用来就是方便导入jar包</p>
<p>Maven的核心思想：<strong>约定大于配置</strong></p>
<ul>
<li>有约束，不要去违反</li>
</ul>
<p>Maven会规定好如何去编写Java代码，按照这个规范来 </p>
<p><strong>小建议</strong>：电脑上所有环境放在同一个文件夹中</p>
<h3 id="5-2Maven下载安装"><a href="#5-2Maven下载安装" class="headerlink" title="5.2Maven下载安装"></a>5.2Maven下载安装</h3><p><img src="/2021/11/17/Javaweb/image-20211110102721577.png" alt="image-20211110102721577"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bin  <span class="comment">//执行文件</span></span><br><span class="line">boot <span class="comment">//启动选项</span></span><br><span class="line">conf <span class="comment">//配置</span></span><br><span class="line">lib  <span class="comment">//依赖包</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3配置环境变量"><a href="#5-3配置环境变量" class="headerlink" title="5.3配置环境变量"></a>5.3配置环境变量</h3><p>在系统环境变量中配置：</p>
<ul>
<li>M2_HOME    maven目录下的bin目录</li>
<li>MAVEN_HOME  maven的目录</li>
<li>在系统变来那个PATH中配置%MAVEN_HOME%\bin</li>
</ul>
<h3 id="5-4阿里云镜像"><a href="#5-4阿里云镜像" class="headerlink" title="5.4阿里云镜像"></a>5.4阿里云镜像</h3><p>镜像(mirrors)：方便下载使用;国内建议使用阿里云<br>     Maven国外的，国内有墙，我们访问外网会很慢； 翻墙：VPN</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5本地仓库"><a href="#5-5本地仓库" class="headerlink" title="5.5本地仓库"></a>5.5本地仓库</h3><p>在本地的仓库，远程仓库：</p>
<p>建立一个本地仓库：localRepository</p>
<p>Maven下新建一个文件夹，settings.xml中改仓库地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Maven\apache-maven-3.8.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211110125803550.png" alt="image-20211110125803550"></p>
<p><img src="C:/Users/帝轩王/AppData/Roaming/Typora/typora-user-images/image-20211110125826796.png" alt="image-20211110125826796"></p>
<h3 id="5-6在IDEA中使用Maven"><a href="#5-6在IDEA中使用Maven" class="headerlink" title="5.6在IDEA中使用Maven"></a>5.6在IDEA中使用Maven</h3><ol>
<li><p>创建一个MavenWeb项目</p>
<p><img src="/2021/11/17/Javaweb/image-20211110131644962.png" alt="image-20211110131644962"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110132054445.png" alt="image-20211110132054445"></p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110132741290.png" alt="image-20211110132741290"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110132850904.png" alt="image-20211110132850904"></p>
<ol start="2">
<li><p>等待Maven安装完毕</p>
<p><img src="/2021/11/17/Javaweb/image-20211110133841720.png" alt="image-20211110133841720"></p>
</li>
<li><p>IDEA中的Maven设置</p>
<p>注意：IDEA项目创建成功后，看一眼Maven配置</p>
<p><img src="/2021/11/17/Javaweb/image-20211110135845420.png" alt="image-20211110135845420"></p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110140038157.png" alt="image-20211110140038157"></p>
<ol start="4">
<li>到这里，Maven在IDEA中的配置和使用就OK了</li>
</ol>
<h3 id="5-7创建一个普通的Maven项目"><a href="#5-7创建一个普通的Maven项目" class="headerlink" title="5.7创建一个普通的Maven项目"></a>5.7创建一个普通的Maven项目</h3><p><img src="/2021/11/17/Javaweb/image-20211110140357464.png" alt="image-20211110140357464"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110140758533.png" alt="image-20211110140758533"></p>
<p>这个只有在web应用下才会有：</p>
<p><img src="/2021/11/17/Javaweb/image-20211110140959966.png" alt="image-20211110140959966"></p>
<h3 id="5-8标记文件夹功能（2选1）"><a href="#5-8标记文件夹功能（2选1）" class="headerlink" title="5.8标记文件夹功能（2选1）"></a>5.8标记文件夹功能（2选1）</h3><ol>
<li></li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110141513640.png" alt="image-20211110141513640"></p>
<ol start="2">
<li></li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211110141642635.png" alt="image-20211110141642635"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110141944081.png" alt="image-20211110141944081"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110142121481.png" alt="image-20211110142121481"></p>
<h3 id="5-9在IDEA中配置Tomcat"><a href="#5-9在IDEA中配置Tomcat" class="headerlink" title="5.9在IDEA中配置Tomcat"></a>5.9在IDEA中配置Tomcat</h3><p><img src="/2021/11/17/Javaweb/image-20211110143107420.png" alt="image-20211110143107420"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110145206377.png" alt="image-20211110145206377"></p>
<p>解决警告问题</p>
<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>
<p><img src="/2021/11/17/Javaweb/image-20211110145359707.png" alt="image-20211110145359707"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110150530167.png" alt="image-20211110150530167"></p>
<p><img src="/2021/11/17/Javaweb/image-20211110151332476.png" alt="image-20211110151332476"></p>
<h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p><img src="/2021/11/17/Javaweb/image-20211110155034326.png" alt="image-20211110155034326"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  这里就是刚才配置的GAV  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  Package：项目的打包方式</span></span><br><span class="line"><span class="comment"> jar：java应用</span></span><br><span class="line"><span class="comment"> war：javaWeb应用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    项目的默认构建编码  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211110155856725.png" alt="image-20211110155856725"></p>
<p>maven由于他的约定大于配置，我们之后可能会遇到我们写的配置文件无法到处或生效的问题（mybatis中会遇到），解决方案：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-11-IDEA操作"><a href="#5-11-IDEA操作" class="headerlink" title="5.11 IDEA操作"></a>5.11 IDEA操作</h3><p><img src="/2021/11/17/Javaweb/image-20211110160853281.png" alt="image-20211110160853281"></p>
<h3 id="5-12-解决遇到的问题"><a href="#5-12-解决遇到的问题" class="headerlink" title="5.12 解决遇到的问题"></a>5.12 解决遇到的问题</h3><ol>
<li><p>Mavne默认web项目中 web.xml 的版本问题</p>
<p><img src="/2021/11/17/Javaweb/image-20211111115136701.png" alt="image-20211111115136701"></p>
</li>
<li><p>替换成Tomcat中web.xml的版本（保证和Tomcat一致）</p>
<p><img src="/2021/11/17/Javaweb/image-20211111115327279.png" alt="image-20211111115327279"></p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6.Servlet"></a>6.Servlet</h2><h3 id="6-1Servlet简介"><a href="#6-1Servlet简介" class="headerlink" title="6.1Servlet简介"></a>6.1Servlet简介</h3><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>sun公司在这些API中提供一个接口叫做：Servlet，如果想开发一个Servlet程序没只需要完成两个步骤<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p><strong>把实现Servlet接口的Java程序叫做，Servlet</strong></p>
<h3 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h3><p>Servlet接口Sun公司有两个默认的实现类：HttpServlet，</p>
<ol>
<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里建立Model；</p>
<p>这个空的工程就是Maven主工程</p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211112102201510.png" alt="image-20211112102201510"></p>
<ol start="2">
<li><p>关于Maven父子工程的理解：</p>
<p>父项目中有：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目中有：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">![image-20211112104928779](Javaweb/image-20211112104928779.png)    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的Java子项目可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211112104928779.png" alt="image-20211112104928779"></p>
<ol start="3">
<li>Maven环境优化<ol>
<li>修改web.xml为最新的</li>
<li>将maven的结构搭建完整</li>
</ol>
</li>
<li>编写一个Servlet程序<ol>
<li>编写一个普通类</li>
<li>实现Servlet接口，这里直接继承HttpServlet</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;hello,servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPut(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>编写Servlet的映射</p>
<p>为什么需要映射：我们写的是Java程序，但是要通过浏览器访问，而浏览器需要链接web服务器，所以我们需要在web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    注册Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.demo.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    Servlet请求路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>配置Tomcat</p>
</li>
<li><p>启动测试</p>
</li>
</ol>
<h3 id="6-3-注意的问题："><a href="#6-3-注意的问题：" class="headerlink" title="6.3 注意的问题："></a>6.3 注意的问题：</h3><ul>
<li>两处申请名字要一致</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211114154732018.png" alt="image-20211114154732018"></p>
<p><img src="/2021/11/17/Javaweb/image-20211114154751939.png" alt="image-20211114154751939"></p>
<ul>
<li>代理抛出异常（端口1099被占用）</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211114155307624.png" alt="image-20211114155307624"></p>
<p><img src="/2021/11/17/Javaweb/image-20211114155346554.png" alt="image-20211114155346554"></p>
<ul>
<li>运行之前要maven clean-package；更新target文件</li>
</ul>
<h3 id="6-4-查看日志"><a href="#6-4-查看日志" class="headerlink" title="6.4 查看日志"></a>6.4 查看日志</h3><p><img src="/2021/11/17/Javaweb/image-20211114155433716.png" alt="image-20211114155433716"></p>
<p><img src="/2021/11/17/Javaweb/image-20211114155513788.png" alt="image-20211114155513788"></p>
<h3 id="6-5-Servlet运行原理"><a href="#6-5-Servlet运行原理" class="headerlink" title="6.5 Servlet运行原理"></a>6.5 Servlet运行原理</h3><p>Servlet是由Web服务器调用，Web浏览器在收到浏览器请求后，会：</p>
<p><img src="/2021/11/17/Javaweb/image-20211117143432685.png" alt="image-20211117143432685"></p>
<h3 id="6-6-Mapping问题"><a href="#6-6-Mapping问题" class="headerlink" title="6.6 Mapping问题"></a>6.6 Mapping问题</h3><ol>
<li><p>一个Servlet请求可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个Servlet请求可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个Servlet请求可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chang/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用这个会将首页覆盖掉--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>指定一些后缀或者前缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">注意：*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">hello/asdfsf.do--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>优先级问题</p>
<p>指定了固有的映射路径优先级最高（在搜索框中输入），找不到就走默认的路径</p>
</li>
</ol>
<h3 id="6-7-ServletContext"><a href="#6-7-ServletContext" class="headerlink" title="6.7  ServletContext"></a>6.7  ServletContext</h3><p><strong>了解一些重点的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//this.getInitParameter()  初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig()  Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext() Servlet上下文</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  只做了解，估计用不上--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  可以设置全局参数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;context-param&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;param-name&gt;&lt;/param-name&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;param-value&gt;&lt;/param-value&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;/context-param&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    可以携带参数，给HelloServlet创一些初始的参数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;init-param&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;param-name&gt;&lt;/param-name&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;param-value&gt;&lt;/param-value&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/init-param&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；（起到中间商的作用）</p>
<ol>
<li>数据共享 </li>
</ol>
<p>我在这个Servlet中保存的数据，可以在另外一个Servlet中拿到；</p>
<p><img src="/2021/11/17/Javaweb/image-20211117204055479.png" alt="image-20211117204157255"></p>
<p>1.文件结构</p>
<p><img src="/2021/11/17/Javaweb/image-20211117181838383.png" alt="image-20211117181838383"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HelloServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">&quot;刘畅&quot;</span>;<span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="comment">//将一个数据保存到ServletContext中，以键值对的方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GetServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应部分写在下面</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211117182306023.png" alt="image-20211117182306023"></p>
<ol start="2">
<li>获取初始化参数</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置一些web应用初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.chang.servlet.ServletDemo03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211117183846641.png" alt="image-20211117183846641"></p>
<ol start="3">
<li>请求<strong>转发</strong>（留意后续有重定向的变化）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">       <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;);//转发的请求路径</span></span><br><span class="line">       <span class="comment">//requestDispatcher.forward(req,resp);//调用forward实现请求转发</span></span><br><span class="line"></span><br><span class="line">       context.getRequestDispatcher(<span class="string">&quot;/getp&quot;</span>).forward(req,resp); <span class="comment">//上面两句合并为一句</span></span><br><span class="line">       <span class="comment">//通过getRequestDispatcher方法，实际走的是/gp的路径</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211118134620092-16374973526421.png" alt="image-20211118134620092"></p>
<ol start="4">
<li><p>读取资源文件</p>
<p>properties</p>
<ul>
<li>在Java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现都打包到了同一路径下：classes。我们俗称这个路径为classpath（类路径）</p>
<p>思路：需要一个文件流</p>
<p><img src="/2021/11/17/Javaweb/image-20211118141132299.png" alt="image-20211118141132299"></p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<span class="comment">//返回出一个流</span></span><br><span class="line">        <span class="comment">//路径的第一个斜杠必须打，表示当前项目下</span></span><br><span class="line">        <span class="comment">//访问的路径在target，映射包下</span></span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);<span class="comment">//拿到文件的流</span></span><br><span class="line">        String username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(username+<span class="string">&quot;:&quot;</span>+password);<span class="comment">//测试是不是读出来了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--做映射--&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211118141333770.png" alt="image-20211118141333770"></p>
<p><img src="/2021/11/17/Javaweb/image-20211118141631859.png" alt="image-20211118141631859"></p>
<h3 id="6-8HttpServletResponse"><a href="#6-8HttpServletResponse" class="headerlink" title="6.8HttpServletResponse"></a>6.8HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<p>源码分析：</p>
<ol>
<li><p><strong>简单分类</strong></p>
<p>负责向浏览器发送数据的方法</p>
<ul>
<li>```java<br>ServletOutputStream getOutputStream() throws IOException;<br>//一般流用它<br>PrintWriter getWriter() throws IOException;<br>//中文用它<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">负责向浏览器发送响应头的方法</span><br><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  void setCharacterEncoding(String var1);</span><br><span class="line">  </span><br><span class="line">  void setContentLength(int var1);</span><br><span class="line">  </span><br><span class="line">  void setContentLengthLong(long var1);</span><br><span class="line">  </span><br><span class="line">  void setContentType(String var1);    </span><br><span class="line">  </span><br><span class="line">  void setDateHeader(String var1, long var2);</span><br><span class="line">  </span><br><span class="line">  void addDateHeader(String var1, long var2);</span><br><span class="line">  </span><br><span class="line">  void setHeader(String var1, String var2);</span><br><span class="line">  </span><br><span class="line">  void addHeader(String var1, String var2);</span><br><span class="line">  </span><br><span class="line">  void setIntHeader(String var1, int var2);</span><br><span class="line">  </span><br><span class="line">  void addIntHeader(String var1, int var2);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>响应状态码</p>
<ul>
<li>```java<br>//常量<pre><code>int SC_CONTINUE = 100;
int SC_SWITCHING_PROTOCOLS = 101;
int SC_OK = 200;
int SC_CREATED = 201;
int SC_ACCEPTED = 202;
int SC_NON_AUTHORITATIVE_INFORMATION = 203;
int SC_NO_CONTENT = 204;
int SC_RESET_CONTENT = 205;
int SC_PARTIAL_CONTENT = 206;
int SC_MULTIPLE_CHOICES = 300;
int SC_MOVED_PERMANENTLY = 301;
int SC_MOVED_TEMPORARILY = 302;
int SC_FOUND = 302;
int SC_SEE_OTHER = 303;
int SC_NOT_MODIFIED = 304;
int SC_USE_PROXY = 305;
int SC_TEMPORARY_REDIRECT = 307;
int SC_BAD_REQUEST = 400;
int SC_UNAUTHORIZED = 401;
int SC_PAYMENT_REQUIRED = 402;
int SC_FORBIDDEN = 403;
int SC_NOT_FOUND = 404;
int SC_METHOD_NOT_ALLOWED = 405;
int SC_NOT_ACCEPTABLE = 406;
int SC_PROXY_AUTHENTICATION_REQUIRED = 407;
int SC_REQUEST_TIMEOUT = 408;
int SC_CONFLICT = 409;
int SC_GONE = 410;
int SC_LENGTH_REQUIRED = 411;
int SC_PRECONDITION_FAILED = 412;
int SC_REQUEST_ENTITY_TOO_LARGE = 413;
int SC_REQUEST_URI_TOO_LONG = 414;
int SC_UNSUPPORTED_MEDIA_TYPE = 415;
int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
int SC_EXPECTATION_FAILED = 417;
int SC_INTERNAL_SERVER_ERROR = 500;
int SC_NOT_IMPLEMENTED = 501;
int SC_BAD_GATEWAY = 502;
int SC_SERVICE_UNAVAILABLE = 503;
int SC_GATEWAY_TIMEOUT = 504;
int SC_HTTP_VERSION_NOT_SUPPORTED = 505;
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. **常见应用**</span><br><span class="line"></span><br><span class="line">   1. 向浏览器输出消息（前头一直在讲）</span><br><span class="line">   2. 下载文件</span><br><span class="line">      1. 获取下载文件的路径</span><br><span class="line">      2. 获取下载文件名</span><br><span class="line">      3. 使浏览器支持我们的下载</span><br><span class="line">      4. 获取下载文件的输入流</span><br><span class="line">      5. 创建缓冲区</span><br><span class="line">      6. 获取OutputStream对象</span><br><span class="line">      7. 将FileOutputStream流写入到buffer缓冲区</span><br><span class="line">      8. 使用OutputStream将缓冲区的数据输出到客户端</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //1. 获取下载文件的路径</span><br><span class="line">        String realPath = &quot;D:\\IDEA\\Maven\\javaweb-02-servlet\\response\\src\\main\\resources\\1.jpg&quot;;</span><br><span class="line">        System.out.println(&quot;下载的文件路径：&quot;+realPath);</span><br><span class="line">        //2. 获取下载文件名</span><br><span class="line">        String filename = realPath.substring(realPath.lastIndexOf(&quot;//&quot;) + 1);//让它识别斜杠后面的文件名；双斜杠用于转义斜杠</span><br><span class="line">        //3. 使浏览器支持(Content-disposition)我们的下载</span><br><span class="line">        resp.setHeader(&quot;Content-disposition&quot;,&quot;attachment;filename=&quot;+filename);</span><br><span class="line">        //4. 获取下载文件的输入流</span><br><span class="line">        FileInputStream in = new FileInputStream(realPath);</span><br><span class="line">        //5. 创建缓冲区</span><br><span class="line">        int len = 0;</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        //6. 获取OutputStream对象</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        //7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区的数据输出到客户端</span><br><span class="line">        while ((len=in.read(buffer))&gt;0)&#123;</span><br><span class="line">            out.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        //8.关闭流</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        </span><br><span class="line">        //如何让浏览器3秒自动刷新一次</span><br><span class="line">        //resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>验证码功能（了解一下原理）</p>
<p>怎么验证;</p>
<ul>
<li>前端实现</li>
<li>后端实现，需要用到Java的图片类，生产一个图片</li>
</ul>
</li>
<li><p><strong>实现重定向（需要掌握）</strong></p>
</li>
</ol>
<p>一个web资源收到客户端请求，他会通知客户端去访问另外一个web资源</p>
<p>常见场景：</p>
<ul>
<li>用户登录，登录成功后访问另一个页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        resp.setHeader(&quot;Location&quot;,&quot;./down&quot;);  跳转路径</span></span><br><span class="line"><span class="comment">        resp.setStatus(302);  状态码；有常量表示 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;./down&quot;</span>); <span class="comment">//重定向</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="面试题：重定向和转发的区别"><a href="#面试题：重定向和转发的区别" class="headerlink" title="面试题：重定向和转发的区别"></a>面试题：重定向和转发的区别</h3><p>相同点</p>
<ul>
<li>页面都会实实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化</li>
<li>重定向的时候，url地址栏会发生变化</li>
</ul>
<p><img src="/2021/11/17/Javaweb/image-20211118134620092-16374973526421.png" alt="image-20211118134620092"></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--index.jsp--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=gb2312&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径;web.xml中对应的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--success.jsp--%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; character=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Success&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RequestTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot;+&quot;</span>+password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向注意路径问题，否则404</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;./success.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/11/17/Javaweb/image-20211121201311172.png" alt="image-20211121201311172"></p>
<h3 id="6-9HttpServletRequest"><a href="#6-9HttpServletRequest" class="headerlink" title="6.9HttpServletRequest"></a>6.9HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过HTTP协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息</p>
<p>获取前端传递参数，请求转发</p>
<p><img src="/2021/11/17/Javaweb/image-20211124152742507.png" alt="image-20211124152742507"></p>
<p>一个返回string，一个返回数组；多个和单个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">    <span class="comment">//后台接受中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbies));</span><br><span class="line">    System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的/代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    doGet(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-Cookie、Session"><a href="#7-Cookie、Session" class="headerlink" title="7.Cookie、Session"></a>7.Cookie、Session</h2><h3 id="7-1-会话"><a href="#7-1-会话" class="headerlink" title="7.1 会话"></a>7.1 会话</h3><p><strong>会话：</strong>用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程叫会话</p>
<p><strong>有状态会话：</strong>一个同学来过教室，下次再来，我们会知道这个同学，曾经来过</p>
<p><strong>你怎么正面你是清华的学生？</strong></p>
<p>对象：  你    清华</p>
<ol>
<li>发票             清华给你发票</li>
<li>学校登记      清华标记你来过了</li>
</ol>
<p><strong>一个网站，怎么证明你来过</strong></p>
<p>客户端         服务端</p>
<ol>
<li>服务端给客户端一个信件，客户端下次访问客户端带上信件就可以了；cookie</li>
<li>服务器登记你来过了，下次你来的时候我匹配你；session</li>
</ol>
<h3 id="7-2-保存会话的两种技术"><a href="#7-2-保存会话的两种技术" class="headerlink" title="7.2 保存会话的两种技术"></a>7.2 保存会话的两种技术</h3><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（响应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息，可以把信息或数据放在 session 中</li>
</ul>
<p>常见场景：网站登录之后，下次不用登录，直接登上去</p>
<h3 id="7-3-Cookie"><a href="#7-3-Cookie" class="headerlink" title="7.3 Cookie"></a>7.3 Cookie</h3><ol>
<li>从请求中拿到cookie信息</li>
<li>服务器响应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">//获得Cookie</span></span><br><span class="line">cookie.getName();<span class="comment">//获得Cookie中的key</span></span><br><span class="line">cookie.getValue();<span class="comment">//获得Cookie中的vlaue</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);<span class="comment">//新建一个Cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置Cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie);<span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<p><strong>cookie：一般会保存在本地的用户目录下 appdata；</strong>（不好，因为不安全）</p>
<p>一个网站cookie是否存在上限！<strong>细节问题</strong></p>
<ul>
<li>一个Cookie只能保存一个信息</li>
<li>一个web站点可以给浏览器发送多个Cookie，每个站点最多存放20个Cookie</li>
<li>Cookie大小有限制4kb</li>
<li>300个Cookie，浏览器上限</li>
</ul>
<p>删除Cookie：</p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期为0</li>
</ul>
<p><strong>编码解码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;刘畅&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//编码</span></span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//解码</span></span><br></pre></td></tr></table></figure>



<h3 id="7-4-Session（重点）"><a href="#7-4-Session（重点）" class="headerlink" title="7.4 Session（重点）"></a>7.4 Session（重点）</h3><p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li>
<li>用户登录之后，整个网站都可以访问，与网页无关 –&gt;保存用户的信息；保存购物车信息…(长久保存的信息)</li>
</ul>
<p>Session和Cookie的区别</p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session是把用户的数据写到用户独占Session中，服务器保存（保存重要信息，减少服务器资源的浪费；一台浏览器对应一个Session）</li>
<li>Session对象由服务器创建</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>在整个网站中经常会使用的数据，将保存在Session中</li>
</ul>
<p>使用Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类(Person)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SessionDemo01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;character=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span>  Person(<span class="string">&quot;刘畅&quot;</span>,<span class="number">20</span>));<span class="comment">//记住这个name，Demo02里要用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功，ID&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session已经在服务器中存在，ID&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Session创建的时候做了什么</span></span><br><span class="line">        <span class="comment">//Session创建的时候，会带有一个Cookie的ID</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SessionDemo02</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;character=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//共享信息</span></span><br><span class="line">        <span class="comment">//创建新的 Person 对象，从Session中取出,在控制台显示</span></span><br><span class="line">        Person person = (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SessionDemo03</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//手动注销Session</span></span><br><span class="line">        <span class="comment">//注销后重新访问 s2,报错404</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>记得要在web.xml中映射地址</strong></p>
<p>web.xml自动注销</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置Session默认的失效时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        1min后Session自当失效，以分钟为单位--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="8-JSP（老技术了，看懂就行）"><a href="#8-JSP（老技术了，看懂就行）" class="headerlink" title="8. JSP（老技术了，看懂就行）"></a>8. JSP（老技术了，看懂就行）</h2><h3 id="8-1-什么是JSP"><a href="#8-1-什么是JSP" class="headerlink" title="8.1 什么是JSP"></a>8.1 什么是JSP</h3><p>为了简化Servlet的前端语言</p>
<p>Java Server Pages: Java服务器页面，也和Servlet一样，用于动态web技术</p>
<h3 id="8-2-JSP原理"><a href="#8-2-JSP原理" class="headerlink" title="8.2 JSP原理"></a>8.2 JSP原理</h3><p>思路：JSP是怎么执行的</p>
<ul>
<li>代码没有问题</li>
<li>服务器内部工作<ul>
<li>Tomcat有一个 work 目录</li>
</ul>
</li>
<li><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet</strong></li>
<li>JSP最终会被转换为一个Java类</li>
</ul>
<p><strong>JSP本质就是Servlet</strong></p>
<p>我的源码地址：只有编译的时候会产生work文件夹，中的/ROOT，包含index.jsp页面和新建的</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\帝</span>轩王<span class="keyword">\AppData</span><span class="keyword">\Local</span><span class="keyword">\JetBrains</span><span class="keyword">\IntelliJIdea</span>2020.1<span class="keyword">\tomcat</span><span class="keyword">\Unnamed</span><span class="built_in">_</span>javaweb-02-servlet<span class="built_in">_</span>13</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断请求</p>
</li>
<li><p>内置一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext; <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;   <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;  <span class="comment">//application</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;		<span class="comment">//配置</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;			<span class="comment">//输出对象</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;    			<span class="comment">//当前页</span></span><br><span class="line">HttpServletRequest request					   <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response				   <span class="comment">//响应</span></span><br></pre></td></tr></table></figure></li>
<li><p>输出页面增加的代码</p>
</li>
</ol>
<p><img src="/2021/11/17/Javaweb/image-20211126122513911.png" alt="image-20211126122513911"></p>
<h3 id="8-3-JSP基础语法"><a href="#8-3-JSP基础语法" class="headerlink" title="8.3 JSP基础语法"></a>8.3 JSP基础语法</h3><p>耦合性太高（牵一发而动全身）</p>
<p><font color="yellow">高聚合，低耦合是开发的追求</font></p>
<p>HSP是Java技术的一些应用，拥有一些扩充给语法（了解）；Java所有语法都支持</p>
<p>**JSP表达式 **</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%=  变量或表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP脚本片段</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP脚本--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">        sum+=i;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>脚本片段的再实现</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--在代码中嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;hello!!&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP声明</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP声明:会被编译到JSP生成的Java类中！其他的，就会被生成到_jspService方法中</p>
<p>在JSP嵌入Java</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;&#125;     取值用的，或在里头编辑</span><br><span class="line">&lt;% %&gt;</span><br><span class="line">&lt;%= %&gt;</span><br><span class="line">&lt;%! %&gt;</span><br><span class="line">&lt;%--注释--%&gt;   jsp的注释不会在客户端显示，HTML的会（查看源代码）</span><br></pre></td></tr></table></figure>

<h3 id="8-4-JSP指令"><a href="#8-4-JSP指令" class="headerlink" title="8.4 JSP指令"></a>8.4 JSP指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page ... %&gt;         定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</span><br><span class="line">&lt;%@ include ... %&gt;      包含其他文件</span><br><span class="line">&lt;%@ taglib ... %&gt;	    引入标签库的定义</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/2021/10/26/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis-框架"><a href="#MyBatis-框架" class="headerlink" title="MyBatis 框架"></a>MyBatis 框架</h1><p><strong>官方文档</strong>：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis – MyBatis 3 | 入门</a></p>
<h1 id="第一章-框架的概述"><a href="#第一章-框架的概述" class="headerlink" title="第一章 框架的概述"></a>第一章 框架的概述</h1><h2 id="1-三层架构"><a href="#1-三层架构" class="headerlink" title="1.三层架构"></a>1.三层架构</h2><p>mvc：web开发中，使用mvc架构模式。  m：数据， v：视图， c：控制器。</p>
<p>​          c控制器： 接收请求，调用service对象，显示请求的处理结果。 当前使用servlet作为控制器</p>
<p>​          v视图： 现在使用jsp， html，css，js。 显示请求的处理结果，把m中数据显示出来。</p>
<p>​          m数据： 来自数据库mysql， 来自文件，来自网络</p>
<p>mvc作用：</p>
<p>​     1）实现解耦合。 </p>
<p>​     2）让mvc 各负其职。  </p>
<p>​     3）使的系统扩展更好。更容易维护。 </p>
<p>三层架构：</p>
<p>1.界面层（视图层）：接收用户的请求，调用service， 显示请求的处理结果的。 包含了jsp，html，servlet等对象。 对应的包controller，</p>
<p>2.业务逻辑层：处理业务逻辑， 使用算法处理数据的。 把数据返回给界面层。 对应的是service包，和包中的很多的XXXService类。 例如：  StudentService ， OrderService, ShopService </p>
<p>3.持久层（数据库访问层）：访问数据库，或者读取文件，访问网络。获取数据。 对应的包是dao。 dao包中很多的StudentDao,  OrderDao,  ShopDao等等。</p>
<h2 id="2-三层架构请求的处理流程"><a href="#2-三层架构请求的处理流程" class="headerlink" title="2. 三层架构请求的处理流程"></a>2. 三层架构请求的处理流程</h2><p>用户发起请求—-&gt;界面层—–&gt;业务逻辑层—-&gt;持久层—-&gt;数据库（mysql）</p>
<h2 id="3-为什么要使用三层？"><a href="#3-为什么要使用三层？" class="headerlink" title="3. 为什么要使用三层？"></a>3. 为什么要使用三层？</h2><p>1，结构清晰、耦合度低, 各层分工明确<br>2，可维护性高，可扩展性高<br>3，有利于标准化<br>4，开发人员可以只关注整个结构中的其中某一层的功能实现<br>5，有利于各层逻辑的复用</p>
<h2 id="4-三层架构模式和框架"><a href="#4-三层架构模式和框架" class="headerlink" title="4. 三层架构模式和框架"></a>4. 三层架构模式和框架</h2><p>每一层对应着一个框架</p>
<p>1）界面层—SpringMVC框架     controller</p>
<p>2）业务层—Spring框架             service</p>
<p>3）持久层—MyBatis框架           dao/mapper</p>
<h2 id="5-框架"><a href="#5-框架" class="headerlink" title="5 .框架"></a>5 .框架</h2><ol>
<li>什么是框架（framework）</li>
</ol>
<p>框架：就是一个软件， 完成了部分的功能。  软件中的类和类之间的方法调用都已经规定好了。 通过这些可以完成某些功能。  <strong>框架看做是模版</strong>。   </p>
<p>框架是可以升级的，改造的。 框架是安全的。</p>
<p>框架是对某一个方面有用的，不是全能的。 </p>
<h2 id="6-框架解决的问题"><a href="#6-框架解决的问题" class="headerlink" title="6. 框架解决的问题"></a>6. 框架解决的问题</h2><p>1）框架能实现技术的整合。 </p>
<p>2）提供开发的效率。 降低难度。</p>
<h2 id="7-jdbc访问数据库的优缺点"><a href="#7-jdbc访问数据库的优缺点" class="headerlink" title="7. jdbc访问数据库的优缺点"></a>7. jdbc访问数据库的优缺点</h2><p>优点：</p>
<ol>
<li>直观，好理解</li>
</ol>
<p>缺点：</p>
<ol>
<li>创建很多对象 Connection ,Statement, ResultSet</li>
<li>注册驱动</li>
<li>执行sql语句</li>
<li>把ResultSet转为 Student ， List集合。</li>
<li>关闭资源</li>
<li>sql语句和业务逻辑代码混在一起</li>
</ol>
<h2 id="8-MyBatis框架"><a href="#8-MyBatis框架" class="headerlink" title="8 MyBatis框架"></a>8 MyBatis框架</h2><p>什么 mybatis： 是一个持久层框架， 原名是ibatis， 2013改名为 MyBatis.   MyBatis可以操作数据库，对数据执行增删改查。  </p>
<p>底层是jdbc，看做是高级的jdbc封装。  解决jdbc的缺点。</p>
<p>mybatis能做什么？</p>
<p> 1） 注册驱动 。</p>
<p>  2） 创建jdbc中使用的Connection， Statement，ResultSet</p>
<ol start="3">
<li><p>  执行sql语句， 得到ResultSet</p>
</li>
<li><p>  处理ResultSet， 把记录集中的数据转为java对象，  同时还能把java对象放入到List集合。</p>
</li>
</ol>
<p>  5）关闭资源</p>
<p>  6）实现sql语句和java代码的解耦合。</p>
<p>mybatis的文档： <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h1 id="第二章-MyBatis入门"><a href="#第二章-MyBatis入门" class="headerlink" title="第二章  MyBatis入门"></a>第二章  MyBatis入门</h1><h2 id="2-1-第一个例子"><a href="#2-1-第一个例子" class="headerlink" title="2.1 第一个例子"></a>2.1 第一个例子</h2><p>实现步骤：</p>
<p>0.创建student表（id，name，email，age）</p>
<p>1.新建maven项目</p>
<p>2.修改pom.xml </p>
<p>   1）加入依赖 mybatis依赖， mysql驱动， junit</p>
<p>   2）在<build>加入资源插件</build></p>
<p>3.创建实体类Student。定义属性， 属性名和列名保持一致</p>
<p>4.创建Dao接口， 定义操作数据库的方法。</p>
<p>5.创建xml文件（mapper文件）， 写sql语句。 </p>
<p>   mybatis框架推荐是把sql语句和java代码分开</p>
<p>   mapper文件：定义和dao接口在同一目录， 一个表一个mapper文件。</p>
<p>6.创建mybatis的主配置文件（xml文件）：有一个， 放在resources目录下</p>
<p>   1）定义创建连接实例的数据源（DataSource）对象</p>
<ol start="2">
<li>  指定其他mapper文件的位置</li>
</ol>
<p>7.创建测试的内容。</p>
<p>   使用main方法，测试mybatis访问数据库</p>
<p>   也可以使用junit 访问数据库</p>
<h2 id="2-2-概念"><a href="#2-2-概念" class="headerlink" title="2.2 概念"></a>2.2 概念</h2><p>1.自动提交：当你的 sql语句执行完毕后， 提交事务。 数据库更新操作之间保存到数据</p>
<p>2.手动（手工）提交事务：在你需要提交事务的位置， 执行方法，提交事务或者回顾事务。</p>
<h2 id="2-3-MyBatis的一些重要对象"><a href="#2-3-MyBatis的一些重要对象" class="headerlink" title="2.3 MyBatis的一些重要对象"></a>2.3 MyBatis的一些重要对象</h2><p>1） Resources ： mybatis框架中的对象， 一个作用读取 主配置信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>2）SqlSessionFactoryBuilder：负责创建SqlSessionFactory对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>



<p>3）SqlSessionFactory: 重要对象</p>
<p>SqlSessionFactory是重量级对象：创建此对象需要使用更多的资源和时间。  在项目中有一个就可以了。</p>
<p>SqlSessionFactory接口：作用是SqlSession的工厂， 就是创建SqlSession对象。</p>
<p>DefaultSqlSessionFactory实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123; &#125; </span><br></pre></td></tr></table></figure>



<p>SqlSessionFactory接口中的方法</p>
<p>openSession(): 获取一个默认的SqlSession对象， 默认是需要手工提交事务的。</p>
<p>openSession(boolean): boolean参数表示是否自动提交事务。 </p>
<p>​                   true： 创建一个自动提交事务的SqlSession</p>
<p>​                  false:   等同于没有参数的openSession</p>
<ol start="4">
<li>SqlSession对象</li>
</ol>
<p>SqlSession对象是通过SqlSessionFactory获取的。 SqlSession本身是接口</p>
<p>DefaultSqlSession: 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>SqlSession作用是提供了大量的执行sql语句的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selectOne：执行sql语句，最多得到一行记录，多余1行是错误。</span><br><span class="line">selectList：执行sql语句，返回多行数据</span><br><span class="line">selectMap：执行sql语句的，得到一个Map结果</span><br><span class="line">insert：执行insert语句</span><br><span class="line">update：执行update语句</span><br><span class="line">delete：执行delete语句</span><br><span class="line">commit：提交事务</span><br><span class="line">rollback：回顾事务</span><br></pre></td></tr></table></figure>



<p>注意SqlSession对象不是线程安全的， 使用的步骤：</p>
<p>①：在方法的内部，执行sql语句之前，先获取SqlSession对象</p>
<p>②：调用SqlSession的方法，执行sql语句</p>
<p>③：关闭SqlSession对象，执行SqlSession.close()</p>
<h2 id="2-4-使用工具类和模版"><a href="#2-4-使用工具类和模版" class="headerlink" title="2.4 使用工具类和模版"></a>2.4 使用工具类和模版</h2><p>1）创建模版，mapper文件模版和mybatis主配置文件模版</p>
<p>创建模版的步骤：</p>
<p><img src="D:/Typora/images/image-20201019094212830.png" alt="image-20201019094212830">    </p>
<p>创建模版文件：</p>
<p><img src="D:/Typora/images/image-20201019094359625.png" alt="image-20201019094359625">    </p>
<p>创建文件选择使用的模版：</p>
<p><img src="D:/Typora/images/image-20201019094616208.png" alt="image-20201019094616208">    </p>
<h1 id="第三章-MyBatis的Dao代理"><a href="#第三章-MyBatis的Dao代理" class="headerlink" title="第三章  MyBatis的Dao代理"></a>第三章  MyBatis的Dao代理</h1><h2 id="3-1-dao代理"><a href="#3-1-dao代理" class="headerlink" title="3.1  dao代理"></a>3.1  dao代理</h2><h3 id="3-1-1-mybatis提供代理："><a href="#3-1-1-mybatis提供代理：" class="headerlink" title="3.1.1 mybatis提供代理："></a>3.1.1 mybatis提供代理：</h3><p> mybatis创建Dao接口的实现类对象， 完成对sql语句的执行。  mybatis创建一个对象代替你的 dao实现类功能。</p>
<h3 id="3-1-2-使用mybatis代理要求"><a href="#3-1-2-使用mybatis代理要求" class="headerlink" title="3.1.2 使用mybatis代理要求"></a>3.1.2 使用mybatis代理要求</h3><p>1）mapper文件中的namespace 一定dao接口的全限定名称</p>
<p>2）mapper文件中 标签的id是dao接口方法名称</p>
<h3 id="3-1-3-mybatis代理实现方式"><a href="#3-1-3-mybatis代理实现方式" class="headerlink" title="3.1.3 mybatis代理实现方式"></a>3.1.3 mybatis代理实现方式</h3><p>使用SqlSession对象的方法 getMapper(dao.class)</p>
<p>例如： 现在有 StudentDao接口。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session  = MyBatisUtils.getSqlSession();</span><br><span class="line">StudentDao dao  = session.getMapper(StudentDao.class);</span><br><span class="line">Student student = dao.selectById(<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码中</span></span><br><span class="line">StudentDao dao  = session.getMapper(StudentDao.class);</span><br><span class="line">等同于</span><br><span class="line">StudentDao dao  = <span class="keyword">new</span> StudentDaoImpl();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-2-理解参数"><a href="#3-2-理解参数" class="headerlink" title="3.2 理解参数"></a>3.2 理解参数</h2><p>理解参数是： 通过java程序把数据传入到mapper文件中的sql语句。 参数主要是指dao接口方法的形参</p>
<h3 id="3-2-1-parameterType"><a href="#3-2-1-parameterType" class="headerlink" title="3.2.1 parameterType"></a>3.2.1 parameterType</h3><p>parameterType:表示参数的类型， 指定dao方法的形参数据类型。 这个形参的数据类型是给mybatis使用。 mybatis在给sql语句的参数赋值时使用。 PreparedStatement.setXXX( 位置， 值) </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">第一个用法： java类型的全限定类型名称   parameterType=&quot;java.lang.Integer&quot;</span><br><span class="line">第二个用法： mybatis定义的java类型的别名  parameterType=&quot;int&quot;</span><br><span class="line"></span><br><span class="line">parameterType：mybatis通过反射机制可以获取 dao接口方法参数的类型， 可以不写(接口那里需要定义integer)</span><br><span class="line">Student selectById(Integer id);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">   select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-dao接口方法是一个简单类型的参数"><a href="#3-2-2-dao接口方法是一个简单类型的参数" class="headerlink" title="3.2.2 dao接口方法是一个简单类型的参数"></a>3.2.2 dao接口方法是一个简单类型的参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao接口的方法形参是一个简单类型的</span></span><br><span class="line"><span class="comment">//简单类型： java基本数据类型和String</span></span><br><span class="line"><span class="function">Student <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   dao接口是一个简单类型的参数</span></span><br><span class="line"><span class="comment">   mapper文件，获取这个参数值，使用#&#123;任意字符&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByEmail&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where email=#&#123;studentEmail&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-dao接口方法有多个简单类型的参数"><a href="#3-2-3-dao接口方法有多个简单类型的参数" class="headerlink" title="3.2.3 dao接口方法有多个简单类型的参数"></a>3.2.3 dao接口方法有多个简单类型的参数</h3><p>@Param: 命名参数， 在方法的形参前面使用的， 定义参数名。  这个名称可以用在mapper文件中。</p>
<p>dao接口，方法的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  多个简单类型的参数</span></span><br><span class="line"><span class="comment">  使用@Param命名参数， 注解是mybatis提供的</span></span><br><span class="line"><span class="comment">  位置：在形参定义的前面</span></span><br><span class="line"><span class="comment">  属性：value 自定义的参数名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByNameOrAge</span><span class="params">(<span class="meta">@Param(&quot;myname&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="meta">@Param(&quot;myage&quot;)</span> Integer age)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   多个简单类型的参数.</span></span><br><span class="line"><span class="comment">   当使用了@Param命名后，例如@Param(&quot;myname&quot;).</span></span><br><span class="line"><span class="comment">   在mapper中，使用#&#123;命名的参数&#125;， 例如 #&#123;myname&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByNameOrAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">parameterType:代替未识别的数据类型</span><br><span class="line">resultType:全限定名称</span><br><span class="line">javaType:java中的数据类型名；实体类中</span><br><span class="line">jdbcType:数据类型名称，数据库</span><br></pre></td></tr></table></figure>



<h3 id="3-2-4-dao接口方法使用一个对象作为参数"><a href="#3-2-4-dao接口方法使用一个对象作为参数" class="headerlink" title="3.2.4 dao接口方法使用一个对象作为参数"></a>3.2.4 dao接口方法使用一个对象作为参数</h3><p>方法的形参是一个java对象。这个java对象表示多个参数。使用对象的属性值作为参数使用</p>
<p>java对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//set|get方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object p1;</span><br><span class="line">    <span class="keyword">private</span> Object p2;</span><br><span class="line">    <span class="comment">//set|get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>dao接口中的方法定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一个java对象作为参数( 对象由属性， 每个属性有set，get方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByObject</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByQueryParam</span><span class="params">(QueryParam param)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   一个java对象作为方法的参数，使用对象的属性作为参数值使用</span></span><br><span class="line"><span class="comment">   简单的语法： #&#123;属性名&#125; ， mybatis调用此属性的getXXX()方法获取属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name=#&#123;name&#125; or age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByQueryParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">     select id,name,email,age from student where name=#&#123;p1&#125; or age=#&#123;p2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--负责的语法格式： #&#123;属性名,javaType=java类型的全限定名称,jdbcType=mybatis中定义列的数据类型&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student where</span><br><span class="line">        name=#&#123;name,javaType=java.lang.String,jdbcType=VARCHAR&#125;</span><br><span class="line">        or</span><br><span class="line">        age=#&#123;age,javaType=java.lang.Integer,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-5-dao接口中多个简单类型的参数，使用位置"><a href="#3-2-5-dao接口中多个简单类型的参数，使用位置" class="headerlink" title="3.2.5 dao接口中多个简单类型的参数，使用位置"></a>3.2.5 dao接口中多个简单类型的参数，使用位置</h3><p><strong>不建议使用，如果修改了项数容易出错，arg0和1也比较模糊</strong></p>
<p>参数位置： dao接口中方法的形参列表，从左往右，参数位置是 0 ， 1， 2……</p>
<p>语法格式：#{arg0} ,#{arg1}</p>
<p>dao接口的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   使用位置，获取参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByPosition</span><span class="params">(String name,Integer age)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   mybatis版本是 3.5.1</span></span><br><span class="line"><span class="comment">   使用位置获取参数值， dao接口方法是多个简单类型的参数</span></span><br><span class="line"><span class="comment">   语法： #&#123;arg0&#125;, #&#123;arg1&#125;....</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPosition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name=#&#123;arg0&#125; or age=#&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-6-dao接口参数是一个Map"><a href="#3-2-6-dao接口参数是一个Map" class="headerlink" title="3.2.6 dao接口参数是一个Map"></a>3.2.6 dao接口参数是一个Map</h3><p>map作为dao接口的参数， 使用 key 获取参数值，mapper文件中，语法格式 #{key}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   使用Map作为参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudentByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   使用Map传递参数，   在mapper文件中，获取map的值，是通过key获取的，语法：#&#123;key&#125;--&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span>     select id,name,email,age from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试，调用方法的位置</p>
<p>key-value方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao  = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用map传递参数</span></span><br><span class="line">    Map&lt;String,Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    data.put(<span class="string">&quot;myname&quot;</span>, <span class="string">&quot;李思思&quot;</span>);</span><br><span class="line">    data.put(<span class="string">&quot;myage&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    List&lt;Student&gt; students = dao.selectStudentByMap(data);</span><br><span class="line"></span><br><span class="line">    students.forEach( stu-&gt; System.out.println(<span class="string">&quot;stu=&quot;</span>+stu));</span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-3-和-的区别"><a href="#3-3-和-的区别" class="headerlink" title="3.3 #和$的区别"></a>3.3 #和$的区别</h2><h3 id="3-3-1-占位符"><a href="#3-3-1-占位符" class="headerlink" title="3.3.1 # 占位符"></a>3.3.1 # 占位符</h3><p>语法： #{字符}</p>
<p>mybatis处理#{} 使用jdbc对象是 PrepareStatment对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mybatis出创建PrepareStatement对象，执行sql语句</span><br><span class="line">String sql=&quot; select id,name,email,age from student where id=?&quot;;</span><br><span class="line">PrepareStatement pst = conn.prepareStatement(sql);</span><br><span class="line">pst.setInt(1,1001);  //传递参数</span><br><span class="line">ResultSet rs  = pst.executeQuery(); //执行sql语句</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>#{}特点：</p>
<p>1）使用的PrepareStatement对象，执行sql语句，效率高。使用时编译一次即可</p>
<p>2）使用的PrepareStatement对象，能避免sql语句， sql语句执行更安全。</p>
<p>3） #{} 常常作为 列<strong>值</strong>使用的， 位于等号的右侧，  #{}位置的值和数据类型有关的。</p>
<h3 id="3-3-2-占位符"><a href="#3-3-2-占位符" class="headerlink" title="3.3.2 $ 占位符"></a>3.3.2 $ 占位符</h3><p>语法 :  ${字符}</p>
<p>mybatis执行${}占位符的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=$&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>	</span><br><span class="line"></span><br><span class="line">$&#123;&#125; 表示字符串连接， 把sql语句的其他内容和 $&#123;&#125;内容使用 字符串（+） 连接的方式连在一起</span><br><span class="line">String sql=&quot;select id,name,email,age from student where id=&quot; + &quot;1001&quot;;</span><br><span class="line"></span><br><span class="line">mybatis创建Statement对象， 执行sql语句。</span><br><span class="line">Statement stmt  = conn.createStatement(sql);</span><br><span class="line">ResultSet rs  = stmt.executeQuery();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>${} 的特点</p>
<p>1）使用Statement对象，执行sql语句，效率低。每次使用都要编译</p>
<p>2）${}占位符的值，使用的字符串连接方式， 有sql注入的风险。 有代码安全的问题</p>
<ol start="3">
<li> ${} 数据是原样使用的， 不会区分数据类型。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">想传字符串“李四”  (&quot;李四&quot;)这样的传过去就是李四，不会辨认数据类型			   (&quot;&#x27;李四&#x27;&quot;) 这样才行</span><br></pre></td></tr></table></figure>



<p>4） ${} 常用作 表名或者列名， 在能保证数据安全的情况下使用 $${}</p>
<h2 id="3-4-封装MyBatis输出结果"><a href="#3-4-封装MyBatis输出结果" class="headerlink" title="3.4 封装MyBatis输出结果"></a>3.4 封装MyBatis输出结果</h2><p>封装输出结果： MyBatis执行sql语句，得到ResultSet, 转为java对象。 </p>
<p>讲两个 resultType, resultMap</p>
<h3 id="3-4-1-resultType"><a href="#3-4-1-resultType" class="headerlink" title="3.4.1 resultType"></a>3.4.1 resultType</h3><p>resultType属性： 在执行select时使用， 作为<select>标签的属性出现的。</select></p>
<p>resultType:表示结果类型 ，  mysql执行sql语句，得到java对象的类型。  它的值有两种</p>
<p>​             1） java类型的全限定名称  。 2）使用别名</p>
<p>1） resultType:表示java自定义对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Student selectById(Integer id);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">resultType:现在使用java类型的全限定名称。 表示的意思 mybatis执行sql，把ResultSet中的数据转为Student类型的对象。  mybatis会做以下操作：</span><br><span class="line">1. 调用com.bjpowernode.domain.Student的无参数构造方法，创建对象。</span><br><span class="line">    Student student = new Student(); //使用反射创建对象</span><br><span class="line">2. 同名的列赋值给同名的属性。</span><br><span class="line">    student.setId( rs.getInt(&quot;id&quot;));</span><br><span class="line">    student.setName(rs.getString(&quot;name&quot;));</span><br><span class="line">3. 得到java对象， 如果dao接口返回值是List集合， mybatis把student对象放入到List集合。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">所以执行 Student mystudent = dao.selectById(1001); 得到 数据库中 id=1001这行数据， </span><br><span class="line">这行数据的列值， 付给了mystudent对象的属性。 你能得到mystudent对象。 就相当于是 id=1001这行数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2）resultType表示简单类型</p>
<p>dao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">countStudent</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  执行sql语句，得到是一个值（一行一列）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">    select count(*) from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3） resultType:表示一个map结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询结果返回是一个Map</span></span><br><span class="line"><span class="function">Map&lt;Object,Object&gt; <span class="title">selectMap</span><span class="params">(<span class="meta">@Param(&quot;stuid&quot;)</span> Integer id)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   执行sql得到一个Map结构数据， mybatis执行sql，把ResultSet转为map</span></span><br><span class="line"><span class="comment">   sql执行结果， 列名做map的key ， 列值作为value</span></span><br><span class="line"><span class="comment">   sql执行得到是一行记录，转为map结构是正确的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   dao接口返回是一个map， sql语句最多能获取一行记录，多余一行是错误，key-value结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.HashMap&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email from student where id != #&#123;stuid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>练习题：</p>
<p> 输入一个省份id ，得到 省份id ，省份name， 城市id，城市名称</p>
<p>例如输入 省份id=1</p>
<p>1 河北  1 石家庄</p>
<p>1 河北   2 秦皇岛</p>
<h3 id="3-4-2-resultMap"><a href="#3-4-2-resultMap" class="headerlink" title="3.4.2 resultMap"></a>3.4.2 resultMap</h3><p>resultMap: 结果映射。 自定义列名和java对象属性的对应关系。 常用在列名和属性名不同的情况。</p>
<p>用法：</p>
<p>1.先定义 resultMap标签， 指定列名和属性名称对应关系</p>
<p>2.在select标签使用resultMap属性，指定上面定义的resultMap的id值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用resultMap定义列和属性的关系--&gt;</span><span class="comment">&lt;!--定义resultMap    id:给resultMap的映射关系起个名称，唯一值    type:java类型的全限定名称--&gt;</span><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;customMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.vo.CustomObject&quot;</span>&gt;</span>    <span class="comment">&lt;!--定义列名和属性名的对应--&gt;</span>    <span class="comment">&lt;!--主键类型使用id标签--&gt;</span>    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span>    <span class="comment">&lt;!--非主键类型使用result标签--&gt;</span>    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> /&gt;</span>    <span class="comment">&lt;!--列名和属性名相同不用定义--&gt;</span>    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span><span class="comment">&lt;!--使用resultMap属性，指定映射关系的id    resultMap和resultType 不能同时使用， 二选一。--&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;customMap&quot;</span>&gt;</span>  select id,name,email,age from student where id=#&#123;stuid&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-5-自定义别名"><a href="#3-5-自定义别名" class="headerlink" title="3.5 自定义别名"></a>3.5 自定义别名</h2><p>mybatis提供的对java类型定义简短，好记名称。</p>
<p>自定义别名的步骤：</p>
<p>1）在mybatis主配置文件，使用 typeAliases标签声明别名</p>
<p>2）在mapper文件中， resultType=”别名”</p>
<p>声明别名（mybatis主配置文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种语法格式</span></span><br><span class="line"><span class="comment">        type:java类型的全限定名称（自定义类型）</span></span><br><span class="line"><span class="comment">        alias:自定义别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>mapper文件中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">resultType=&quot;别名&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id=#&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-6-列名和java对象属性名称不一样解决方式"><a href="#3-6-列名和java对象属性名称不一样解决方式" class="headerlink" title="3.6 列名和java对象属性名称不一样解决方式"></a>3.6 列名和java对象属性名称不一样解决方式</h2><p>1） 使用resultMap： 自定义列名和属性名称对应关系</p>
<p>2）使用resultType:  使用列别名，让别名和java对象属性名称一样</p>
<h2 id="3-7-like"><a href="#3-7-like" class="headerlink" title="3.7 like"></a>3.7 like</h2><p>第一种方式： 在java程序中，把like的内容组装好。 把这个内容传入到sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//like第一种方式</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectLikeOne</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br></pre></td></tr></table></figure>



<p>mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--like第一种方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>执行like</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLikeOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao  = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    String name=<span class="string">&quot;%李%&quot;</span>;</span><br><span class="line">    List&lt;Student&gt; students = dao.selectLikeOne(name);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    students.forEach( stu-&gt; System.out.println(stu));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>第二种方式： 在sql语句，组织like的内容。 </p>
<p>sql语句like的格式：  where name like “%”空格#{name}空格”%”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//like第二种方式</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectLikeTwo</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--like第二种方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where name like &quot;%&quot; #&#123;name&#125; &quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLikeTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao  = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    String name=<span class="string">&quot;李&quot;</span>;</span><br><span class="line">    List&lt;Student&gt; students = dao.selectLikeTwo(name);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    students.forEach( stu-&gt; System.out.println(stu));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="第四章-动态sql"><a href="#第四章-动态sql" class="headerlink" title="第四章 动态sql"></a>第四章 动态sql</h1><p>什么是动态sql： 同一个dao的方法， 根据不同的条件可以表示不同的sql语句， 主要是where部分有变化</p>
<p>使用mybatis提供的标签，实现动态sql的能力，  主要讲 if ，where ，foreach， sql。</p>
<p>使用动态sql的时候， dao方法的形参使用java对象。 </p>
<p>什么时候使用动态sql：</p>
<p><img src="D:/Typora/images/image-20201020114831474.png" alt="image-20201020114831474">    </p>
<h2 id="4-1-if-标签"><a href="#4-1-if-标签" class="headerlink" title="4.1  if 标签"></a>4.1  if 标签</h2><p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;boolean判断结果&quot;</span>&gt;</span></span><br><span class="line">   sql 代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在mapper文件中</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpwoernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">      select *from student</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件&quot;</span>&gt;</span></span><br><span class="line">          sql语句</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件&quot;</span>&gt;</span></span><br><span class="line">          sql语句</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectIf</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--if    test: 使用对象的属性值作为条件--&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span>    select * from student    where id=-1    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span>       or  name = #&#123;name&#125;    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span>        or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;    <span class="tag">&lt;/<span class="name">if</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-2-where-标签"><a href="#4-2-where-标签" class="headerlink" title="4.2 where 标签"></a>4.2 where 标签</h2><p>使用if标签时，容易引起sql语句语法错误。  使用where标签解决if产生的语法问题。</p>
<p>使用时 where ,里面是一个或多个if 标签， 当有一个if标签 判断条件为true，  where标签会转为 WHERE 关键字附加到sql语句的后面。  如果 if 没有一个条件为true ， 忽略where和里面的if。</p>
<p>where标签删除 和他最近的or 或者 and。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">语法：<span class="tag">&lt;<span class="name">where</span>&gt;</span>    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件1&quot;</span>&gt;</span>sql语句1<span class="tag">&lt;/<span class="name">if</span>&gt;</span>    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件2&quot;</span>&gt;</span>sql语句2<span class="tag">&lt;/<span class="name">if</span>&gt;</span><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//whereList&lt;Student&gt; selectWhere(Student student);</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--where--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or  name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span></span><br><span class="line">            or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-3-foreach-循环"><a href="#4-3-foreach-循环" class="headerlink" title="4.3 foreach 循环"></a>4.3 foreach 循环</h2><p>使用foreach可以循环数组，list集合， 一般使用在in语句中。</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt; foreach collection=&quot;集合类型&quot; open=&quot;开始的字符&quot; close=&quot;结束的字符&quot;</span><br><span class="line">          item=&quot;集合中的成员&quot; separator=&quot;集合成员之间的分隔符&quot;&gt;</span><br><span class="line">              #&#123;item 的值&#125;</span><br><span class="line">&lt;/ foreach&gt;</span><br><span class="line"></span><br><span class="line">标签属性：</span><br><span class="line">collection： 表示，循环的对象是 数组， 还是list集合。  如果dao接口方法的形参是 数组， </span><br><span class="line">             collection=&quot;array&quot; ,如果dao接口形参是List， collection=&quot;list&quot;</span><br><span class="line"></span><br><span class="line">open:循环开始时的字符。  sql.append(&quot;(&quot;);</span><br><span class="line">close：循环结束时字符。  sql.append(&quot;)&quot;);</span><br><span class="line">item：集合成员， 自定义的变量。   Integer item  = idlist.get(i);// item是集合成员</span><br><span class="line">separator：集合成员之间的分隔符。  sql.append(&quot;,&quot;); //集合成员之间的分隔符</span><br><span class="line">#&#123;item 的值&#125;：获取集合成员的值。</span><br></pre></td></tr></table></figure>



<p>第一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach-1</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectForeachOne</span><span class="params">(List&lt;Integer&gt; idlist)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--foreach第一种方式， 循环简单类型的List--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectForeachOne&quot;</span> resultType=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span><br><span class="line">      select * from student</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;list !=null and list.size&gt;0&quot;</span>&gt;</span><br><span class="line">            where id in</span><br><span class="line">            &lt;foreach collection=<span class="string">&quot;list&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span> separator=<span class="string">&quot;,&quot;</span> item=<span class="string">&quot;myid&quot;</span>&gt;</span><br><span class="line">                  #&#123;myid&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectForeachOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSession</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">//2.获取dao的代理</span></span><br><span class="line">        StudentDao dao = session.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; idlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        idlist.add(<span class="number">1001</span>);</span><br><span class="line">        idlist.add(<span class="number">1002</span>);</span><br><span class="line">        idlist.add(<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students  = dao.selectForeachOne(idlist);</span><br><span class="line"></span><br><span class="line">        students.forEach( stu-&gt; System.out.println(<span class="string">&quot;stu==&quot;</span>+stu));</span><br><span class="line">        <span class="comment">//3.关闭SqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>第二种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach-2</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectForeachTwo</span><span class="params">(List&lt;Student&gt; studentList)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;!--foreach第二种方式， 循环的List&lt;Student&gt;--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectForeachTwo&quot;</span> resultType=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span><br><span class="line">        select * from student</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;list != null and list.size&gt;0&quot;</span>&gt;</span><br><span class="line">            where id in</span><br><span class="line">            &lt;foreach collection=<span class="string">&quot;list&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span> separator=<span class="string">&quot;,&quot;</span> item=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">                  #&#123;stu.id&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">            </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectForeachTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSession</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">//2.获取dao的代理</span></span><br><span class="line">        StudentDao dao = session.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setId(<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setId(<span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students  = dao.selectForeachTwo(list);</span><br><span class="line"></span><br><span class="line">        students.forEach( stu-&gt; System.out.println(<span class="string">&quot;stu==&quot;</span>+stu));</span><br><span class="line">        <span class="comment">//3.关闭SqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure>

<h2 id="4-4-sql标签"><a href="#4-4-sql标签" class="headerlink" title="4.4 sql标签"></a>4.4 sql标签</h2><p>sql标签标示 一段sql代码， 可以是表名，几个字段， where条件都可以， 可以在其他地方复用sql标签的内容。</p>
<p>使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1) 在mapper文件中定义 sql代码片段 <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;唯一字符串&quot;</span>&gt;</span>  部分sql语句  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">2）在其他的位置，使用include标签引用某个代码片段</span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义代码片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;studentFieldList&quot;</span>&gt;</span></span><br><span class="line">    id,name,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectStudent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        where id=-1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">           or  name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span></span><br><span class="line">            or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--where--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;studentFieldList&quot;</span>/&gt;</span> from student</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                or  name = #&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt;0&quot;</span>&gt;</span></span><br><span class="line">                or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="第五章-MyBatis配置文件"><a href="#第五章-MyBatis配置文件" class="headerlink" title="第五章 MyBatis配置文件"></a>第五章 MyBatis配置文件</h1><p>mybatis配置文件两大类： 1 mybatis主配置文件； 2 mybatis的mapper文件</p>
<ol>
<li>mybatis主配置文件，提供mybatis全局设置的。包含的内容 日志， 数据源，mapper文件位置</li>
<li>mapper文件： 写sql语句的。 一个表一个mapper文件</li>
</ol>
<h2 id="5-1-settings部分"><a href="#5-1-settings部分" class="headerlink" title="5.1 settings部分"></a>5.1 settings部分</h2><p>settings是mybatis的全局设置，影响整个mybatis的运行。 这个设置一般使用默认值就可以了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-typeAliase-别名"><a href="#5-2-typeAliase-别名" class="headerlink" title="5.2 typeAliase 别名"></a>5.2 typeAliase 别名</h2><p>设置别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--第一种语法格式</span></span><br><span class="line"><span class="comment">           type:java类型的全限定名称（自定义类型）</span></span><br><span class="line"><span class="comment">           alias:自定义别名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           优点： 别名可以自定义</span></span><br><span class="line"><span class="comment">           缺点： 每个类型必须单独定义</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.vo.QueryParam&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;qp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--第二种方式</span></span><br><span class="line"><span class="comment">           name:包名， mybatis会把这个包中所有类名作为别名（不用区分大小写）</span></span><br><span class="line"><span class="comment">           优点：使用方便，一次给多个类定义别名</span></span><br><span class="line"><span class="comment">           缺点: 别名不能自定义，必须是类名。</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.domain&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.vo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-3-配置环境"><a href="#5-3-配置环境" class="headerlink" title="5.3 配置环境"></a>5.3 配置环境</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">environments: 环境标签， 在他里面可以配置多个environment</span><br><span class="line">       属性： default ，必须是某个environment的id属性值。 表示mybatis默认连接的数据库</span><br><span class="line">environment： 表示一个数据库的连接信息。</span><br><span class="line">       属性： id 自定义的环境的标识。 唯一值。</span><br><span class="line">transactionManager：事务管理器</span><br><span class="line">       属性：  type 表示事务管理器的类型。</span><br><span class="line">       属性值：1）JDBC: 使用Connection对象， 由mybatis自己完成事务的处理。</span><br><span class="line">             2） MANAGED: 管理，表示把事务的处理交给容器实现（由其他软件完成事务的提交，回滚）</span><br><span class="line">dataSource： 数据源，创建的Connection对象，连接数据库。</span><br><span class="line">       属性：  type 数据源的类型</span><br><span class="line">       属性值：1） POOLED， mybatis会在内存中创建PooledDataSource类，管理多个Connection连接对象，使                           用的连接池</span><br><span class="line">             2） UNPOOLED ，不使用连接池， mybatis创建一个UnPooledDataSource这个类， 每次执行sql                           语句先创建Connection对象，再执行sql语句，最后关闭Connection</span><br><span class="line">             3) JNDI : java的命名和目录服务。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;online&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源： 创建Connection对象。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver:驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目上线后使用的数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;online&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源： 创建Connection对象。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver:驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-4-使用数据库属性配置文件（-）"><a href="#5-4-使用数据库属性配置文件（-）" class="headerlink" title="5.4 使用数据库属性配置文件（*）"></a>5.4 使用数据库属性配置文件（*）</h2><p>需要把数据库的配置信息放到一个单独文件中， 独立管理。 这个文件扩展名是 properties. 在这个文件中，使用自定义的key=value的格式表示数据</p>
<p>使用步骤：</p>
<p>1.在resources目录中，创建xxxx.properties</p>
<p>2.在文件中，使用 key=value的格式定义数据。</p>
<p>   例如 jdbc.url=jdbc:mysq://localhost:3306/springdb</p>
<p>3.在mybatis主配置文件， 使用properties标签引用外部的属性配置文件</p>
<p>4.在使用值的位置， 使用${key}获取key对应的value（等号右侧的值）</p>
<p>例子：</p>
<p>jdbc.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/springdb?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure>



<p>mybatis主配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用外部属性配置文件</span></span><br><span class="line"><span class="comment">    resource:指定类路径下的某个属性配置文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源： 创建Connection对象。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver:驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5-mapper-标签"><a href="#5-5-mapper-标签" class="headerlink" title="5.5 mapper 标签(*)"></a>5.5 mapper 标签(*)</h2><p>使用mapper指定其他mapper文件的位置， </p>
<p>mapper标签使用的格式有两个常用的方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>    <span class="comment">&lt;!--第一种方式， resources=&quot;mapper文件的路径&quot;        优点：文件清晰。 加载的文件是明确的。              文件的位置比较灵活。        缺点：文件比较多， 代码量会比较大， 管理难度大    --&gt;</span>    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bjpowernode/dao/StudentDao.xml&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bjpowernode/dao/OrderDao.xml&quot;</span>/&gt;</span>    <span class="comment">&lt;!--       第二种方式，使用&lt;package&gt;       name:包名， mapper文件所在的包名。       特点： 把这个包中的所有mapper文件，一次加载。       使用要求：        1. mapper文件和dao接口在同一目录        2. mapper文件和dao接口名称完全一样。    --&gt;</span>    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.dao1&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="第六章-PageHelper"><a href="#第六章-PageHelper" class="headerlink" title="第六章 PageHelper"></a>第六章 PageHelper</h1><p>PageHelper做数据分页。 在你的select语句后面加入 分页的 sql 内容， 如果你使用的mysql数据库， 它就是在select * from student 后面加入 limit 语句。</p>
<p>使用步骤：</p>
<p>1.加入依赖pagehelper依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.在mybatis主配置文件， 加入plugin声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">environments</span>&gt;</span> 之前加入<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>   <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span> =<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>    </span><br></pre></td></tr></table></figure>



<p>3.在select语句之前，调用PageHelper.startPage(页码， 每页大小)</p>
<p>对比：</p>
<p>没有使用PageHelper</p>
<p>select * from student order by id</p>
<p>使用PageHelper</p>
<p>SELECT count(0) FROM student </p>
<p>select * from student order by id LIMIT ? </p>]]></content>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2021/10/26/SpringBoot/</url>
    <content><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">详细参照微服务文档</a></p>
<h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/">http://www.gulixueyuan.com/</a> 谷粒学院</p>
<p>环境约束</p>
<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>
<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>
<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>
<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>
<p>统一环境；</p>
<h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p>
<p>![idea设置](../../../../../Program Files/Typora/images/搜狗截图20180129151045.png)</p>
<p>![images/](../../../../../Program Files/Typora/images/搜狗截图20180129151112.png)</p>
<h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
<h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter</strong>-==web==：</p>
<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>
<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>
<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>
<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>

<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>
<p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>
<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>​        给容器中导入组件？</p>
<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        ![自动配置类](../../../../../Program Files/Typora/images/搜狗截图20180129224104.png)</p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>
<p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>
<p>​        </p>
<p>==Spring注解版（谷粒学院）==</p>
<h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>
<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>
<p>默认生成的Spring Boot项目；</p>
<ul>
<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>
<li>resources文件夹中目录结构<ul>
<li>static：保存所有的静态资源； js css  images；</li>
<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>
<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr>
<h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<p>•application.properties</p>
<p>•application.yml</p>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup Language）</p>
<p>​    YAML  A Markup Language：是一个标记语言</p>
<p>​    YAML   isn’t Markup Language：不是一个标记语言；</p>
<p>标记语言：</p>
<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>
<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>
<p>​    YAML：配置例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>​    XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感；</p>
<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p>
<p>​        字符串默认不用加上单引号或者双引号；</p>
<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p>
<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p>
<h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>
<p>​        对象还是k: v的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">lastName:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>



<h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>



<h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>
<p>![idea配置乱码](../../../../../Program Files/Typora/images/搜狗截图20180130161620.png)</p>
<h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;person&quot;)默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>



<p>不来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.springboot.service.HelloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类**@Configuration**——&gt;Spring配置文件</p>
<p>2、使用**@Bean**给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类@Bean给容器中添加组件了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##4、配置文件占位符</p>
<h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>



<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>





<h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>
<p>​    2、命令行：</p>
<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>
<p>​        可以直接在测试的时候，配置传入命令行参数</p>
<p>​    3、虚拟机参数；</p>
<p>​        -Dspring.profiles.active=dev</p>
<h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/</p>
<p>–file:./</p>
<p>–classpath:/config/</p>
<p>–classpath:/</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>
<h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； –配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>
<p>==<strong>优先加载带profile</strong>==</p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p>==<strong>再来加载不带profile</strong>==</p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p>
<h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p>
<h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p>
</li>
<li><p>可以查看selectImports()方法的内容；</p>
</li>
<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</String></p>
<ul>
<li>```java<br>SpringFactoriesLoader.loadFactoryNames()<br>扫描所有jar包类路径下  META-INF/spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**</span><br><span class="line"></span><br><span class="line">```properties</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span>  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span>  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span>  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>





<p><strong>精髓：</strong></p>
<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>
<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>
<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>
<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>
<p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p>**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> &#x27;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&#x27;</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes &#x27;org.aspectj.lang.annotation.Aspect&#x27;, &#x27;org.aspectj.lang.reflect.Advice&#x27; <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br></pre></td></tr></table></figure>





<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>
<p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p>
<p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p>
<p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p>
<p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p>
<p>​        5、JDBC—数据库驱动；</p>
<p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p>
<p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p>
<p><strong>市面上的日志框架；</strong></p>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>
<p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p>
<h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图示；</p>
<p>![images/concrete-bindings.png](../../../../../Program Files/Typora/images/concrete-bindings.png)</p>
<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>
<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>
<p>![](../../../../../Program Files/Typora/images/legacy.png)</p>
<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>==1、将系统中其他日志框架先排除出去；==</p>
<p>==2、用中间包来替换原有的日志框架；==</p>
<p>==3、我们导入slf4j其他的实现==</p>
<h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>SpringBoot使用它来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>底层依赖关系</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180131220946.png)</p>
<p>总结：</p>
<p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
<p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p>
<p>​    3）、中间替换包？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">&quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180131221411.png)</p>
<p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>
<p>​            Spring框架用的是commons-logging；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p>
<h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器	Logger logger = LoggerFactory.getLogger(getClass());	@Test	public void contextLoads() &#123;		//System.out.println();		//日志的级别；		//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error		//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效		logger.trace(&quot;这是trace日志...&quot;);		logger.debug(&quot;这是debug日志...&quot;);		//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别		logger.info(&quot;这是info日志...&quot;);		logger.warn(&quot;这是warn日志...&quot;);		logger.error(&quot;这是error日志...&quot;);	&#125;</span></span><br></pre></td></tr></table></figure>



<pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n
</code></pre>
<p>SpringBoot修改日志的默认配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace#logging.path=# 不指定路径在当前项目下生成springboot.log日志# 可以指定完整的路径；#logging.file=G:/springboot.log# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件logging.path=/spring/log#  在控制台输出的日志的格式logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n# 指定文件中日志输出的格式logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;staging&quot;</span>&gt;</span>    <span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span>  	可以指定某段配置只在某个环境下生效<span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="comment">&lt;!--        日志输出格式：			%d表示日期时间，			%thread表示线程名，			%-5level：级别从左显示5个字符宽度			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 			%msg：日志消息，			%n是换行符        --&gt;</span>        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span>            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!dev&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span>        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span>    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<p> <code>no applicable action for [springProfile]</code></p>
<h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>切换为log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p>
<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>
<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>
<p><strong>3）、自己编写业务代码；</strong></p>
<p><strong>自动配置原理？</strong></p>
<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure>



<h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebMvcAuotConfiguration：		<span class="meta">@Override</span>		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;			<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;				logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);				<span class="keyword">return</span>;			&#125;			Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();			<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;				customizeResourceHandlerRegistration(						registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)								.addResourceLocations(										<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)						.setCachePeriod(cachePeriod));			&#125;			String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();          	<span class="comment">//静态资源文件夹映射			if (!registry.hasMappingForPattern(staticPathPattern)) &#123;				customizeResourceHandlerRegistration(						registry.addResourceHandler(staticPathPattern)								.addResourceLocations(										this.resourceProperties.getStaticLocations())						.setCachePeriod(cachePeriod));			&#125;		&#125;        //配置欢迎页映射		@Bean		public WelcomePageHandlerMapping welcomePageHandlerMapping(				ResourceProperties resourceProperties) &#123;			return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),					this.mvcProperties.getStaticPathPattern());		&#125;       //配置喜欢的图标		@Configuration		@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)		public static class FaviconConfiguration &#123;			private final ResourceProperties resourceProperties;			public FaviconConfiguration(ResourceProperties resourceProperties) &#123;				this.resourceProperties = resourceProperties;			&#125;			@Bean			public SimpleUrlHandlerMapping faviconHandlerMapping() &#123;				SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();				mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);              	//所有  **/favicon.ico 				mapping.setUrlMap(Collections.singletonMap(&quot;**/favicon.ico&quot;,						faviconRequestHandler()));				return mapping;			&#125;			@Bean			public ResourceHttpRequestHandler faviconRequestHandler() &#123;				ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();				requestHandler						.setLocations(this.resourceProperties.getFaviconLocations());				return requestHandler;			&#125;		&#125;</span></span><br></pre></td></tr></table></figure>



<p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p>
<p>​    webjars：以jar包的方式引入静态资源；</p>
<p><a href="http://www.webjars.org/">http://www.webjars.org/</a></p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180203181751.png)</p>
<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>

<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>
<p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p>
<p>​    localhost:8080/   找index页面</p>
<p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p>
<h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<p>![](../../../../../Program Files/Typora/images/template-engine.png)</p>
<p>SpringBoot推荐的Thymeleaf；</p>
<p>语法更简单，功能更强大；</p>
<h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>          	2.1.6		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>切换thymeleaf版本<span class="tag">&lt;<span class="name">properties</span>&gt;</span>		<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span>		<span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span>		<span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span>		<span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">&quot;text/html&quot;</span>);	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;  	<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>
<p>使用：</p>
<p>1、导入thymeleaf的名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、使用thymeleaf语法；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>
<p>​    th：任意html属性；来替换原生属性的值</p>
<p>![](../../../../../Program Files/Typora/images/2018-02-04_123955.png)</p>
<p>2）、表达式？</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:（表达式语法）    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；    		1）、获取对象的属性、调用方法    		2）、使用内置的基本对象：    			#ctx : the context object.    			#vars: the context variables.                #locale : the context locale.                #request : (only in Web Contexts) the HttpServletRequest object.                #response : (only in Web Contexts) the HttpServletResponse object.                #session : (only in Web Contexts) the HttpSession object.                #servletContext : (only in Web Contexts) the ServletContext object.                                $&#123;session.foo&#125;            3）、内置的一些工具对象：#execInfo : information about the template being processed.#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.#uris : methods for escaping parts of URLs/URIs#conversions : methods for executing the configured conversion service (if any).#dates : methods for java.util.Date objects: formatting, component extraction, etc.#calendars : analogous to #dates , but for java.util.Calendar objects.#numbers : methods for formatting numeric objects.#strings : methods for String objects: contains, startsWith, prepending/appending, etc.#objects : methods for objects in general.#bools : methods for boolean evaluation.#arrays : methods for arrays.#lists : methods for lists.#sets : methods for sets.#maps : methods for maps.#aggregates : methods for creating aggregates on arrays or collections.#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；    	补充：配合 th:object=&quot;$&#123;session.user&#125;：   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;    &lt;/div&gt;        Message Expressions: #&#123;...&#125;：获取国际化内容    Link URL Expressions: @&#123;...&#125;：定义URL；    		@&#123;/order/process(execId=$&#123;execId&#125;,execType=&#x27;FAST&#x27;)&#125;    Fragment Expressions: ~&#123;...&#125;：片段引用表达式    		&lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;    		Literals（字面量）      Text literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…      Number literals: 0 , 34 , 3.0 , 12.3 ,…      Boolean literals: true , false      Null literal: null      Literal tokens: one , sometext , main ,…Text operations:（文本操作）    String concatenation: +    Literal substitutions: |The name is $&#123;name&#125;|Arithmetic operations:（数学运算）    Binary operators: + , - , * , / , %    Minus sign (unary operator): -Boolean operations:（布尔运算）    Binary operators: and , or    Boolean negation (unary operator): ! , notComparisons and equality:（比较运算）    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )    Equality operators: == , != ( eq , ne )Conditional operators:条件运算（三元运算符）    If-then: (if) ? (then)    If-then-else: (if) ? (then) : (else)    Default: (value) ?: (defaultvalue)Special tokens:    No-Operation: _ </span></span><br></pre></td></tr></table></figure>

<h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>
<h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>
<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>
<li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>
</li>
<li><p>Static <code>index.html</code> support. 静态首页访问</p>
</li>
<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>
</li>
<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>
<ul>
<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>
<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class="comment">//在文件中配置日期格式化的规则		public Formatter&lt;Date&gt; dateFormatter() &#123;			return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件		&#125;</span></span><br></pre></td></tr></table></figure>

<p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p>
<ul>
<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>
<ul>
<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>
</li>
<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>
<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>
</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>
<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化WebDataBinder；请求数据=====JavaBean；</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>
<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
<h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span>            <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p>
<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>
<p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;      <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();	 <span class="comment">//从容器中获取所有的WebMvcConfigurer      @Autowired(required = false)      public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) &#123;          if (!CollectionUtils.isEmpty(configurers)) &#123;              this.configurers.addWebMvcConfigurers(configurers);            	//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；              	@Override             // public void addViewControllers(ViewControllerRegistry registry) &#123;              //    for (WebMvcConfigurer delegate : this.delegates) &#123;               //       delegate.addViewControllers(registry);               //   &#125;              &#125;          &#125;	&#125;</span></span><br></pre></td></tr></table></figure>

<p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>
<p>​    4）、我们的配置类也会被调用；</p>
<p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>
<h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>
<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@EnableWebMvc@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>为什么@EnableWebMvc自动配置就失效了；</p>
<p>1）@EnableWebMvc的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure>

<p>2）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,		WebMvcConfigurerAdapter.class &#125;)</span><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,		ValidationAutoConfiguration.class &#125;)public class WebMvcAutoConfiguration &#123;</span></span><br></pre></td></tr></table></figure>

<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>
<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>
<h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>
<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>
<p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>
<p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>
<h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能//@EnableWebMvc   不要接管SpringMVC@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123;    @Override    public void addViewControllers(ViewControllerRegistry registry) &#123;       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    &#125;    //所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123;        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() &#123;            @Override            public void addViewControllers(ViewControllerRegistry registry) &#123;                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);            &#125;        &#125;;        return adapter;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>
<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>
<p>3）、在页面使用fmt:message取出国际化内容</p>
<p>步骤：</p>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180211130721.png)</p>
<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;        <span class="comment">/**	 * Comma-separated list of basenames (essentially a fully-qualified classpath	 * location), each following the ResourceBundle convention with relaxed support for	 * slash based locations. If it doesn&#x27;t contain a package qualifier (such as	 * &quot;org.mypackage&quot;), it will be resolved from the classpath root.	 */</span>	<span class="keyword">private</span> String basename = <span class="string">&quot;messages&quot;</span>;      <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；        @Bean	public MessageSource messageSource() &#123;		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();		if (StringUtils.hasText(this.basename)) &#123;            //设置国际化资源文件的基础名（去掉语言国家代码的）			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(					StringUtils.trimAllWhitespace(this.basename)));		&#125;		if (this.encoding != null) &#123;			messageSource.setDefaultEncoding(this.encoding.name());		&#125;		messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);		messageSource.setCacheSeconds(this.cacheSeconds);		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);		return messageSource;	&#125;</span></span><br></pre></td></tr></table></figure>



<p>3）、去页面获取国际化的值；</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180211134506.png)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>	<span class="tag">&lt;<span class="name">head</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span>		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span>		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/bootstrap.min.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span>		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span>		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/signin.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span>	<span class="tag">&lt;/<span class="name">head</span>&gt;</span>	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span>			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span>			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span>			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span>				<span class="tag">&lt;<span class="name">label</span>&gt;</span>          		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span>/&gt;</span> [[#&#123;login.remember&#125;]]        <span class="tag">&lt;/<span class="name">label</span>&gt;</span>			<span class="tag">&lt;/<span class="name">div</span>&gt;</span>			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span>			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span>			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span>			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span>		<span class="tag">&lt;/<span class="name">form</span>&gt;</span>	<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：根据浏览器语言设置的信息切换了国际化；</p>
<p>原理：</p>
<p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>		<span class="meta">@ConditionalOnMissingBean</span>		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span>		<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;			<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;				<span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());			&#125;			AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();			localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());			<span class="keyword">return</span> localeResolver;		&#125;默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>

<p>4）、点击链接切换国际化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 可以在连接上携带区域信息 */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;        <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;        String l = request.getParameter(<span class="string">&quot;l&quot;</span>);        Locale locale = Locale.getDefault();        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;            String[] split = l.split(<span class="string">&quot;_&quot;</span>);            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);        &#125;        <span class="keyword">return</span> locale;    &#125;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;    &#125;&#125; <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>
<p>1）、禁用模板引擎的缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 禁用缓存spring.thymeleaf.cache=false </span><br></pre></td></tr></table></figure>

<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>
<p>登陆错误消息的显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 登陆检查， */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;    <span class="comment">//目标方法执行之前    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        Object user = request.getSession().getAttribute(&quot;loginUser&quot;);        if(user == null)&#123;            //未登陆，返回登陆页面            request.setAttribute(&quot;msg&quot;,&quot;没有权限请先登陆&quot;);            request.getRequestDispatcher(&quot;/index.html&quot;).forward(request,response);            return false;        &#125;else&#123;            //已登陆，放行请求            return true;        &#125;    &#125;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>



<p>注册拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123;        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() &#123;            @Override            public void addViewControllers(ViewControllerRegistry registry) &#123;                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;);            &#125;            //注册拦截器            @Override            public void addInterceptors(InterceptorRegistry registry) &#123;                //super.addInterceptors(registry);                //静态资源；  *.css , *.js                //SpringBoot已经做好了静态资源映射                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(&quot;/**&quot;)                        .excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;);            &#125;        &#125;;        return adapter;    &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>
<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
<p>2）、实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p>3）、员工列表：</p>
<h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、抽取公共片段<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span>2、引入公共片段<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>~&#123;templatename::selector&#125;：模板名::选择器~&#123;templatename::fragmentname&#125;:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>



<p>三种引入公共片段的th属性：</p>
<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span>引入方式<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>效果<span class="tag">&lt;<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>引入片段的时候传入参数： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span>                   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>                   <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span>                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-home&quot;</span>&gt;</span>                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span>                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span>                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span>                <span class="tag">&lt;/<span class="name">a</span>&gt;</span>            <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan@atguigu.com&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交的数据格式不对：生日：日期；</p>
<p>2017-12-12；2017/12/12；2017.12.12；</p>
<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>
<p>2017-12-12—Date； 类型转换，格式化;</p>
<p>默认日期是按照/的方式；</p>
<h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span>    <span class="comment">&lt;!--1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）2、页面创建一个post表单3、创建一个input项，name=&quot;_method&quot;;值就是我们指定的请求方式--&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan@atguigu.com&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="comment">&lt;!--提交的是部门的id--&gt;</span>        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;depts&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender&#125;==0?&#x27;女&#x27;:&#x27;男&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span>        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    $(<span class="string">&quot;.deleteBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        <span class="comment">//删除当前员工的        $(&quot;#deleteEmpForm&quot;).attr(&quot;action&quot;,$(this).attr(&quot;del_uri&quot;)).submit();        return false;    &#125;);</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>
<p>​        1）、浏览器，返回一个默认的错误页面</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180226173408.png)</p>
<p>  浏览器发送请求的请求头：</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180226180347.png)</p>
<p>​        2）、如果是其他客户端，默认响应一个json数据</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180226173527.png)</p>
<p>​        ![](../../../../../Program Files/Typora/images/搜狗截图20180226180504.png)</p>
<p>原理：</p>
<p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>
<pre><code>  给容器中添加了以下组件
</code></pre>
<p>​    1、DefaultErrorAttributes：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">帮我们在页面共享信息；<span class="meta">@Override</span>	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,			<span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;		Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();		errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());		addStatus(errorAttributes, requestAttributes);		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);		addPath(errorAttributes, requestAttributes);		<span class="keyword">return</span> errorAttributes;	&#125;</span><br></pre></td></tr></table></figure>



<p>​    2、BasicErrorController：处理默认/error请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;        <span class="meta">@RequestMapping(produces = &quot;text/html&quot;)</span><span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理	public ModelAndView errorHtml(HttpServletRequest request,			HttpServletResponse response) &#123;		HttpStatus status = getStatus(request);		Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));		response.setStatus(status.value());                //去哪个页面作为错误页面；包含页面地址和页面内容		ModelAndView modelAndView = resolveErrorView(request, response, status, model);		return (modelAndView == null ? new ModelAndView(&quot;error&quot;, model) : modelAndView);	&#125;	@RequestMapping	@ResponseBody    //产生json数据，其他客户端来到这个方法处理；	public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;		Map&lt;String, Object&gt; body = getErrorAttributes(request,				isIncludeStackTrace(request, MediaType.ALL));		HttpStatus status = getStatus(request);		return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);	&#125;</span></span><br></pre></td></tr></table></figure>



<p>​    3、ErrorPageCustomizer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span>	<span class="keyword">private</span> String path = <span class="string">&quot;/error&quot;</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>



<p>​    4、DefaultErrorViewResolver：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,			Map&lt;String, Object&gt; model)</span> </span>&#123;		ModelAndView modelAndView = resolve(String.valueOf(status), model);		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);		&#125;		<span class="keyword">return</span> modelAndView;	&#125;	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404		String errorViewName = &quot;error/&quot; + viewName;                //模板引擎可以解析这个页面地址就用模板引擎解析		TemplateAvailabilityProvider provider = this.templateAvailabilityProviders				.getProvider(errorViewName, this.applicationContext);		if (provider != null) &#123;            //模板引擎可用的情况下返回到errorViewName指定的视图地址			return new ModelAndView(errorViewName, model);		&#125;        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html		return resolveResource(errorViewName, model);	&#125;</span></span><br></pre></td></tr></table></figure>



<p>​    步骤：</p>
<p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>
<p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;    <span class="comment">//所有的ErrorViewResolver得到ModelAndView   for (ErrorViewResolver resolver : this.errorViewResolvers) &#123;      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);      if (modelAndView != null) &#123;         return modelAndView;      &#125;   &#125;   return null;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>
<p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p>
<p>​            页面能获取的信息；</p>
<p>​                timestamp：时间戳</p>
<p>​                status：状态码</p>
<p>​                error：错误提示</p>
<p>​                exception：异常对象</p>
<p>​                message：异常消息</p>
<p>​                errors：JSR303数据校验的错误都在这里</p>
<p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>
<p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>
<h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvicepublic</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;    <span class="meta">@ResponseBody</span>    <span class="meta">@ExceptionHandler(UserNotExistException.class)</span>    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);        map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());        <span class="keyword">return</span> map;    &#125;&#125;<span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>



<p>​        2）、转发到/error进行自适应响应效果处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(UserNotExistException.class)</span>    <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程        /**         * Integer statusCode = (Integer) request         .getAttribute(&quot;javax.servlet.error.status_code&quot;);         */        request.setAttribute(&quot;javax.servlet.error.status_code&quot;,500);        map.put(&quot;code&quot;,&quot;user.notexist&quot;);        map.put(&quot;message&quot;,e.getMessage());        //转发到/error        return &quot;forward:/error&quot;;    &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>
<p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>
<p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>
<p>自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes@Componentpublic class MyErrorAttributes extends DefaultErrorAttributes &#123;    @Override    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) &#123;        Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace);        map.put(&quot;company&quot;,&quot;atguigu&quot;);        return map;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180228135513.png)</p>
<h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180301142915.png)</p>
<p>问题？</p>
<h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081server.context-path=/crudserver.tomcat.uri-encoding=UTF-8//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>

<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer()&#123;    return new EmbeddedServletContainerCustomizer() &#123;        //定制嵌入式的Servlet容器相关的规则        @Override        public void customize(ConfigurableEmbeddedServletContainer container) &#123;            container.setPort(8083);        &#125;    &#125;;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<p>ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册三大组件@Beanpublic ServletRegistrationBean myServlet()&#123;    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),&quot;/myServlet&quot;);    return registrationBean;&#125;</span></span><br></pre></td></tr></table></figure>

<p>FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/myServlet&quot;</span>));    <span class="keyword">return</span> registrationBean;&#125;</span><br></pre></td></tr></table></figure>

<p>ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());    <span class="keyword">return</span> registrationBean;&#125;</span><br></pre></td></tr></table></figure>



<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>
<p>DispatcherServletAutoConfiguration中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(      DispatcherServlet dispatcherServlet)</span> </span>&#123;   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径       registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);   registration.setLoadOnStartup(         this.webMvcProperties.getServlet().getLoadOnStartup());   if (this.multipartConfig != null) &#123;      registration.setMultipartConfig(this.multipartConfig);   &#125;   return registration;&#125;</span></span><br></pre></td></tr></table></figure>

<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>
<h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p>![](../../../../../Program Files/Typora/images/搜狗截图20180302114401.png)</p>
<p>默认支持：</p>
<p>Tomcat（默认使用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Jetty</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Undertow</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span><span class="meta">@Import(BeanPostProcessorsRegistrar.class)</span><span class="comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作public class EmbeddedServletContainerAutoConfiguration &#123;        @Configuration	@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)//判断当前是否引入了Tomcat依赖；	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器	public static class EmbeddedTomcat &#123;		@Bean		public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() &#123;			return new TomcatEmbeddedServletContainerFactory();		&#125;	&#125;        /**	 * Nested configuration if Jetty is being used.	 */	@Configuration	@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class,			WebAppContext.class &#125;)	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)	public static class EmbeddedJetty &#123;		@Bean		public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() &#123;			return new JettyEmbeddedServletContainerFactory();		&#125;	&#125;	/**	 * Nested configuration if Undertow is being used.	 */	@Configuration	@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)	public static class EmbeddedUndertow &#123;		@Bean		public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() &#123;			return new UndertowEmbeddedServletContainerFactory();		&#125;	&#125;</span></span><br></pre></td></tr></table></figure>

<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;   <span class="comment">//获取嵌入式的Servlet容器   EmbeddedServletContainer getEmbeddedServletContainer(         ServletContextInitializer... initializers);&#125;</span></span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180302144835.png)</p>
<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180302144910.png)</p>
<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Overridepublic</span> <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(      ServletContextInitializer... initializers)</span> </span>&#123;    <span class="comment">//创建一个Tomcat   Tomcat tomcat = new Tomcat();        //配置Tomcat的基本环节   File baseDir = (this.baseDirectory != null ? this.baseDirectory         : createTempDir(&quot;tomcat&quot;));   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = new Connector(this.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(false);   configureEngine(tomcat.getEngine());   for (Connector additionalConnector : this.additionalTomcatConnectors) &#123;      tomcat.getService().addConnector(additionalConnector);   &#125;   prepareContext(tomcat.getHost(), initializers);        //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器   return getTomcatEmbeddedServletContainer(tomcat);&#125;</span></span><br></pre></td></tr></table></figure>

<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>



<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>
<p>怎么修改的原理？</p>
<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化之前@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName)      throws BeansException &#123;    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件   if (bean instanceof ConfigurableEmbeddedServletContainer) &#123;       //      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);   &#125;   return bean;&#125;private void postProcessBeforeInitialization(			ConfigurableEmbeddedServletContainer bean) &#123;    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;        customizer.customize(bean);    &#125;&#125;private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() &#123;    if (this.customizers == null) &#123;        // Look up does not include the parent context        this.customizers = new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(            this.beanFactory            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件            .getBeansOfType(EmbeddedServletContainerCustomizer.class,                            false, false)            .values());        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);        this.customizers = Collections.unmodifiableList(this.customizers);    &#125;    return this.customizers;&#125;ServerProperties也是定制器</span></span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>
<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>
<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>
<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>
<p>###5）、嵌入式Servlet容器启动原理；</p>
<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>
<p>获取嵌入式的Servlet容器工厂：</p>
<p>1）、SpringBoot应用启动运行run方法</p>
<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>
<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;      <span class="comment">// Prepare this context for refreshing.      prepareRefresh();      // Tell the subclass to refresh the internal bean factory.      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();      // Prepare the bean factory for use in this context.      prepareBeanFactory(beanFactory);      try &#123;         // Allows post-processing of the bean factory in context subclasses.         postProcessBeanFactory(beanFactory);         // Invoke factory processors registered as beans in the context.         invokeBeanFactoryPostProcessors(beanFactory);         // Register bean processors that intercept bean creation.         registerBeanPostProcessors(beanFactory);         // Initialize message source for this context.         initMessageSource();         // Initialize event multicaster for this context.         initApplicationEventMulticaster();         // Initialize other special beans in specific context subclasses.         onRefresh();         // Check for listener beans and register them.         registerListeners();         // Instantiate all remaining (non-lazy-init) singletons.         finishBeanFactoryInitialization(beanFactory);         // Last step: publish corresponding event.         finishRefresh();      &#125;      catch (BeansException ex) &#123;         if (logger.isWarnEnabled()) &#123;            logger.warn(&quot;Exception encountered during context initialization - &quot; +                  &quot;cancelling refresh attempt: &quot; + ex);         &#125;         // Destroy already created singletons to avoid dangling resources.         destroyBeans();         // Reset &#x27;active&#x27; flag.         cancelRefresh(ex);         // Propagate exception to caller.         throw ex;      &#125;      finally &#123;         // Reset common introspection caches in Spring&#x27;s core, since we         // might not ever need metadata for singleton beans anymore...         resetCommonCaches();      &#125;   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>
<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>
<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>
<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>
<p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>
<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>
<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>
<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>
<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>
<h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>
<p>​        优点：简单、便携；</p>
<p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>
<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>
<p>2）、将嵌入式的Tomcat指定为provided；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;   <span class="meta">@Override</span>   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;       <span class="comment">//传入SpringBoot应用的主程序      return application.sources(SpringBoot04WebJspApplication.class);   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>4）、启动服务器就可以使用；</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>
<p>servlet3.0（Spring注解版）：</p>
<p>8.2.4 Shared libraries / runtimes pluggability：</p>
<p>规则：</p>
<p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>
<p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>
<p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>
<p>流程：</p>
<p>1）、启动Tomcat</p>
<p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p>
<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>
<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>
<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180302221835.png)</p>
<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>
<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(      ServletContext servletContext)</span> </span>&#123;    <span class="comment">//1、创建SpringApplicationBuilder   SpringApplicationBuilder builder = createSpringApplicationBuilder();   StandardServletEnvironment environment = new StandardServletEnvironment();   environment.initPropertySources(servletContext, null);   builder.environment(environment);   builder.main(getClass());   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);   if (parent != null) &#123;      this.logger.info(&quot;Root context already created (using as parent).&quot;);      servletContext.setAttribute(            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);      builder.initializers(new ParentContextApplicationContextInitializer(parent));   &#125;   builder.initializers(         new ServletContextApplicationContextInitializer(servletContext));   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);        //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来   builder = configure(builder);        //使用builder创建一个Spring应用   SpringApplication application = builder.build();   if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils         .findAnnotation(getClass(), Configuration.class) != null) &#123;      application.getSources().add(getClass());   &#125;   Assert.state(!application.getSources().isEmpty(),         &quot;No SpringApplication sources have been defined. Either override the &quot;               + &quot;configure method or add an @Configuration annotation&quot;);   // Ensure error pages are registered   if (this.registerErrorPageFilter) &#123;      application.getSources().add(ErrorPageFilterConfiguration.class);   &#125;    //启动Spring应用   return run(application);&#125;</span></span><br></pre></td></tr></table></figure>

<p>7）、Spring的应用就启动并且创建IOC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = <span class="keyword">null</span>;   FailureAnalyzers analyzers = <span class="keyword">null</span>;   configureHeadlessProperty();   SpringApplicationRunListeners listeners = getRunListeners(args);   listeners.starting();   <span class="keyword">try</span> &#123;      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(            args);      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);      Banner printedBanner = printBanner(environment);      context = createApplicationContext();      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);              <span class="comment">//刷新IOC容器      refreshContext(context);      afterRefresh(context, applicationArguments);      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) &#123;         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      &#125;      return context;   &#125;   catch (Throwable ex) &#123;      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p>
<h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180303145450.png)</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180303145531.png)</p>
<h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>
<p>docker客户端(Client)：连接docker主机进行操作；</p>
<p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>
<p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p>
<p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180303165113.png)</p>
<p>使用Docker的步骤：</p>
<p>1）、安装Docker</p>
<p>2）、去Docker仓库找到这个软件对应的镜像；</p>
<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
<p>4）、对容器的启动停止就是对软件的启动停止；</p>
<h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p>
<p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p>
<p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p>
<p>​    4）、使用客户端连接linux服务器进行命令操作；</p>
<p>​    5）、设置虚拟机网络；</p>
<p>​        桥接网络===选好网卡====接入网线；</p>
<p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>​    7）、查看linux的ip地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>​    8）、使用客户端连接linux；</p>
<h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</span><br></pre></td></tr></table></figure>

<h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>
<p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure>



<h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>



<p>错误的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure>

<p>正确的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure>

<p>做了端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure>



<p>几个其他的高级操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>



<h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql://192.168.15.22:3306/jdbc    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>
<p>​    数据源的相关配置都在DataSourceProperties里面；</p>
<p>自动配置原理：</p>
<p>org.springframework.boot.autoconfigure.jdbc：</p>
<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>
<p>2、SpringBoot默认可以支持；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>

<p>3、自定义数据源类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * Generic DataSource configuration. */</span><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;   <span class="meta">@Bean</span>   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性      return properties.initializeDataSourceBuilder().build();   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>
<p>​    作用：</p>
<p>​        1）、runSchemaScripts();运行建表语句；</p>
<p>​        2）、runDataScripts();运行插入数据的sql语句；</p>
<p>默认只需要将文件命名为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；可以使用</span>   	<span class="string">schema:      - classpath:department.sql      指定位置</span></span><br></pre></td></tr></table></figure>

<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>
<h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">导入druid数据源<span class="meta">@Configurationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span>    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();    &#125;    <span class="comment">//配置Druid的监控    //1、配置一个管理后台的Servlet    @Bean    public ServletRegistrationBean statViewServlet()&#123;        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);        initParams.put(&quot;allow&quot;,&quot;&quot;);//默认就是允许所有访问        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);        bean.setInitParameters(initParams);        return bean;    &#125;    //2、配置一个web监控的filter    @Bean    public FilterRegistrationBean webStatFilter()&#123;        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));        return  bean;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180305194443.png)</p>
<p>步骤：</p>
<p>​    1）、配置数据源相关属性（见上一节Druid）</p>
<p>​    2）、给数据库建表</p>
<p>​    3）、创建JavaBean</p>
<h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper@Mapperpublic interface DepartmentMapper &#123;    @Select(&quot;select * from department where id=#&#123;id&#125;&quot;)    public Department getDeptById(Integer id);    @Delete(&quot;delete from department where id=#&#123;id&#125;&quot;)    public int deleteDeptById(Integer id);    @Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)    @Insert(&quot;insert into department(departmentName) values(#&#123;departmentName&#125;)&quot;)    public int insertDept(Department department);    @Update(&quot;update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;&quot;)    public int updateDept(Department department);&#125;</span></span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configurationpublic <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);            &#125;        &#125;;    &#125;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；<span class="meta">@MapperScan(value = &quot;com.atguigu.springboot.mapper&quot;)</span><span class="meta">@SpringBootApplicationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;		SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);	&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:  config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span>  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>

<p>更多使用参照</p>
<p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p>![](../../../../../Program Files/Typora/images/搜狗截图20180306105412.png)</p>
<h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>
<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系@Entity //告诉JPA这是一个实体类（和数据表映射的类）@Table(name = &quot;tbl_user&quot;) //@Table来指定和哪个数据表对应;如果省略默认表名就是user；public class User &#123;    @Id //这是一个主键    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键    private Integer id;    @Column(name = &quot;last_name&quot;,length = 50) //这是和数据表对应的一个列    private String lastName;    @Column //省略默认列名就是属性名    private String email;</span></span><br></pre></td></tr></table></figure>

<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>3）、基本的配置JpaProperties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:   jpa:</span>    <span class="string">hibernate:#</span>     <span class="string">更新或者创建数据表结构</span>      <span class="attr">ddl-auto:</span> <span class="string">update#</span>    <span class="string">控制台显示SQL</span>    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>
<p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<p><strong>SpringApplicationRunListener</strong></p>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<p><strong>CommandLineRunner</strong></p>
<p>启动流程：</p>
<h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialize(sources);<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;    <span class="comment">//保存主配置类    if (sources != null &amp;&amp; sources.length &gt; 0) &#123;        this.sources.addAll(Arrays.asList(sources));    &#125;    //判断当前是否一个web应用    this.webEnvironment = deduceWebEnvironment();    //从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来    setInitializers((Collection) getSpringFactoriesInstances(        ApplicationContextInitializer.class));    //从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));    //从多个配置类中找到有main方法的主配置类    this.mainApplicationClass = deduceMainApplicationClass();&#125;</span></span><br></pre></td></tr></table></figure>

<p>![](../../../../../Program Files/Typora/images/搜狗截图20180306145727.png)</p>
<p>![](../../../../../Program Files/Typora/images/搜狗截图20180306145855.png)</p>
<h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = <span class="keyword">null</span>;   FailureAnalyzers analyzers = <span class="keyword">null</span>;   configureHeadlessProperty();       <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories   SpringApplicationRunListeners listeners = getRunListeners(args);    //回调所有的获取SpringApplicationRunListener.starting()方法   listeners.starting();   try &#123;       //封装命令行参数      ApplicationArguments applicationArguments = new DefaultApplicationArguments(            args);      //准备环境      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);       		//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成             Banner printedBanner = printBanner(environment);              //创建ApplicationContext；决定创建web的ioc还是普通的ioc      context = createApplicationContext();             analyzers = new FailureAnalyzers(context);       //准备上下文环境;将environment保存到ioc中；而且applyInitializers()；       //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法       //回调所有的SpringApplicationRunListener的contextPrepared()；       //      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);       //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；              //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版       //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）      refreshContext(context);       //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调       //ApplicationRunner先回调，CommandLineRunner再回调      afterRefresh(context, applicationArguments);       //所有的SpringApplicationRunListener回调finished方法      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) &#123;         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      &#125;       //整个SpringBoot应用启动完成以后返回启动的ioc容器；      return context;   &#125;   catch (Throwable ex) &#123;      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;        System.out.println(<span class="string">&quot;ApplicationContextInitializer...initialize...&quot;</span>+applicationContext);    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringApplicationRunListener</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;    <span class="comment">//必须有的构造器    public HelloSpringApplicationRunListener(SpringApplication application, String[] args)&#123;    &#125;    @Override    public void starting() &#123;        System.out.println(&quot;SpringApplicationRunListener...starting...&quot;);    &#125;    @Override    public void environmentPrepared(ConfigurableEnvironment environment) &#123;        Object o = environment.getSystemProperties().get(&quot;os.name&quot;);        System.out.println(&quot;SpringApplicationRunListener...environmentPrepared..&quot;+o);    &#125;    @Override    public void contextPrepared(ConfigurableApplicationContext context) &#123;        System.out.println(&quot;SpringApplicationRunListener...contextPrepared...&quot;);    &#125;    @Override    public void contextLoaded(ConfigurableApplicationContext context) &#123;        System.out.println(&quot;SpringApplicationRunListener...contextLoaded...&quot;);    &#125;    @Override    public void finished(ConfigurableApplicationContext context, Throwable exception) &#123;        System.out.println(&quot;SpringApplicationRunListener...finished...&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>配置（META-INF/spring.factories）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\com.atguigu.springboot.listener.HelloApplicationContextInitializerorg.springframework.boot.SpringApplicationRunListener=\com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>





<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="string">&quot;ApplicationRunner...run....&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>CommandLineRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="string">&quot;CommandLineRunner...run...&quot;</span>+ Arrays.asList(args));    &#125;&#125;</span><br></pre></td></tr></table></figure>



<h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p>
<p>​    1、这个场景需要使用到的依赖是什么？</p>
<p>​    2、如何编写自动配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类@ConditionalOnXXX  //在指定条件成立的情况下自动配置类生效@AutoConfigureAfter  //指定自动配置类的顺序@Bean  //给容器中添加组件@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置@EnableConfigurationProperties //让xxxProperties生效加入到容器中自动配置类要能加载将需要启动就加载的自动配置类，配置在META-INF/spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br></pre></td></tr></table></figure>

<p>​    3、模式：</p>
<p>启动器只用来做依赖导入；</p>
<p>专门来写一个自动配置模块；</p>
<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>
<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>
<p>步骤：</p>
<p>1）、启动器模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="comment">&lt;!--启动器--&gt;</span>    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>        <span class="comment">&lt;!--引入自动配置模块--&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）、自动配置模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span>   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span>   <span class="tag">&lt;<span class="name">parent</span>&gt;</span>      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span>   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>   <span class="tag">&lt;<span class="name">properties</span>&gt;</span>      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span>      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span>      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;<span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<span class="meta">@ConfigurationProperties(prefix = &quot;atguigu.hello&quot;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;    <span class="keyword">private</span> String prefix;    <span class="keyword">private</span> String suffix;    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> prefix;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;        <span class="keyword">this</span>.prefix = prefix;    &#125;    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> suffix;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;        <span class="keyword">this</span>.suffix = suffix;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;    HelloProperties helloProperties;    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> helloProperties;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;        <span class="keyword">this</span>.helloProperties = helloProperties;    &#125;    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">&quot;-&quot;</span> +name + helloProperties.getSuffix();    &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;<span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<span class="keyword">import</span> org.springframework.context.annotation.Bean;<span class="keyword">import</span> org.springframework.context.annotation.Configuration;<span class="meta">@Configuration</span><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration &#123;    @Autowired    HelloProperties helloProperties;    @Bean    public HelloService helloService()&#123;        HelloService service = new HelloService();        service.setHelloProperties(helloProperties);        return service;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>]]></content>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2022/09/27/SpringCloud/</url>
    <content><![CDATA[<p>SpringCloud微服务架构</p>
<h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><p>基于分布式的微服务架构—整体架构<br><img src="/2022/09/27/SpringCloud/1661307288619_7B458813-F654-473a-A494-94ADE8CA6F89.png"></p>
<p><strong>分布式的整体维度：</strong></p>
<ul>
<li>服务注册与发现</li>
<li>服务调用</li>
<li>服务熔断</li>
<li>负载均衡</li>
<li>服务降级</li>
<li>服务消息队列</li>
<li>配置中心管理</li>
<li>服务网关</li>
<li>服务监控</li>
<li>全链路追踪</li>
<li>自动化构建部署</li>
<li>服务定时任务调度操作</li>
</ul>
<h3 id="1-SpringCloud简介"><a href="#1-SpringCloud简介" class="headerlink" title="1.SpringCloud简介"></a>1.SpringCloud简介</h3><pre><code>SpringCloud=分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶
</code></pre>
<p>由n多个springboot组成</p>
<h3 id="2-基本使用技术"><a href="#2-基本使用技术" class="headerlink" title="2.基本使用技术"></a>2.基本使用技术</h3><p>（2020.2之后每部分技术都有所更新）</p>
<p>![Pasted image 20220824102603](SpringCloud.assets/Pasted image 20220824102603.png)</p>
<p><img src="/2022/09/27/SpringCloud/image-20220906104143705.png" alt="image-20220906104143705"></p>
<h3 id="3-版本选择"><a href="#3-版本选择" class="headerlink" title="3.版本选择"></a>3.版本选择</h3><p>SpringBoot版本使用数字标识<br>SpringCloud版本使用字母标识（采用伦敦地铁站的名字命名）</p>
<p>由 SpringCloud 版本选择 SpringBoot版本</p>
<p><strong>boot 和 cloud 适配的版本</strong><br>![](SpringCloud.assets/Pasted image 20220824103855.png)<br>按照官网给的标准来（解析json)<br><a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a><br>![](SpringCloud.assets/Pasted image 20220824104359.png)</p>
<h3 id="4-教程使用版本"><a href="#4-教程使用版本" class="headerlink" title="4.教程使用版本"></a>4.教程使用版本</h3><p>![](SpringCloud.assets/Pasted image 20220824104818.png)</p>
<h3 id="5-组件停更说明"><a href="#5-组件停更说明" class="headerlink" title="5.组件停更说明"></a>5.组件停更说明</h3><p>基本全部组件停更不停用，有新的组件去替换<br>![](SpringCloud.assets/Pasted image 20220824105758.png)</p>
<h3 id="SpringCloud-中文知道手册"><a href="#SpringCloud-中文知道手册" class="headerlink" title="SpringCloud 中文知道手册"></a>SpringCloud 中文知道手册</h3><p><a href="https://www.springcloud.cc/spring-cloud-greenwich.html#_spring_cloud_context_application_context_services">Spring Cloud Greenwich 中文文档 参考手册 中文版</a></p>
<h2 id="二、聚合父工程"><a href="#二、聚合父工程" class="headerlink" title="二、聚合父工程"></a>二、聚合父工程</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>1.新建项目，选择Maven版本<br>![](SpringCloud.assets/Pasted image 20220824161925.png)</p>
<p>2.字符编码<br>![](SpringCloud.assets/Pasted image 20220824162214.png)</p>
<p>3.注解生效激活<br>![](SpringCloud.assets/Pasted image 20220824162332.png)</p>
<p>4.Java版本选8<br>![](SpringCloud.assets/Pasted image 20220824162436.png)</p>
<p>5.file type 过滤<br>![](SpringCloud.assets/Pasted image 20220824162615.png)</p>
<h3 id="父工程pom文件"><a href="#父工程pom文件" class="headerlink" title="父工程pom文件"></a>父工程pom文件</h3><p>删掉生成的src文件夹<br>![](SpringCloud.assets/Pasted image 20220824162952.png)</p>
<p>1.修改打包方式为pom (默认是jar)<br>![](SpringCloud.assets/Pasted image 20220824162912.png)</p>
<p>2.统一jar包版本<br>3.配置 dependencyManagement</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一管理 jar 包版本 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 子块基础之后，提供作用(并不是引入依赖，子类还需自己导入需要的依赖)：锁定版本 + 子module不用写 groupId 和 version --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 下面三个基本是微服务架构的标配 --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line">      <span class="comment">&lt;!--scope=import 来实现多继承--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- druid--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--junit 单元测试--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--log4j--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果导入的依赖爆红，先把 dependencyManagement 注释掉再导入(因为dependencyManagement只是锁定版本)<br>需要修改的话，就是改变三个标配的版本</p>
<p>通常在最顶层的父 pom 会看到 dependencyManagement<br>Maven会沿着父子层次向上走，直到找到一个拥有 dependencyManagement 元素的项目，然后会使用这个 dependencyManagement 元素中指定的版本号<br><em>如果子项目需要其他版本，自己加version即可</em></p>
<p><font color="red">dependencyManagement 里只声明依赖，并不实现引入；只有在子项目中写入该依赖，并没有指定具体版本，才会从父项目中继承该项。并且version和scope都读取自父pom</font></p>
<p>跳过测试单元<br>![Pasted image 20220824164851](SpringCloud.assets/Pasted image 20220824164851.png)</p>
<h2 id="三、构建支付模块"><a href="#三、构建支付模块" class="headerlink" title="三、构建支付模块"></a>三、构建支付模块</h2><p>微服务模块：</p>
<ol>
<li>建module</li>
<li>改POM</li>
<li>写YML</li>
<li>主启动</li>
<li>业务类</li>
</ol>
<h3 id="1-建moudle"><a href="#1-建moudle" class="headerlink" title="1. 建moudle"></a>1. 建moudle</h3><p>![Pasted image 20220826090714](SpringCloud.assets/Pasted image 20220826090714.png)<br>选择maven项目<br>![Pasted image 20220826090751](SpringCloud.assets/Pasted image 20220826090751.png)</p>
<p>查看父pom发现已有改变<br>![Pasted image 20220826091057](SpringCloud.assets/Pasted image 20220826091057.png)</p>
<h3 id="2-改子类的pom"><a href="#2-改子类的pom" class="headerlink" title="2. 改子类的pom"></a>2. 改子类的pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--        web启动器--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--        监控接口、健康检测--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--        这里写了版本号就用子类的，没写就使用父类的--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-配置yml文件-自己新建"><a href="#3-配置yml文件-自己新建" class="headerlink" title="3. 配置yml文件(自己新建)"></a>3. 配置yml文件(自己新建)</h3><p>![Pasted image 20220826094119](SpringCloud.assets/Pasted image 20220826094119.png)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span>  </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span>  </span><br><span class="line">  <span class="attr">datasource:</span>  </span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>   <span class="comment"># 当前数据源操作类型  </span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>    <span class="comment"># mysql驱动包  </span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span>  </span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span>  </span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span>  <span class="comment"># 所有entity别名类所在包</span></span><br></pre></td></tr></table></figure>

<h3 id="4-写启动类"><a href="#4-写启动类" class="headerlink" title="4. 写启动类"></a>4. 写启动类</h3><p>![Pasted image 20220826094206](SpringCloud.assets/Pasted image 20220826094206.png)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-业务类"><a href="#5-业务类" class="headerlink" title="5.业务类"></a>5.业务类</h3><p><strong>1&gt;  创数据库和表</strong></p>
<p><img src="/2022/09/27/SpringCloud/image-20220829091535923.png" alt="image-20220829091535923"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220829091545876.png" alt="image-20220829091545876"></p>
<p><strong>2&gt;  创建实体类</strong></p>
<p>主实体Payment</p>
<p>json封装体CommonResult</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829091610705.png" alt="image-20220829091610705"></p>
<p>实现 Serializable 对象序列化接口；作用：</p>
<ol>
<li>便于存储</li>
<li>便于传输</li>
<li>保障数据可读性；（内存不够时，暂时存储到硬盘中）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">// Serializable 对象序列化的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">// 实体类序列化（后头分布式中要用到）</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code,String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3&gt;  dao</strong></p>
<p>@Mapper   Apache的，推荐使用</p>
<p>@Repository   spring的，容易出现问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>XML文件</p>
<p>namespace —- 强调关联到哪个dao</p>
<p>parameterType  —-  映射实体类（传参）  可传Java对象，数组，map…</p>
<p>useGeneratedKeys  —–  返回一个数字，成功—1；失败—0</p>
<p><resultMap>  映射数据库和Java实体类</resultMap></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderStatus&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;INT&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>字段名 —- 变量名 —- 类型（类型有的时候加了会报错）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Payment 为自定义的实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment(serial) values (#&#123;serial&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.entities.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from payment where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>4&gt;  service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和 @Autowired 一样也是自动装填，但 Resource 是Java自己的方法</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5&gt;  controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作 post</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  int 是因为有 useGeneratedKeys 成功返回1，失败返回0</span></span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;***插入结果：&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span>  CommonResult(<span class="number">200</span>,<span class="string">&quot;插入成功&quot;</span>,result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作 get</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;***插入结果：&quot;</span>+payment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span>  CommonResult(<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>,payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;没有对应记录,查询ID：&quot;</span>+id,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6&gt;  测试</strong></p>
<p>浏览器可支持Get请求，但不太支持Post请求，需要使用postma</p>
<p>测就完了</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829103904955.png" alt="image-20220829103904955"></p>
<h3 id="6-热部署Devtools"><a href="#6-热部署Devtools" class="headerlink" title="6.热部署Devtools"></a>6.热部署Devtools</h3><p>部署后就不需要每次修改完项目都手动重启</p>
<p><font color="red">只在开发测试阶段使用，上线后关闭</font></p>
<p>1&gt;  添加依赖（在子工程的pom文件中）</p>
<p><scope>  指定了依赖（第三方jar包）的 <strong>作用范围</strong></scope></p>
<p><optional>  A项目添加该选项后，在B中就不会出现此依赖，除非删掉或写为false</optional></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2&gt;  添加插件到父工程 pom 中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3&gt;  开启自动编译选项</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829105717430.png" alt="image-20220829105717430"></p>
<p>4&gt;  更新值</p>
<p>Ctrl + Shift + Alt + /</p>
<p>选择 Register</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829110507456.png" alt="image-20220829110507456"></p>
<p>2021新版 compiler automake allow when app running  移到setting里了</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829110908379.png" alt="image-20220829110908379"></p>
<p>5&gt;  重启 idea</p>
<h2 id="四、客户端（在cloud下创建另一个工程）"><a href="#四、客户端（在cloud下创建另一个工程）" class="headerlink" title="四、客户端（在cloud下创建另一个工程）"></a>四、客户端（在cloud下创建另一个工程）</h2><h3 id="1-还是老样子，5步走"><a href="#1-还是老样子，5步走" class="headerlink" title="1. 还是老样子，5步走"></a>1. 还是老样子，5步走</h3><ol>
<li>建 moudle</li>
<li>导 pom</li>
<li>写 yml</li>
<li>写启动类</li>
<li>业务类</li>
</ol>
<p><img src="/2022/09/27/SpringCloud/image-20220829143940939.png" alt="image-20220829143940939"></p>
<p>pom.xml 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain8002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>把实体类的内容从8001项目里copy过来，创建controller</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829144448634.png" alt="image-20220829144448634"></p>
<h3 id="2-配置RestTemplat"><a href="#2-配置RestTemplat" class="headerlink" title="2. 配置RestTemplat"></a>2. 配置RestTemplat</h3><p>该项目的目的是调用8001端口，来实现客户端的功能</p>
<p><strong>RestTemplat：</strong>提供了多种便捷访问远程Http服务的方法；是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的<strong>客户端模板工具集</strong></p>
<p><img src="/2022/09/27/SpringCloud/image-20220829150325562.png" alt="image-20220829150325562"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-业务类"><a href="#3-业务类" class="headerlink" title="3. 业务类"></a>3. 业务类</h3><p>只要一个controller就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>postman测试</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829154514651.png" alt="image-20220829154514651"></p>
<h3 id="4-启动多个微服务"><a href="#4-启动多个微服务" class="headerlink" title="4. 启动多个微服务"></a>4. 启动多个微服务</h3><p><img src="/2022/09/27/SpringCloud/image-20220829155336240.png" alt="image-20220829155336240"></p>
<h2 id="五、工程重构"><a href="#五、工程重构" class="headerlink" title="五、工程重构"></a>五、工程重构</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><p>多个工程有很多相同的部分，比如实体类，大家都要用到，所以为了避免冗余，可以集成到一个项目中</p>
<h3 id="2-创建新-moudle"><a href="#2-创建新-moudle" class="headerlink" title="2. 创建新 moudle"></a>2. 创建新 moudle</h3><p><img src="/2022/09/27/SpringCloud/image-20220829161634237.png" alt="image-20220829161634237"></p>
<h3 id="3-改-pom-依赖"><a href="#3-改-pom-依赖" class="headerlink" title="3. 改 pom 依赖"></a>3. 改 pom 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        HuTool工具包(一个非常好用的工具包)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-把entities粘贴过来"><a href="#4-把entities粘贴过来" class="headerlink" title="4. 把entities粘贴过来"></a>4. 把entities粘贴过来</h3><p><img src="/2022/09/27/SpringCloud/image-20220829161807860.png" alt="image-20220829161807860"></p>
<h3 id="5-maven命令-clean，install"><a href="#5-maven命令-clean，install" class="headerlink" title="5. maven命令 clean，install"></a>5. maven命令 clean，install</h3><p>点闪电符号跳过测试模块</p>
<p><img src="/2022/09/27/SpringCloud/image-20220829161910496.png" alt="image-20220829161910496"></p>
<h3 id="6-删除8001、8002两个项目的entities；并在各自pom中导入依赖"><a href="#6-删除8001、8002两个项目的entities；并在各自pom中导入依赖" class="headerlink" title="6. 删除8001、8002两个项目的entities；并在各自pom中导入依赖"></a>6. 删除8001、8002两个项目的entities；并在各自pom中导入依赖</h3><p>maven install 是把自定义的maven项目导入到本地仓库</p>
<p>导入新建的maven项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>8001和8002的pom都要导入，然后可以删除实体类的文件夹了</strong></p>
<p>启动后，测试——-没有问题</p>
<h2 id="六、-Eureka-服务注册与发现"><a href="#六、-Eureka-服务注册与发现" class="headerlink" title="六、 Eureka 服务注册与发现"></a>六、 Eureka 服务注册与发现</h2><h3 id="1、-Eureka基础知识"><a href="#1、-Eureka基础知识" class="headerlink" title="1、 Eureka基础知识"></a>1、 Eureka基础知识</h3><p>Eurkea采用C/S的设计架构</p>
<p>避免单点故障，所以使用集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是服务治理：</span><br><span class="line">	springcloud封装了Netflix公司开发的Eureka模块来实现服务治理</span><br><span class="line">	</span><br><span class="line">当客户端和服务端过多时，管理每个服务之间的依赖关系比较复杂，需要使用服务治理。可以实现服务调用、负载均衡、容错等</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220829170936143.png" alt="image-20220829170936143"></p>
<p>系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接</p>
<p>客户端好比学生，服务端集群好比老师们 Eureka Client，Eureka Server 就是学校；心跳接口就是学校会看老师和学生是否在正常上课          学生也可以作为 Eureka Client 注册到学校，然后找老师们寻求服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“心跳”指的是一段定时发送的自定义信息，让对方知道自己“存活”，以确保连接的有效性。大部分 CS 架构的应用程序都采用了心跳机制，服务端和客户端都可以发心跳。通常情况下是客户端向服务器端发送心跳包，服务端用于判断客户端是否在线。</span><br></pre></td></tr></table></figure>

<p><strong>Eureka 包含两个组件：Eureka Server 和 Eureka Client</strong></p>
<ul>
<li><strong>Eureka Server：</strong>Eureka 服务注册中心，主要用于提供服务注册功能。当微服务启动时，会将自己的服务注册到 Eureka Server。Eureka Server 维护了一个可用服务列表，存储了所有注册到 Eureka Server 的可用服务的信息，这些可用服务可以在 Eureka Server 的管理界面中直观看到。</li>
<li><strong>Eureka Client：</strong>Eureka 客户端，通常指的是微服务系统中各个微服务，主要用于和 Eureka Server 进行交互。在微服务应用启动后，Eureka Client 会向 Eureka Server 发送心跳（默认周期为 30 秒）。若 Eureka Server 在多个心跳周期内没有接收到某个 Eureka Client 的心跳，Eureka Server 将它从可用服务列表中移除（默认 90 秒）。 </li>
</ul>
<h3 id="2、-单机版Eureka构建"><a href="#2、-单机版Eureka构建" class="headerlink" title="2、 单机版Eureka构建"></a>2、 单机版Eureka构建</h3><p>按照图示一点一点构建整个项目</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830095125327.png" alt="image-20220830095125327"></p>
<h4 id="1-gt-IDEA生成-eurekaServer端服务中心"><a href="#1-gt-IDEA生成-eurekaServer端服务中心" class="headerlink" title="1&gt; IDEA生成 eurekaServer端服务中心"></a>1&gt; IDEA生成 eurekaServer端服务中心</h4><p>新建moudle工程，改pom，写yml，添加主启动类</p>
<p>eurekaServer端结构：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830094139380.png" alt="image-20220830094139380"></p>
<p>pom依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># false表示不向注册中心注册自己（因为当前项目就是注册中心）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索任务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment"># 即 http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<p>主启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 标明到底是eureka的哪个组件</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面测试：<a href="http://localhost:7001/">http://localhost:7001</a></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830094539713.png" alt="image-20220830094539713"></p>
<h4 id="2-gt-payment8001注册进eurekaServer"><a href="#2-gt-payment8001注册进eurekaServer" class="headerlink" title="2&gt; payment8001注册进eurekaServer"></a>2&gt; payment8001注册进eurekaServer</h4><p>EurekaClient 端cloud-provider-payment8001将注册进 EurekaServer 成为服务提供者 provider，供8002使用</p>
<p>在8002的pom文件中引入新的jar包，eureka-client</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改yml文件，在原基础上添加 eureka 配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>给主启动类加注释，标名为客户端</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830100617223.png" alt="image-20220830100617223"></p>
<p>启动测试：<font color="red">先启动 eureka-server</font></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830100725735.png" alt="image-20220830100725735"></p>
<p>localhost:7001</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830100745261.png" alt="image-20220830100745261"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830100840371.png" alt="image-20220830100840371"></p>
<h4 id="3-gt-consmer8002注册进eurekaServer"><a href="#3-gt-consmer8002注册进eurekaServer" class="headerlink" title="3&gt; consmer8002注册进eurekaServer"></a>3&gt; consmer8002注册进eurekaServer</h4><p>EurekaClient 端cloud-consmer-8002将注册进 EurekaServer 成为服务消费者 consumer，调用8001业务</p>
<p>跟上面一样，导 jar 包，改 yml，改启动类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml:加个名字和配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>给主启动类加注释，@EnableEurekaClient</p>
<p>测试，先启动 EurekaServer7001，再启动服务提供者provider-8001；</p>
<p>localhost:7001</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830111230924.png" alt="image-20220830111230924"></p>
<p>爆红是Eurkea的自我保护机制</p>
<p>postman正常，哦耶</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830111309396.png" alt="image-20220830111309396"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不想入驻到 eurekaServer 就把yml属性改为false</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>





<h3 id="3、-集群Eureka构建"><a href="#3、-集群Eureka构建" class="headerlink" title="3、 集群Eureka构建"></a>3、 集群Eureka构建</h3><h4 id="1-gt-集群原理"><a href="#1-gt-集群原理" class="headerlink" title="1&gt; 集群原理"></a>1&gt; 集群原理</h4><p><img src="/2022/09/27/SpringCloud/image-20220830145141623.png" alt="image-20220830145141623"></p>
<p>  <img src="/2022/09/27/SpringCloud/image-20220830150807223.png" alt="image-20220830150807223"></p>
<p>如果是3个的话，就两两互相注册 （有个问题：那要几百个这么一个一个操作得累死，应该有什么便捷方法）</p>
<h4 id="2-gt-集群环境搭建"><a href="#2-gt-集群环境搭建" class="headerlink" title="2&gt; 集群环境搭建"></a>2&gt; 集群环境搭建</h4><p>新建一个 Eureka Server (moudle)</p>
<p>项目结构：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830155138463.png" alt="image-20220830155138463"></p>
<p>pom；和 cloud-eureka-server7001 相同；贴过来就行</p>
<p><strong>配置文件</strong>，需要改为集群式的配置文件  <font color="red">互相注册</font></p>
<p>​    本地的话，集群互相注册需要不同的主机名，所以本地想模拟需要修改 host 文件(因为都是localhost，只是端口不同)</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830155451222.png" alt="image-20220830155451222"></p>
<p>​    把需要的2个加进去</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830155911198.png" alt="image-20220830155911198"></p>
<p>7001的 application.yml</p>
<p>​    其他不变，defaultZone路径要变为要注册的新地址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># false表示不向注册中心注册自己（因为当前项目就是注册中心）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索任务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>

<p>7002的 application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment"># eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># false表示不向注册中心注册自己（因为当前项目就是注册中心）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索任务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<p>localhost:7001 或 eureka7001.com:7001</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830161104155.png" alt="image-20220830161104155"></p>
<p>localhost:7002 或 eureka7002.com:7002</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830161247935.png" alt="image-20220830161247935"></p>
<h4 id="3-gt-把微服务注册到-Eureka-集群中"><a href="#3-gt-把微服务注册到-Eureka-集群中" class="headerlink" title="3&gt; 把微服务注册到 Eureka 集群中"></a>3&gt; 把微服务注册到 Eureka 集群中</h4><p>把 8001 和 8002 的 yml 配置修改即可，将注册的地址改为集群版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/  # 集群版</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220830162636677.png" alt="image-20220830162636677"></p>
<h4 id="4-gt-测试-01"><a href="#4-gt-测试-01" class="headerlink" title="4&gt; 测试-01"></a>4&gt; 测试-01</h4><p>先启动 eureka 集群 7001 和 7002；再启动 8001 ，然后 8002</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830163031671.png" alt="image-20220830163031671"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830163044516.png" alt="image-20220830163044516"></p>
<p>postman 测试调用业务功能</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830163114476.png" alt="image-20220830163114476"></p>
<h4 id="5-gt-搭建服务端集群（支付者）"><a href="#5-gt-搭建服务端集群（支付者）" class="headerlink" title="5&gt; 搭建服务端集群（支付者）"></a>5&gt; 搭建服务端集群（支付者）</h4><p>新建 moudle   cloud-provider-payment8002  模拟多个服务端集群的效果</p>
<img src="/2022/09/27/SpringCloud/image-20220831132018155.png" alt="image-20220831132018155" style="zoom: 50%;">

<p>跟8001除了端口号其他完全一样，粘过来即可</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830194022234.png" alt="image-20220830194022234"></p>
<p>在controller中添加便于查看端口的</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830194412111.png" alt="image-20220830194412111"></p>
<p>把客户端端口号改一下，和服务端这个冲突了（我改成888了）</p>
<ol>
<li>修改服务端的 controller        服务端集群后，客户端调用服务时只需要关注名字；不用在乎到底调用的是哪一个端口</li>
</ol>
<p><img src="/2022/09/27/SpringCloud/image-20220830194952818.png" alt="image-20220830194952818"></p>
<ol start="2">
<li><p>修改后会出现错误；因为同名下有两个微服务，并不知道该调用哪个。</p>
</li>
<li><p>在 ApplicationContextConfig 使用 @LoadBalanced</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 使 RestTemplate 具有负载均衡能力</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>测试：</p>
<p><font color="yellow">先启动EurekaServer     7001/7002</font></p>
<p><font color="yellow">再启动服务端     8001/8002</font></p>
<p><font color="yellow">客户端测试    888</font></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830195245720.png" alt="image-20220830195245720"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830195318203.png" alt="image-20220830195318203"></p>
<p>不停请求服务，8001和8002会相继出现，说明实现负载均衡</p>
<p>负载均衡默认是轮询机制，所以会依次调用不同服务端</p>
<p><img src="/2022/09/27/SpringCloud/image-20220830195542321.png" alt="image-20220830195542321"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220830195605928.png" alt="image-20220830195605928"></p>
<p>ApplicationContextBean      Ribbon的负载均衡功能</p>
<p>Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且服务还有负载均衡功能</p>
<h4 id="6-gt-actuator微服务信息完善"><a href="#6-gt-actuator微服务信息完善" class="headerlink" title="6&gt;  actuator微服务信息完善"></a>6&gt;  actuator微服务信息完善</h4><p>对整体并没有影响，但是一些细节的修改</p>
<ol>
<li>主机名称：服务名称修改</li>
</ol>
<p>​    问题：主机名称直接暴露在外</p>
<ol start="2">
<li>访问信息时，希望有IP显示</li>
</ol>
<p>​    找业务时，一般是，<strong>哪个IP，哪个端口，哪个微服务名称</strong></p>
<p>8001、8002的 yml 文件修改   eureka 下添加配置  8002对照着改相关信息即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">	<span class="attr">instance-id:</span> <span class="string">payment8001</span>  <span class="comment"># 修改主机名</span></span><br><span class="line">	<span class="attr">prefer-ip-address:</span> <span class="literal">true</span>   <span class="comment"># 访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure>

<p>全部配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>   <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>    <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/oldchen?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka/  # 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span>  <span class="comment"># 集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span>  <span class="comment"># 修改主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>   <span class="comment"># 访问路径可以显示IP地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span>  <span class="comment"># 所有entity别名类所在包</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220831112138825.png" alt="image-20220831112138825"></p>
<p>注：服务端使用时，web 和 actuator 依赖一般绑定同时使用</p>
<p><img src="/2022/09/27/SpringCloud/image-20220831112437481.png" alt="image-20220831112437481"></p>
<p>actuator 的基本命令</p>
<p>​    监控端口是否正常运行</p>
<p><img src="/2022/09/27/SpringCloud/image-20220831112451743.png" alt="image-20220831112451743"></p>
<h4 id="7-gt-服务发现-discovery"><a href="#7-gt-服务发现-discovery" class="headerlink" title="7&gt;  服务发现 discovery"></a>7&gt;  服务发现 discovery</h4><p>用来让对方直观的看到有哪些微服务</p>
<p>8001端为例（8002相同的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注： DiscoveryClient 是 org.springcloud 的 不是 netflix</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br></pre></td></tr></table></figure>

<p>添加新的 GetMapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看微服务信息</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取在eureka中注册好的服务有哪些</span></span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****element: &quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一个微服务下面的全部具体实例(某个名称下的)</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>全部controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作 post</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  int 是因为有 useGeneratedKeys 成功返回1，失败返回0</span></span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;***插入结果：&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span>  CommonResult(<span class="number">200</span>,<span class="string">&quot;插入成功,serverPort  &quot;</span>+serverPort,result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作 get</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;***插入结果：&quot;</span>+payment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span>  CommonResult(<span class="number">200</span>,<span class="string">&quot;查询成功,serverPort  &quot;</span>+serverPort,payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;没有对应记录,查询ID：&quot;</span>+id,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看微服务信息</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取在eureka中注册好的服务有哪些</span></span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****element: &quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一个微服务下面的全部具体实例(某个名称下的)</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主启动类下添加 @EnableDiscoveryClient （以后会常用）</p>
<p><img src="/2022/09/27/SpringCloud/image-20220831135657289.png" alt="image-20220831135657289"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220831140310971.png" alt="image-20220831140310971"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220831140422862.png" alt="image-20220831140422862"></p>
<p>在 客户端 888 添加该接口后，以后可以直接知道有哪些服务；这样 服务端 也只对外展示一个整体的信息</p>
<h4 id="8-gt-Eureka-自我保护机制"><a href="#8-gt-Eureka-自我保护机制" class="headerlink" title="8&gt; Eureka 自我保护机制"></a>8&gt; Eureka 自我保护机制</h4><p>概述：保护模式主要用于一组客户端和Eureka Server 之间存在网络分区场景下的保护</p>
<p>进入保护模式后，Eureka Server 会尝试保护注册表中的内容，不再删除服务注册表中的内容，就是不会注销任何微服务</p>
<p>看到这段提示，既是进入保护模式</p>
<p><img src="/2022/09/27/SpringCloud/image-20220831141538329.png" alt="image-20220831141538329"></p>
<p><strong>一句话概括：某时刻某一微服务不能用了，Eureka 不会立刻清理，依旧会对该微服务的信息进行保存</strong></p>
<p><strong>属于CAP里面的AP分支</strong></p>
<p><font color="yellow">为什么会产生Eureka自我保护机制</font></p>
<p>​    防止当EurekaClient正常运行，但 EurekaServer 网络不通的情况下，EurekaServe不会立即将EurekaClient服务删除刷</p>
<p><font color="yellow">什么是自我保护模式</font></p>
<p>​    默认情况下，如果 EurekaServer 在一定时间内没有收到么某个微服务实例的心跳，EurekaServer 将会注销该实例（默认90秒）。但当网络分区发生故障（延时、卡顿、拥挤）时，微服务与 EurekaServer 之间无法正常通信，以上行为就变得很危险——–因为微服务本身是正常的，<font color="red">此时不应该被注销掉</font>。Eureka通过”自我保护模式”来解决这个问题——当EurekaServer 节点短时间丢失过多客户端时（可能发生网络分区故障），那么这个节点会进入自我保护模式</p>
<p>它的设计哲学是宁可保留错误的注册信息，也不盲目注销任何可能健康的服务实例    <font color="red">好死不如赖活</font></p>
<p>综上：自我保护是一种应对网络异常的保护措施</p>
<h4 id="9-gt-关闭自我保护机制"><a href="#9-gt-关闭自我保护机制" class="headerlink" title="9&gt;  关闭自我保护机制"></a>9&gt;  关闭自我保护机制</h4><p>7001端—–EurekaServer端</p>
<p>yml 修改配置    <strong>eureka.server.enable-self-preservation</strong>  默认为 true</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># false表示不向注册中心注册自己（因为当前项目就是注册中心）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索任务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 集群只想其他 eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment"># 单机就是自己</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 关闭自我保护机制，保证不可用服务被及时踢除</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 等待时间</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>



<p>8001端—–EurekaClient端</p>
<p>修改 8001 yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka 客户端向服务端发送心跳的时间间隔，单位为秒（默认30s）</span></span><br><span class="line"><span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># Eureka 服务端收到最后一次心跳后等待的时间上限，单位为秒（默认90s），超时将踢除服务</span></span><br><span class="line"><span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220831150808413.png" alt="image-20220831150808413"></p>
<h2 id="七、-Zookeeper注册与发现"><a href="#七、-Zookeeper注册与发现" class="headerlink" title="七、 Zookeeper注册与发现"></a>七、 Zookeeper注册与发现</h2><p>SpringCloud整合Zookeeper代替Eureka</p>
<p>机构和 Eureka 是完全相同的</p>
<h3 id="1-注册中心zookeeper"><a href="#1-注册中心zookeeper" class="headerlink" title="1.  注册中心zookeeper"></a>1.  注册中心zookeeper</h3><p>在虚拟机，centos上安装zookeeper；关闭防火墙</p>
<p>查下zookeeper的 ip 地址，保证可以和 win 系统进行 ping 通</p>
<h3 id="2-服务提供者"><a href="#2-服务提供者" class="headerlink" title="2. 服务提供者"></a>2. 服务提供者</h3><p>建新的 moudle  cloud-provider-payment8004</p>
<p> pom<img src="/2022/09/27/SpringCloud/image-20220902090547076.png" alt="image-20220902090547076"></p>
<p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloude-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.111</span><span class="number">.144</span><span class="string">:2181</span>  <span class="comment"># 一个zookeeper的地址，如果是集群，就直接逗号然后加</span></span><br></pre></td></tr></table></figure>

<p>main 函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>   <span class="comment">// 该注解用于向使用 consul 或 zookeeper 作为注册中心时注册服务</span></span><br></pre></td></tr></table></figure>

<p>controller     可以不带日志的注释，后头可能会报错</p>
<p><img src="/2022/09/27/SpringCloud/image-20220902092304620.png" alt="image-20220902092304620"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UUID.randomUUID().toString();   <span class="comment">// 随机生成的流水号</span></span><br></pre></td></tr></table></figure>

<p>启动zookeeper服务，再启动该微服务</p>
<p>启动会有bug出现，原因：8成是环境问题；maven 导入的 jar 包和虚拟机的 zookeeper 版本不一样</p>
<p><img src="/2022/09/27/SpringCloud/image-20220902093934658.png" alt="image-20220902093934658"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220902094214985.png" alt="image-20220902094214985"></p>
<p>​    zookeeper 作为注册中心，微服务是临时节点。当微服务停止发送心跳后，在一定的等待时间后，注册中心会把微服务踢掉</p>
<h3 id="3-服务消费者"><a href="#3-服务消费者" class="headerlink" title="3.  服务消费者"></a>3.  服务消费者</h3><p>和提供者差不多；跟Eureka逻辑都一样</p>
<h2 id="八、-Consul注册"><a href="#八、-Consul注册" class="headerlink" title="八、 Consul注册"></a>八、 Consul注册</h2><h3 id="1-Consul简介"><a href="#1-Consul简介" class="headerlink" title="1. Consul简介"></a>1. Consul简介</h3><p> Consul 是一套开源的分布式服务发现和配置管理系统，由Go语言开发</p>
<p>​    提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据单独需要使用，也可以一起使用以构建全方位的服务网格。总之 Consul 是一套完整的服务网格解决方案</p>
<p>​    优点：基于 raft 协议，比较简介；支持健康检查，同时支持 HTTP 和 DNS 协议；支持跨数据中心的 WAN 集群；提供图形界面；跨平台。支持 Linux、Mac、Windows</p>
<p><strong>怎么用：</strong><a href="https://www.springcloud.cc/spring-cloud-consul.html">Spring Cloud Consul 中文文档 参考手册 中文版</a></p>
<h3 id="2-Consul-下载和安装"><a href="#2-Consul-下载和安装" class="headerlink" title="2. Consul 下载和安装"></a>2. Consul 下载和安装</h3><p>官网下载，解压后直接就是一个exe文件</p>
<p>我把他放在 D 盘了<img src="/2022/09/27/SpringCloud/image-20220902155947402.png" alt="image-20220902155947402"></p>
<p>运行 cmd <img src="/2022/09/27/SpringCloud/image-20220902160017193.png" alt="image-20220902160017193"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220902160105554.png" alt="image-20220902160105554"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">consul agent -dev        启动服务</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220902160215632.png" alt="image-20220902160215632"></p>
<p>localhost：8500    访问图形化界面</p>
<p><img src="/2022/09/27/SpringCloud/image-20220902160341024.png" alt="image-20220902160341024"></p>
<h3 id="3-服务提供者注册进consul"><a href="#3-服务提供者注册进consul" class="headerlink" title="3.  服务提供者注册进consul"></a>3.  服务提供者注册进consul</h3><p>熟悉的5步走</p>
<p>新的工程名：cloud-providerconsul-payment8006</p>
<p><img src="/2022/09/27/SpringCloud/image-20220905091222052.png" alt="image-20220905091222052"></p>
<p>pom 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringCloud consul-server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line"><span class="comment">## consul 注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># hostname 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<p>主启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口用来测试微服务（用随机数生成流水号来测试）</span></span><br><span class="line">    <span class="comment">// RequestMapping包含各种请求头，可以指定</span></span><br><span class="line">    <span class="comment">// GetMapping  =》  RequestMapping(method=RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span> + serverPort + <span class="string">&quot;\t&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：  启动微服务和consul</p>
<img src="/2022/09/27/SpringCloud/image-20220905091747093.png" alt="image-20220905091747093" style="zoom:67%;">

<p>点进去可以看到它的安全状态</p>
<img src="/2022/09/27/SpringCloud/image-20220905091802113.png" alt="image-20220905091802113" style="zoom: 67%;">

<p><img src="/2022/09/27/SpringCloud/image-20220905091848320.png" alt="image-20220905091848320"></p>
<h3 id="4-服务消费者注册进consul"><a href="#4-服务消费者注册进consul" class="headerlink" title="4. 服务消费者注册进consul"></a>4. 服务消费者注册进consul</h3><p>建moudle、改pom、写yml、主启动、写config、业务层</p>
<p>cloud-consumerconsul-order889</p>
<img src="/2022/09/27/SpringCloud/image-20220905104006516.png" alt="image-20220905104006516" style="zoom:67%;">

<p>pom：(和服务提供者是一样的)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringCloud consul-server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml：(就换了一个名字)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">889</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-consumer-order</span></span><br><span class="line">  <span class="comment">## consul 注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># hostname 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<p>config：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 使 RestTemplate 具有负载均衡能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://ApplicationContextConfig&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/consul/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// RestTemplate 实现服务端向外网发送请求的场景 .get...即使用get方法请求</span></span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL+<span class="string">&quot;/payment/consul&quot;</span>,String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/09/27/SpringCloud/image-20220905104416423.png" alt="image-20220905104416423" style="zoom:67%;">

<img src="/2022/09/27/SpringCloud/image-20220905104724771.png" alt="image-20220905104724771" style="zoom:67%;">



<h2 id="九、-三种注册中心的异同点"><a href="#九、-三种注册中心的异同点" class="headerlink" title="九、 三种注册中心的异同点"></a>九、 三种注册中心的异同点</h2><table>
<thead>
<tr>
<th><strong>组件名</strong></th>
<th><strong>语言</strong></th>
<th><strong>CAP</strong></th>
<th><strong>服务健康检查</strong></th>
<th><strong>对外暴露接口</strong></th>
<th><strong>SpringCloud集成</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Eureka</td>
<td>Java</td>
<td>AP</td>
<td>可配支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
<tr>
<td>Consul</td>
<td>Go</td>
<td>CP</td>
<td>支持</td>
<td>HTTP/DNS</td>
<td>已集成</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>Java</td>
<td>CP</td>
<td>支持</td>
<td>客户端</td>
<td>已集成</td>
</tr>
</tbody></table>
<p>A：高可用</p>
<p>C：数据一致</p>
<p>P：分区容错性</p>
<p>CAP理论：关注粒度是数据，而不是整体系统设计的策略</p>
<p><font color="yellow">最多只能较好的满足两个</font>(实际情况好像要看网络情况来判断)</p>
<p>CA：单点集群，满足一致性，高可用系统，可扩展性上不太强大</p>
<p>CP：满足一致性，分区容灾性的系统，一般性能不是太高</p>
<p>AP：满足一致性，分区容灾性的系统，对一致性要求比较低</p>
<h2 id="十、Ribbon负载均衡服务调用"><a href="#十、Ribbon负载均衡服务调用" class="headerlink" title="十、Ribbon负载均衡服务调用"></a>十、Ribbon负载均衡服务调用</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Ribbon是一套<font color="yellow">客户端</font>，实现负载均衡的工具</p>
<p>​    主要功能是提供负载均衡算法和服务调用；Ribbon会自动帮助你基于某种规则（简单的轮询或随机连接等）连接机器。也可以使用Ribbon实现自定义的负载均衡算法</p>
<p>​    Ribbon目前进入维护状态，但依然大规模部署（目前依然主流和成熟） 未来–&gt; springcloud loadbalancer</p>
<p><strong>LB（负载均衡）：</strong>   集中式LB和进程内LB</p>
<p><font color="yellow">LB负载均衡（Load Balance）是什么</font></p>
<p>​    是将用户请求平摊分到多个服务响应端，来实现系统高可用的目的（HV）</p>
<p>​    常见的负载均衡软件有：Nginx、LVS（Linux虚拟服务器）、硬件F5等</p>
<p><font color="yellow">Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</font></p>
<p>​    Nginx是服务器负载均衡（集中式LB），客户端所有的请求都发送给Nginx；然后由Nginx实现转发请求。即负载均衡由服务器实现</p>
<p>​    Ribbon本地负载均衡（进程内LB），在调用微服务接口时，会在注册中心获取服务列表并缓存到JVM本地；在本地实现RPC远程调用技术</p>
<p><font color="yellow">集中式LB：</font>在服务的消费方和提供方之间使用的独立的LB设施（硬件如：F5；软件如：Nginx）。该设施通过某种策略把请求转发到服务提供方（类似于一个医院，进去之后，去哪由医院来分配）</p>
<p><font color="yellow">进程式LB：</font>将LB逻辑集成到消费方，消费方从注册中心得知哪些地址可用，自己挑选一个可用服务器（类似于一个科室，大夫是现成的，进去自己挑）</p>
<p>​    Ribbon属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它获取服务提供方地址</p>
<p>Ribbon：负载均衡 + RestTemplate调用</p>
<h3 id="2-怎么用"><a href="#2-怎么用" class="headerlink" title="2. 怎么用"></a>2. 怎么用</h3><p>架构：Ribbon是一个软负载均衡客户端组件（软负载均衡即软件负载均衡）</p>
<p>可以和其他所需请求客户端结合使用，和eureka结合只是一个实例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入该依赖时，会自带ribbon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220906165435093.png" alt="image-20220906165435093"></p>
<h4 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h4><p>常用：    getForObject/getForEntity      postForObject/postForEntity</p>
<p>Object：返回对象为响应体中数据转换的对象，基本上可以理解为json</p>
<p>Entity：返回对象为ResponseEntity对象，包含了响应中的一些重要信息；响应头、响应状态码、响应体（想知道详细信息就用entity，调用get方法可获得详细的信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;; // 单机版（写死了）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变为集群时，不关注某一端口，只通过hostname去寻找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Object 和 Entity 方法</span></span><br><span class="line">        <span class="comment">//return restTemplate.postForObject(PAYMENT_URL + &quot;/payment/create&quot;,payment,CommonResult.class);</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForEntity(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/getEntity/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> entity.getBody();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果，两者是一样的；只是Entity可以返回单个详细的部分</p>
<img src="/2022/09/27/SpringCloud/image-20220906190830406.png" alt="image-20220906190830406" style="zoom: 80%;">

<h3 id="3-Ribbon-默认的负载规则"><a href="#3-Ribbon-默认的负载规则" class="headerlink" title="3. Ribbon 默认的负载规则"></a>3. Ribbon 默认的负载规则</h3><p><strong>默认规则是：轮询</strong></p>
<p>IRule接口：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220906191202261.png" alt="image-20220906191202261"></p>
<p>该接口的实现类：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220906191906784.png" alt="image-20220906191906784"></p>
<img src="/2022/09/27/SpringCloud/image-20220906191630967.png" alt="image-20220906191630967" style="zoom:80%;">

<p>自带的常见的用法：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220906191716372.png" alt="image-20220906191716372"></p>
<h3 id="4-替换Ribbon的规则"><a href="#4-替换Ribbon的规则" class="headerlink" title="4. 替换Ribbon的规则"></a>4. 替换Ribbon的规则</h3><p><strong>这个自定义配置类不能放在@ComponentScan所扫描的子包下面，否则达不到特殊化的目的</strong></p>
<p>​    即 @SpringBootApplication 注释中带有的 @ComponentScan 会扫描本包下的所有配置；本例中就是在com.atguigu.springcloud 之外建包</p>
<p><img src="/2022/09/27/SpringCloud/image-20220906192926893.png" alt="image-20220906192926893"></p>
<p>换一种替换规则需要自己指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule(); <span class="comment">// 定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主启动中配置，当启动时，Ribbon执行自定义的规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name：找这个服务名的服务；  configuration是使用该配置类</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</span></span><br></pre></td></tr></table></figure>

<img src="/2022/09/27/SpringCloud/image-20220906194520853.png" alt="image-20220906194520853" style="zoom:80%;">

<h3 id="5-轮询规则的原理"><a href="#5-轮询规则的原理" class="headerlink" title="5. 轮询规则的原理"></a>5. 轮询规则的原理</h3><p>负载均衡算法： rest接口第几次发起请求 % 服务器集群总数 = 实际调用服务器的位置下标</p>
<p><strong>当服务重启时，计数从1算起</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">如：List[<span class="number">0</span>] instances = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span></span><br><span class="line">    List[<span class="number">1</span>] instances= <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br><span class="line"><span class="number">8002</span> 和 <span class="number">8001</span> 组成集群，按照轮询的算法：</span><br><span class="line">    <span class="number">1</span> % <span class="number">2</span> = <span class="number">1</span>  --》 index = <span class="number">1</span>  list.get(index); 获得服务地址就是 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br><span class="line">    <span class="number">2</span> % <span class="number">2</span> = <span class="number">0</span>  --》 index = <span class="number">0</span>  list.get(index); 获得服务地址就是 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span></span><br><span class="line">    <span class="number">3</span> % <span class="number">2</span> = <span class="number">1</span>  --》 index = <span class="number">1</span>  list.get(index); 获得服务地址就是 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>



<p>源码-查看：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220906202010221.png" alt="image-20220906202010221"></p>
<h3 id="6-手写轮询算法"><a href="#6-手写轮询算法" class="headerlink" title="6. 手写轮询算法"></a>6. 手写轮询算法</h3><p>启动7001，7002 eureka 集群</p>
<p>给8001，8002 添加一个测试接口；启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/lb&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverPort;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>888 消费者改造</strong></p>
<ol>
<li>把 ApplicationContextConfig 里的 @LoadBalanced 注释掉；(因为接下来使用自己写的轮询规则)</li>
<li>新建接口类，以及实现类</li>
</ol>
<img src="/2022/09/27/SpringCloud/image-20220907153019499.png" alt="image-20220907153019499" style="zoom:80%;">

<p>接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 得到机器的列表（有哪些微服务可以提供）</span></span><br><span class="line">    <span class="function">ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<p>源码中也使用了自旋锁，例如：for( ; ; )   内部有自己跳出循环的条件</p>
<p>​    这里自定义的方法使用 do-while 实现自旋锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLB</span> <span class="keyword">implements</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个原子类，初始值为0</span></span><br><span class="line">    <span class="comment">// 原子类可在高并发场景下高效处理程序；并保证线程安全(Java语言中，++i和i++操作并不是线程安全的)</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到并增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.atomicInteger.get();</span><br><span class="line">            next = current &gt;= <span class="number">2147483647</span> ? <span class="number">0</span> : current + <span class="number">1</span>; <span class="comment">// 2147483647:int的最大值</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="keyword">this</span>.atomicInteger.compareAndSet(current,next)); <span class="comment">// 自旋，一直取到想要的值为之</span></span><br><span class="line">        System.out.println(<span class="string">&quot;******第几次访问，next： &quot;</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getAndIncrement 代表第几次访问</span></span><br><span class="line">        <span class="keyword">int</span> index = getAndIncrement() % serviceInstances.size();</span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>OrderController 新增接口</li>
</ol>
<p>@Resource 和 @Autowired</p>
<p>​    @Autowired:属于Spring，按类型匹配，byType</p>
<p>​        <font color="red">缺点：</font>当实现类有两个以上时，容易有冲突；要使用它注入要确保只有一个实现类</p>
<p>​    @Resource：属于J2EE，按名称匹配，byName。更准确一些，减少了与spring的耦合。查名字的速度也要更快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancer loadBalancer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过名字得到的 List，就是 LoadBalancer 接口中需要的List</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (instances == <span class="keyword">null</span> || instances.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ServiceInstance serviceInstance = loadBalancer.instances(instances);</span><br><span class="line">    URI uri = serviceInstance.getUri();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(uri+<span class="string">&quot;/payment/lb&quot;</span>,String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试</li>
</ol>
<img src="/2022/09/27/SpringCloud/image-20220907153454719.png" alt="image-20220907153454719" style="zoom:80%;">



<h2 id="十一、OpenFeign的服务调用"><a href="#十一、OpenFeign的服务调用" class="headerlink" title="十一、OpenFeign的服务调用"></a>十一、OpenFeign的服务调用</h2><p>用在客户端，使用方法是<font color="yellow">定义一个服务接口，然后在上面添加注解。</font></p>
<p>Feign可以和Eureka和Ribbon组合使用来实现负载均衡</p>
<p><font color="yellow">Feign干什么：</font>（服务接口绑定器）</p>
<p>​    旨在使编写Java Http客户端变得容易，实际情况中，一个接口会被多次调用，所以需要对每个微服务都封装一些客户端调用。在Feign的实现下，我们只需要创建一些接口，使用接口调接口的方式，实现服务方的接口绑定</p>
<p>​    看微服务的service中使用了哪些服务，那客户端就创建对应的接口</p>
<p>​    通过Feign，只需要定义服务绑定接口并声明方法，就可实现服务调用</p>
<p>Feign已经被OpenFeign代替</p>
<h3 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h3><p>建新的工程 cloud-consumer-feign-order890</p>
<img src="/2022/09/27/SpringCloud/image-20220910104355945.png" alt="image-20220910104355945" style="zoom:80%;">

<p>OpenFeign对Ribbon进行了集成，依赖中包含负载均衡内容</p>
<img src="/2022/09/27/SpringCloud/image-20220910104913398.png" alt="image-20220910104913398" style="zoom:80%;">

<p>OpenFeign是Spring官方推出的一种声明式服务调用与负载均衡组件</p>
<p><font color="yellow"><strong>核心：微服务调用接口 + @FeignClient</strong></font></p>
<p>pom.xml  新内容只多了一个<strong>openfeign</strong>的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">890</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    因为当前是消费者，所以不需要注册进注册中心</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span>  <span class="comment"># 集群版</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主启动：  @EnableFeignClients    (激活)</span><br><span class="line">业务类：  @FeignClient           (启动)</span><br></pre></td></tr></table></figure>

<p>主启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 使用 Feign 激活并开启</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain890</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain890.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务类：</p>
<p>Service：使用8001暴露的接口，有什么就调什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加为容器内的一个组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 实现负载均衡和服务调用-----value：服务提供者提供的服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>先启动7001、7002；在启动8001、8002</p>
<p>启动890测试，服务调用能力和负载均衡功能都正常</p>
<img src="/2022/09/27/SpringCloud/image-20220910105142422.png" alt="image-20220910105142422" style="zoom: 67%;">

<p>总结：面向接口编程</p>
<p><img src="/2022/09/27/SpringCloud/image-20220910105758746.png" alt="image-20220910105758746"></p>
<h3 id="2-OpenFeign-超时控制"><a href="#2-OpenFeign-超时控制" class="headerlink" title="2. OpenFeign 超时控制"></a>2. OpenFeign 超时控制</h3><p>​    会出现一种情况，消费者需要调用服务提供者服务；服务方完成这次服务需要 3s，但消费者只能等待 2s；那超时的话，消费者方就会直接报错</p>
<p>OpenFeign 客户端默认等待 1s</p>
<p>1&gt; 服务提供方8001故意写一个暂停程序接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序进来后停3s后返回</span></span><br><span class="line">    <span class="comment">// 暂停几秒钟线程,模拟假如服务提供端的是一个长业务需要一段时间处理</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2&gt; 80 添加超时方法</p>
<p>service：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function">String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// openfeign 底层 ribbon；默认等待 1s</span></span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3&gt;  错误页面</p>
<img src="/2022/09/27/SpringCloud/image-20220910212843581.png" alt="image-20220910212843581" style="zoom:67%;">

<p>4&gt; yml中开启配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 feign 客户端超时时间(OpenFile默认支持ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#处理请求的超时时间，默认为5秒</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#连接建立的超时时长，默认5秒</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<img src="/2022/09/27/SpringCloud/image-20220910213033768.png" alt="image-20220910213033768" style="zoom:80%;">

<h3 id="3-OpenFeign-日志打印功能"><a href="#3-OpenFeign-日志打印功能" class="headerlink" title="3. OpenFeign 日志打印功能"></a>3. OpenFeign 日志打印功能</h3><p>我们可以通过调整日志级别，从而了解 Feign 中的 Http 请求细节。</p>
<p><font color="yellow">对Feign接口的调用情况进行监控和输出</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">日志级别：</span><br><span class="line">NONE: 默认的，不显示日志</span><br><span class="line">BASIC：仅记录请求方法、URL、响应状态码和执行时间</span><br><span class="line">HEADERS：除了 BASIC 中定义的信息外，还有请求和响应的头信息</span><br><span class="line">FULL：除了 HEADERS 中定义的信息外，还有请求响应的正文和元数据</span><br></pre></td></tr></table></figure>

<p>config类：<br><img src="/2022/09/27/SpringCloud/image-20220910214538911.png" alt="image-20220910214538911"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign 日志以什么级别监控哪个接口 （监控service的服务接口）</span></span><br><span class="line">    <span class="attr">com.atguigu.springcloud.Service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>测试：调用某一接口后，查看打印的日志信息</p>
<p><img src="/2022/09/27/SpringCloud/image-20220910214907841.png" alt="image-20220910214907841"></p>
<h2 id="十二、-Hystrix-服务熔断器"><a href="#十二、-Hystrix-服务熔断器" class="headerlink" title="十二、 Hystrix 服务熔断器"></a>十二、 Hystrix 服务熔断器</h2><p>分布式系统面临的问题：</p>
<p>​    复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候不可避免的的会失败</p>
<p>​    服务雪崩：多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他微服务，这就是所谓的<strong>“扇出”</strong>。如果扇出的链路上某个微服务的调用响应时间过长或不可用，对微服务A就会占用更多资源，进而引起系统崩溃，所谓<strong>“雪崩效应”</strong></p>
<p>​    对于高流量的应用来说，单一的后端依赖可能导致所有服务器上的所有资源在几秒内饱和。</p>
<p>​    <strong>Hystrix</strong>是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，许多依赖不可避免的会出现调用失败，比如超时、异常。Hystrix能够保证在一个依赖出现问题的情况下，不会导致整体服务失败，避免级联故障</p>
<p>​    “断路器”是一种开关，当某个单元发生故障后，向调用方返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间等待或抛出调用方无法处理的异常。</p>
<p><strong>Hystrix的主要功能：</strong>服务降级、服务熔断、接近实时的监控…</p>
<p><font color="yellow">官方宣布，停更进行维护</font></p>
<h3 id="1-Hystrix重要概念"><a href="#1-Hystrix重要概念" class="headerlink" title="1. Hystrix重要概念"></a>1. Hystrix重要概念</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fallback--服务降级；服务器忙，请稍后再试；不让客户端等待，并返回一个友好提示</span><br><span class="line">	哪些情况后触发降级：1.程序运行异常 2.超时  3.服务熔断触发服务降级  4.线程池/信号量打满也会导致服务降级</span><br><span class="line">	</span><br><span class="line">break--服务熔断；类比保险丝，当达到最大访问服务时，直接拒绝访问，拉闸限电，并调用服务降级返回友好提示</span><br><span class="line">	服务降级-&gt;熔断-&gt;恢复链路</span><br><span class="line">	</span><br><span class="line">flowlimit--秒杀高并发等操作，严禁一窝蜂的拥挤，大家排队，一秒几个</span><br></pre></td></tr></table></figure>



<h3 id="2-构建"><a href="#2-构建" class="headerlink" title="2. 构建"></a>2. 构建</h3><p>先把 Eureka7001改回单机版，方便调试</p>
<p>新工程：cloud-provider-hystrix-payment8001</p>
<img src="/2022/09/27/SpringCloud/image-20220911094344427.png" alt="image-20220911094344427" style="zoom:80%;">

<p>pom：引入hystrix的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 没开集群</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 注册进 eureka</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service和controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">应该是建一个接口类，在再impl实现的，这里为了省事</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常访问，一切ok</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  payment_OK,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;hhhhh&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟超时;假装它是个复杂的业务流程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暂停几秒，为了触发服务降级</span></span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  payment_Timeout,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;错了错了,耗时：&quot;</span>+timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.payment_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result: &quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.payment_Timeout(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result: &quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：启动7001，再8001；两个接口均正常，timeout会延迟3s后返回；模拟一个复杂进程需要的处理时间</p>
<img src="/2022/09/27/SpringCloud/image-20220911094813062.png" alt="image-20220911094813062" style="zoom:67%;">

<img src="/2022/09/27/SpringCloud/image-20220911094755040.png" alt="image-20220911094755040" style="zoom:67%;">

<p><font color="yellow">以上述Moudle为根基平台，正确-&gt;错误-&gt;降级熔断-&gt;恢复</font></p>
<h3 id="3-高并发测试"><a href="#3-高并发测试" class="headerlink" title="3. 高并发测试"></a>3. 高并发测试</h3><p>​    Jmeter工具–性能测试，20000个线程同时运行，去访问接口，会出现卡顿现象；因为tomcat默认的工作线程数被打满了，没有多余的线程缓解压力和处理（tomcat最大活跃线程数200）</p>
<p>​    结论：这还只是服务提供者8001自己测试，假如外部消费者也来调用服务，那消费者只能干等，最终导致消费端不满意，服务端被拖死</p>
<h3 id="4-新建消费端加入"><a href="#4-新建消费端加入" class="headerlink" title="4. 新建消费端加入"></a>4. 新建消费端加入</h3><p><strong>hystrix一般用在消费端做降级</strong>（服务端也能用）</p>
<p>建新的消费端：cloud-consumer-feign-hystrix-order891</p>
<img src="/2022/09/27/SpringCloud/image-20220911111517704.png" alt="image-20220911111517704" style="zoom:80%;">

<p>pom：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">891</span></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">    service-url:</span><br><span class="line">      # 没开集群</span><br><span class="line">      defaultZone: http:<span class="comment">//eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>主启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 激活feign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain891</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain891.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 把该类注入进spring容器中（注入bean）</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)</span> <span class="comment">// 服务提供方8001</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.payment_OK(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.payment_Timeout(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<img src="/2022/09/27/SpringCloud/image-20220911111900321.png" alt="image-20220911111900321" style="zoom:80%;">

<p><font color="red">但是</font>用Jmeter将2W个线程压8001，消费端891要么转圈圈等待，要么返回超时报错</p>
<p>故障现象和导致原因：</p>
<p>​    8001同一层次的其他接口被困死，因为tomcat线程池里的工作线程已经被挤占，如果891再去访问8001就，客户端就容易出现卡顿。<strong>所以出现了降级、容错、限流等技术的诞生</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决问题：</span><br><span class="line">超时导致服务器变慢（转圈）----超时不再等待</span><br><span class="line">出错（宕机或程序运行出错）----出错要有兜底，有一个最终显示</span><br><span class="line"></span><br><span class="line">服务（8001）超时或者宕机了，调用者不能卡死一直等待，必须有服务降级</span><br><span class="line">服务（8001）业务ok，但是调用者自己出现故障或有自我要求（自己等待的时间小于服务提供者），自己处理j</span><br></pre></td></tr></table></figure>



<h3 id="5-服务降级"><a href="#5-服务降级" class="headerlink" title="5. 服务降级"></a>5. 服务降级</h3><p><font color="yellow">服务降级一般在消费端</font></p>
<h4 id="8001-fallback"><a href="#8001-fallback" class="headerlink" title="8001 fallback"></a>8001 fallback</h4><p>修改8001：设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，做降级处理fallback</p>
<p>业务类启用：<font color="yellow">@HystrixCommand</font></p>
<p>主启动类激活：<font color="yellow">@EnableCircuitBreaker</font></p>
<p>当前服务不可用了，就做服务降级</p>
<p>修改8001的 PaymentService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务降级注解</span></span><br><span class="line"><span class="comment">// 调用方法的峰值是3s，3s以内就是正常的业务逻辑payment_Timeout；超过3s了就报错，执行兜底的业务逻辑 fallback制定的类： payment_TimeoutHandler</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;payment_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 暂停几秒，为了触发服务降级</span></span><br><span class="line">    <span class="keyword">int</span> timeNumber = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池：  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  payment_Timeout,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;哈哈^_^,耗时：&quot;</span>+timeNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// payment_Timeout 服务出现问题后，找该方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_TimeoutHandler</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池：  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  系统繁忙，请稍后再试,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;oT_To&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8001主启动类添加注解：@EnableCircuitBreaker</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913093731894.png" alt="image-20220913093731894"></p>
<p>测试：设置程序运行峰值为3s，但程序需要5s，应该返回兜底逻辑部分</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913094043989.png" alt="image-20220913094043989"></p>
<img src="/2022/09/27/SpringCloud/image-20220913094720084.png" alt="image-20220913094720084" style="zoom:67%;">

<h4 id="890-fallback"><a href="#890-fallback" class="headerlink" title="890 fallback"></a>890 fallback</h4><p>yml：添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>主启动类添加注解：@EnableHystrix</p>
<p>修改890 controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeoutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentHystrixService.payment_Timeout(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeoutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是消费者80，对方支付系统繁忙，请10秒钟后再试或者检查自己运行程序，oT_To&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="yellow">修改Hystrix属性的话，建议重启，而不是热部署</font></p>
<p>测试：服务端最多等待3s，但是消费端最多只能等待1.5s，所以消费端直接 fallback</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913101004935.png" alt="image-20220913101004935"></p>
<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><ol>
<li><strong>每个业务方法都对应一个兜底方法，导致代码膨胀</strong></li>
</ol>
<p>统一和自定义的方法分开</p>
<p>解决办法：设置一个全局服务降级配置</p>
<img src="/2022/09/27/SpringCloud/image-20220913102718120.png" alt="image-20220913102718120">

<p>测试：服务降级会走全局配置</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913102823561.png" alt="image-20220913102823561"></p>
<ol start="2">
<li><strong>降级和业务逻辑混合在一起，耦合性太高，混乱</strong></li>
</ol>
<p>每个降级处理的业务逻辑都和主要业务混合在一块，非常混乱</p>
<p>服务降级，客户端去调用服务端，碰上服务端宕机或关闭</p>
<p>​    该案例服务降级处理是<font color="yellow">在客户端实现</font>，与服务端没有关系，只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可时间解耦</p>
<p><strong>未来我们要面对的异常：运行、超时、宕机</strong></p>
<p>所有的服务是从PaymentHystrixService接口中调用，新建一个类实现该接口并做服务降级</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913135545890.png" alt="image-20220913135545890"></p>
<p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件的注解，否则springboot容器扫描不到</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-payment_OK,  ·T_T·&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-payment_Timeout, ·T_T·&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220913135707530.png" alt="image-20220913135707530"></p>
<p>测试：启动7001，8001，891</p>
<p>正常调用：<img src="/2022/09/27/SpringCloud/image-20220913140036839.png" alt="image-20220913140036839"></p>
<p>关闭8001模仿宕机：<img src="/2022/09/27/SpringCloud/image-20220913135850157.png" alt="image-20220913135850157"></p>
<p>此时服务端已经宕机，但我们做了降级处理，让客户端在服务端不可用也会获得提示，不会挂起耗死服务器</p>
<h3 id="6-服务熔断"><a href="#6-服务熔断" class="headerlink" title="6. 服务熔断"></a>6. 服务熔断</h3><p>类似保险丝</p>
<p><strong>论文：</strong><a href="https://martinfowler.com/bliki/CircuitBreaker.html">CircuitBreaker (martinfowler.com)</a></p>
<p>熔断机制概述：</p>
<p>​    熔断机制是应对雪崩效应的一种微服务链路保护机制。当某个微服务不可用或响应时间过长时，会进行服务降级，进而熔断该节点的微服务调用，快速返回错误的响应信息。<font color="yellow">当检测到该节点的微服务调用响应正常后，恢复调用链路</font>(一种特殊的服务降级吧)</p>
<p>​    SpringCloud框架中，熔断机制通过Hystrix实现。当失败的调用到一定阈值时，缺省是5秒内20次调用失败，就会启动熔断机制。注解是 @HystrixCommand</p>
<p>修改8001 PaymentService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ======服务熔断</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;), //是否开启断路器</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;), //请求次数</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), //时间窗口期</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;), //失败率达到多少跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 故意传一个id为负数，作为运行时异常</span></span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;******id 不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// hutool工具类的生成唯一识别码的工具</span></span><br><span class="line">    String serialNumber = IdUtil.simpleUUID(); <span class="comment">// 等同于 UUID.randomUUID().toString()</span></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功，流水号： &quot;</span> + serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍后再试，/(ToT)/~~   id: &quot;</span>+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ======服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;*****result:&quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>id为正数：<img src="/2022/09/27/SpringCloud/image-20220913151240191.png" alt="image-20220913151240191" style="zoom:80%;"></p>
<p>id为负数：<img src="/2022/09/27/SpringCloud/image-20220913151302799.png" alt="image-20220913151302799"></p>
<p>多次提交负数后，达到熔断的条件<img src="/2022/09/27/SpringCloud/image-20220913151506352.png" alt="image-20220913151506352"></p>
<p>再当id为正数时，返回依旧是服务降级页面，链路还未恢复：<img src="/2022/09/27/SpringCloud/image-20220913151626374.png" alt="image-20220913151626374"></p>
<p>等一会链路就会自动恢复：<img src="/2022/09/27/SpringCloud/image-20220913151649816.png" alt="image-20220913151649816"></p>
<p>总结：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913153223459.png" alt="image-20220913153223459"></p>
<p>​    <font color="yellow">熔断类型：</font></p>
<ol>
<li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</li>
<li>熔断关闭：熔断关闭不会对服务进行熔断</li>
<li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>
</ol>
<p>​    <font color="yellow">断路器开启或关闭的条件：</font></p>
<ol>
<li>当满足一定的阀值时（默认是10s 内超过20个请求次数）</li>
<li>当失败率达到一定的时候（默认10s 内超过50%的请求失败）</li>
<li>当到达以上阀值，断路器将会开启</li>
<li>当开启的时候，所有请求都不会转发</li>
<li>一段时间后（默认是5s），这时断路器是半开状态，会让其中一个请求进行转发。(探子)如果成功，断路器会关闭，若失败，继续开启。重复4和5</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">断路器打开后，再有请求调用时，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现自动地发现错误并将降级逻辑切换为主逻辑，减少应用响应时间</span><br></pre></td></tr></table></figure>



<h3 id="7-Hystrix-Dashboard"><a href="#7-Hystrix-Dashboard" class="headerlink" title="7. Hystrix Dashboard"></a>7. Hystrix Dashboard</h3><p><strong>图形化监控</strong></p>
<p>新建监控平台 moudle：cloud-consumer-hystrix-dashboard9001</p>
<p>pom依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml：只用配置一个9001端口</p>
<p>主启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p>
<p><img src="/2022/09/27/SpringCloud/image-20220913162245171.png" alt="image-20220913162245171"></p>
<p><font color="yellow">注：要被监控的话，所有的微服务提供者必须有actuator依赖</font></p>
<p>修改8001的主启动类：主要是添加下头的配置</p>
<p>新版本 Hystrix 要在主启动类中指定监控路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 注册进 eureka</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment">     * ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;</span></span><br><span class="line"><span class="comment">     * 只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试：打开9001、7001、8001</p>
<p><img src="/2022/09/27/SpringCloud/image-20220913164018159.png" alt="image-20220913164018159"></p>
<p>访问：<a href="http://localhost:8001/payment/circuit/33">http://localhost:8001/payment/circuit/33</a> 和 <a href="http://localhost:8001/payment/circuit/-33">http://localhost:8001/payment/circuit/-33</a></p>
<p>多次的请求成功：<img src="/2022/09/27/SpringCloud/image-20220913164136533.png" alt="image-20220913164136533" style="zoom:67%;"></p>
<p>多次的请求失败：断路器打开    <img src="/2022/09/27/SpringCloud/image-20220913164218779.png" alt="image-20220913164218779" style="zoom:67%;"></p>
<p><font color="yellow">怎么看：</font></p>
<ol>
<li><p>7色<img src="/2022/09/27/SpringCloud/image-20220913164632728.png" alt="image-20220913164632728"></p>
</li>
<li><p>1圈：通过颜色变化代表实力的健康程度，绿色&lt;黄色&lt;橙色&lt;红色。流量越大，实心圆就越大，以此可以在大量实例中快速发现<font color="red">故障实例和高压力实例</font><img src="/2022/09/27/SpringCloud/image-20220913164942675.png" alt="image-20220913164942675" style="zoom:80%;"></p>
</li>
<li><p>1线     <img src="/2022/09/27/SpringCloud/image-20220913165012084.png" alt="image-20220913165012084"></p>
</li>
<li><p>整图说明<img src="/2022/09/27/SpringCloud/image-20220913165053249.png" alt="image-20220913165053249"></p>
</li>
</ol>
<h2 id="十三、服务网关-gateway"><a href="#十三、服务网关-gateway" class="headerlink" title="十三、服务网关 gateway"></a>十三、服务网关 gateway</h2><p>(技术快速迭代，构建体系，配置变多了。编码很重要，但得知道是干嘛的)</p>
<p>zuul服务网关和gateway新一代服务网关；zuul不再被维护，所以<strong>主要使用gateway</strong></p>
<p>谈谈对微服务网关的了解？</p>
<p>​    微服务网关是整个微服务API请求的入口，可以实现过滤Api接口。<br>​    作用：可以实现用户的验证登录、解决跨域、日志拦截、权限控制、限流、熔断、负载均衡、黑名单与白名单机制等。</p>
<p>​    </p>
<p>过滤器和网关的区别：过滤器适合单个服务实现过滤请求。网关拦截整个的微服务实现过滤请求，能够解决整个微服务中冗余代码。过滤器是局部拦截，网关实现全局拦截</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网关使用的是哪一个，为什么要用 gateway？比 zuul 好在哪？</span><br><span class="line">	Gateway，该项目借助Spring WebFlux的能力，打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由，并为它们提供各种增强功能，例如：安全性，监控和可伸缩性。</span><br><span class="line">	Zuul网关属于netflix公司开源产品，属于第一代微服务网关；Gateway属于SpringCloud自研发的网关框架，属于第二代微服务网关。</span><br><span class="line">	Zuul网关底层基于Servlet实现，阻塞式Api，不支持长连接。SpringCloudGateway基于Spring5构建，能够实现响应式非阻塞式的Api，支持长连接，能够更好的整合Spring体系的产品，依赖SpringBooot-WebFux</span><br></pre></td></tr></table></figure>

<p>​    Cloud全家桶中有个很重要的组件就是网关，在1.x版本中采用的都是Zuul网关，2.x版本中，zuul的升级一直跟不上，SpringCloud自己研发了一个网关替代Zuul<font color="yellow">gateway是原zuul1.x版的替代</font></p>
<p><img src="/2022/09/27/SpringCloud/image-20220914092459847.png" alt="image-20220914092459847"></p>
<p>​    SpringCloud Gateway 作为SpringCloud生态系统中的网关，目标是代替 Zuul，在SpringCloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本集成，仍然使用Zuul 1.x非Reactor模式的老版本。而为了提升网关性能，<font color="yellow">SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty</font></p>
<p>​    SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">微服务网关能干嘛？</span><br><span class="line">反向代理、鉴权、流量控制、熔断、日志监控</span><br></pre></td></tr></table></figure>

<img src="/2022/09/27/SpringCloud/image-20220914094157504.png" alt="image-20220914094157504" style="zoom: 50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpringCloud Gateway具有如下特性：</span><br><span class="line">1.基于Spring Framework 5，Project Reactor 和SpringBoot 2.0 进行创建</span><br><span class="line">2.动态路由：能够匹配任何请求属性。（重要）</span><br><span class="line">3.可以对路由指定 Predicate（断言）和 Filter（过滤器）。（重要）</span><br><span class="line">4.集成Hystrix的断路器功能</span><br><span class="line">5.集成 SpringCloud 服务发现功能</span><br><span class="line">6.易于编写 Predicate 和 Filter</span><br><span class="line">7.请求限流功能</span><br><span class="line">8.支持路径重写</span><br></pre></td></tr></table></figure>





<p><font color="pink">Zuul1.x模型：</font></p>
<p>SpringCloud中所集成的Zuul版本，采用的式Tomcat容器，使用的是传统的Servlet IO处理模型</p>
<p><font color="yellow">Servlet的生命周期？</font>servlet由servlet container进行生命周期管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">container启动时创造servlet对象并调用servlet init()进行初始化；</span><br><span class="line">container运行时接受请求，并为每个请求分配一个线程(一般从线程池中获取空闲线程)然后调用service()；</span><br><span class="line">container关闭时调用servlet destory()销毁servlet；</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220914102528926.png" alt="image-20220914102528926"></p>
<p><font color="yellow">上述模式的缺点：</font></p>
<p>​    servlet是一个简单的网络IO模型，当请求进入servlet container容器中时，servlet container就会为其绑定一个线程，在<strong>并发不高的场景下</strong>这种模型是适用的（进来一个请求，就绑定一个线程）。一旦是高并发场景下，线程数量就会上涨，而线程资源代价是昂贵的，严重影响请求的处理时间。在业务场景下，希望只用1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势</p>
<p>​    所以Zuul 1.x是<font color="red">基于servlet之上的一个阻塞式处理模型</font>，即spring实现了处理所有request请求的一个servlet并由该servlet阻塞式处理。</p>
<p><font color="pink">Gateway模型：</font></p>
<p>​    传统的web框架，如：struts2，springmvc等都是基于Servlet API与Servlet容器基础上运行的</p>
<p>但<strong>Servlet3.1之后有了异步非阻塞的支持</strong>。而WebFlux是一个典型非阻塞异步的框架，核心是基于Reactor的相关API实现的。相对于传统web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程</p>
<p><font color="pink">现在玩的都是响应式异步非阻塞模型</font></p>
<p>响应式布局：一个网站能够兼容多个终端。面对不同分辨率设备灵活性强，能够快捷解决多设备显示适应问题。</p>
<p>异步：多个任务执行或发生，可以并发地执行。（同步：多个任务执行或发生，必须逐个地进行执行）</p>
<p>阻塞：当某个事件或任务执行过程中，发出一个请求，但由于请求操作需要的条件不满足，会一直等待，直至条件满足</p>
<p>非阻塞：当某个事件或任务执行过程中，发出一个请求，如果请求操作条件不满足，会立即返回一个标志信息（如：暂时无法访问，诸如此类）</p>
<h3 id="1-gateway三大核心概念"><a href="#1-gateway三大核心概念" class="headerlink" title="1. gateway三大核心概念"></a>1. gateway三大核心概念</h3><p>Router(路由)：路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由(符合路由的匹配、转发规则)</p>
<p>Predicate(断言)：参考的是Java8的 java.util.function.Predicate，开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),<font color="yellow">如果请求与断言相匹配则进行路由</font></p>
<p>Filter(过滤)：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或之后对请求进行修改(断言过来后，还可以设置一些过滤条件)</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914111750199.png" alt="image-20220914111750199"></p>
<p><font color="pink">Gateway工作流程</font></p>
<p><img src="/2022/09/27/SpringCloud/image-20220914112001175.png" alt="image-20220914112001175"></p>
<p>客户端向 SpringCloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。</p>
<p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行逻辑中，然后返回。</p>
<p>过滤器间用虚线分开是因为过滤器可能会在发送代理请求之前(“pre”)或之后(“post”)执行业务逻辑</p>
<p>Filter在”pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等</p>
<p>在”post”类型的过滤器可以做响应内容、响应头的修改，日志的输出，流量监控等</p>
<p><font color="yellow">核心逻辑：路由转发+执行过滤器链</font></p>
<h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h3><p>新建网关工程：cloud-gateway-gateway9527</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914141745044.png" alt="image-20220914141745044"></p>
<p>pom：没有 web和actuator 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>gateway 依赖中集成了 webflux 和 reactor-netty (非阻塞式响应式编程的高性能框架)</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914142144565.png" alt="image-20220914142144565"></p>
<p>yml：网关也要注册到注册中心(Eureka、Consul、Zookeeper都行)</p>
<p>​    实现路由映射：cloud-provider-payment8001 controller的两个接口，get和lb</p>
<p>​    不想暴漏8001，希望在8001外头套一层9527</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914142455266.png" alt="image-20220914142455266"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 能找到-----为true，就访问</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>            <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>            <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<img src="/2022/09/27/SpringCloud/image-20220914142622963.png" alt="image-20220914142622963" style="zoom:50%;">

<p>主启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayMain9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>启动7001、8001、9527</p>
<p>两个微服务均被注册到Eurka；自测8001接口没问题，把接口改为9527</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914142825008.png" alt="image-20220914142825008"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220914142843243.png" alt="image-20220914142843243"></p>
<p>断言规则：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914143713912.png" alt="image-20220914143713912"></p>
<h3 id="3-gateway配置动态路由"><a href="#3-gateway配置动态路由" class="headerlink" title="3. gateway配置动态路由"></a>3. gateway配置动态路由</h3><p>存在的问题：yml配置中路径是写死的，我们需要实现负载均衡<img src="/2022/09/27/SpringCloud/image-20220914152205782.png" alt="image-20220914152205782"></p>
<p><font color="pink">通过微服务名实现动态路由</font></p>
<p>​    默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建<strong>动态路由进行转发，从而实现动态路由的功能</strong></p>
<p>启动：一个Eureka7001 + 两个服务提供 8001/8002</p>
<p>pom：spring-cloud-starter-netflix-eureka-client</p>
<p>yml配置：uri：统一资源标识符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要注意的是 uri 的协议为lb，表示启用Gateway的负载均衡功能</span><br><span class="line"></span><br><span class="line">lb://serviceName是spring cloud gateway 在微服务中自动为我们创建的负载均衡 uri</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span>     <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>            <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span>     <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>            <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>通过服务名去查找</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914153858596.png" alt="image-20220914153858596"></p>
<p>测试：发现两个接口在不停的互换</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914153957448.png" alt="image-20220914153957448"><img src="/2022/09/27/SpringCloud/image-20220914154014752.png" alt="image-20220914154014752"></p>
<h3 id="4-Predicate的使用"><a href="#4-Predicate的使用" class="headerlink" title="4. Predicate的使用"></a>4. Predicate的使用</h3><p>启动时会自动扫描配置；即 yml 中配置的 predicates</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914182556731.png" alt="image-20220914182556731"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220914183425573.png" alt="image-20220914183425573"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220914191618007.png" alt="image-20220914191618007"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">After=2022-09-14T18:29:48.268+08:00[Asia/Shanghai]</span> <span class="comment">#在这个时间后才能访问(时区是上海时间)</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Cookie=username,yyds</span> <span class="comment"># 需要携带Cookie才能访问</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span>      <span class="comment"># 请求头要有X-Request-Id属性并且值为整数的正则表达式</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Host=**.atguigu.com</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Method=GET</span>            <span class="comment"># 必须是get请求</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>            <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Query=username,</span> <span class="string">\d+</span>   <span class="comment"># 要有参数名username并且值是正整数才能路由</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><font color="pink">After Route Predicate</font></p>
</li>
<li><p><font color="pink">Before Route Predicate</font></p>
</li>
<li><p><font color="pink">Between Route Predicate</font></p>
<p><em>Before 、Between 和After同理</em></p>
</li>
<li><p><font color="pink">Cookie Route Predicate </font>：带Cookie和不带Cookie</p>
<p>需要两个参数，一个是Cookie name，一个是正则表达式。</p>
<p>路由规则会通过获取对应的Cookie name 值和正则表达式去匹配，如果匹配上就执行路由，没匹配上就不执行</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试工具一般有：Jmeter、Postman（图形界面）、curl（看成是postman的底层命令）</span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，cmd中；默认发送的是 Get请求</p>
<p>发送post请求： curl -X POST “http://…”</p>
<p>不带Cookie：curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p>
<img src="/2022/09/27/SpringCloud/image-20220914185803489.png" alt="image-20220914185803489" style="zoom:67%;">

<p>带Cookie：curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a> –cookie “username=yyds”</p>
<p><img src="/2022/09/27/SpringCloud/image-20220914190132655.png" alt="image-20220914190132655"></p>
<ol start="5">
<li><p><font color="pink">Header Route Predicate</font>: 一个属性名称和一个正 表达式，属性值和正则表达式匹配则执行</p>
<p>测试：请求头包含的是正整数，即可正确匹配</p>
<p>curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a> -H “X-Request-Id:123”  </p>
<p><img src="/2022/09/27/SpringCloud/image-20220914192656106.png" alt="image-20220914192656106"></p>
</li>
<li><p><font color="pink">Host Route Predicate</font>:加正确的请求地址才能匹配；不加直接报错</p>
<p>curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a> -H “Host: <a href="http://www.atguigu.com&quot;/">www.atguigu.com&quot;</a>  </p>
<p>curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a> -H “Host: new.atguigu.com”  </p>
</li>
<li><p><font color="pink">Method Route Predicate</font>：规定请求方法（GET/POST…）</p>
</li>
<li><p><font color="pink">Path Route Predicate</font>：路径</p>
</li>
<li><p><font color="pink">Query Route Predicate</font>：加参数名</p>
<p>curl <a href="http://localhost:9527/payment/lb?username=31">http://localhost:9527/payment/lb?username=31</a></p>
</li>
</ol>
<p><strong>总结：Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理</strong></p>
<h3 id="5-gateway的Filter的使用"><a href="#5-gateway的Filter的使用" class="headerlink" title="5. gateway的Filter的使用"></a>5. gateway的Filter的使用</h3><p>是什么：路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用</p>
<p>Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂来产生</p>
<p>种类：</p>
<p>​    1.GatewayFilter   单一的—31钟</p>
<p>​    2.GlobalFilter       全局的—10种</p>
<p><font color="pink">自定义全局过滤器 GlobalFilter</font></p>
<p><font color="yellow">使用前先把yml里请求中需要携带信息的断言配置注释掉</font></p>
<p>两个主要接口：implements  GlobalFilter，Ordered</p>
<p><em>能干嘛：</em>全局日志记录，统一网关鉴权…</p>
<img src="/2022/09/27/SpringCloud/image-20220915102209467.png" alt="image-20220915102209467" style="zoom:80%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 容器注入(在包下想要被扫描到一定要加的配置)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// chain:过滤器链</span></span><br><span class="line">        log.info(<span class="string">&quot;********come in MyLogGatewayFilter:    &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;******用户名为null，非法用户，(T__T)&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载过滤器的顺序，数字越小，优先级越高</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动7001、8001、8002、9527</p>
<p>正确地址：<a href="http://localhost:9527/payment/lb?uname=sd">localhost:9527/payment/lb?uname=sd</a></p>
<p>uname 的值是多少都行</p>
<p><img src="/2022/09/27/SpringCloud/image-20220915103140241.png" alt="image-20220915103140241"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220915112337654.png" alt="image-20220915112337654"></p>
<p><img src="D:/Typora/images/image-20220915103228782.png" alt="image-20220915103228782" style="zoom:67%;"><img src="/2022/09/27/SpringCloud/image-20220915103255817.png" alt="image-20220915103255817" style="zoom:67%;"></p>
<p><strong>ServerWebExchange接口：服务网络交换器</strong>，存放着重要的请求-响应属性、请求实例和响应实例等等</p>
<p>​    ServerHttpRequest接口：用于承载请求相关的属性和请求体</p>
<p>​    ServerHttpResponse接口：用于承载响应相关的属性和响应体</p>
<h3 id="gateway小结"><a href="#gateway小结" class="headerlink" title="gateway小结"></a>gateway小结</h3><p>​    过滤器是线性结构，只要设置了都会一个一个进入；一般放在全局配置。断言则是过滤器之后设置在接口上的规则，需要哪些请求信息</p>
<p>断言是用来判断访问是否符合路由规则，不符合报错404</p>
<p>过滤器是判断请求中是否有我要的信息，报错406</p>
<h2 id="十四、-SpringCloud-Config-分配式配置中心"><a href="#十四、-SpringCloud-Config-分配式配置中心" class="headerlink" title="十四、 SpringCloud Config 分配式配置中心"></a>十四、 SpringCloud Config 分配式配置中心</h2><p>大多配合使用：Config+Bus    后期逐渐被 Nacos 所替代</p>
<p><strong>当前微服务工程面对的问题：</strong>项目越来越多，重复的配置文件也越来越多。我们希望做到一次配置，处处生效</p>
<p>​    微服务意味着将单体应用中的业务拆分成一个个的子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一个集中式、动态的配置管理设施是必不可少的。</p>
<p>​    SpringCloud提供了ConfigServer来解决这个问题，如果每一个微服务都有一个application.yml，那上百个配置文件。。。想想都恐怖</p>
<p><img src="/2022/09/27/SpringCloud/image-20220915144556950.png" alt="image-20220915144556950"></p>
<p><font color="pink">配置中心是什么：</font>SpringCloud Config 为微服务架构中的微服务<strong>提供集中化的外部配置支持（一般就是Git或Github）</strong>，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置</p>
<p><font color="pink">怎么用：</font>SpringCloud Config 分为<strong>服务端和客户端两部分</strong></p>
<p>​    服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密、解密信息等访问接口</p>
<p>​    客户端通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动时从配置中心获取和加载配置信息。配置服务器默认采用git来存储信息，这样有助于对环境配置进行版本处理，并可以通过git客户端工具来方便管理和访问配置内容</p>
<p><font color="pink">能干嘛：</font></p>
<ol>
<li>集中管理配置文件</li>
<li>不同环境不同配置，动态化更新配置，分环境部署(dev/test/prod/beta/release)–(开发环境/测试/生产/预发布/发布)</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>将配置中心以REST接口的形式暴露——post、curl访问刷新均可</li>
</ol>
<p><strong>和GitHub整合使用：</strong>由于SpringCloud Config默认使用Git来存储配置文件(SVN和本地文件也可)，但最推荐Git，而且使用的是http/https访问的形式</p>
<p><strong>项目启动时去配置中心拉自己所需的配置</strong></p>
<h2 id="十五、-SpringCloud-Bus消息总线"><a href="#十五、-SpringCloud-Bus消息总线" class="headerlink" title="十五、 SpringCloud Bus消息总线"></a>十五、 SpringCloud Bus消息总线</h2><p>问题：</p>
<ol>
<li>config只能手动刷新，我们想做到自动刷新；</li>
<li>假如100台机子，想要实现全部刷新怎么办</li>
<li>怎么精确刷新，比如只更新98台，剩下2台不刷新</li>
</ol>
<p><strong>Bus支持两种消息代理：RabbitMQ 和 Kafka</strong></p>
<p><img src="/2022/09/27/SpringCloud/image-20220916145617320.png" alt="image-20220916145617320"></p>
<p>通过消息中间件来推送</p>
<p>SpringCloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，<font color="yellow">它整合了Java的事件处理机制和消息中间件的功能</font></p>
<p>第1、2步，推送新的配置到git，更新到配置中心里；第3步，POST请求广播全局刷新</p>
<p><font color="pink">什么是总线：</font></p>
<p>​    微服务架构系统中，通常会使用<strong>轻量级的消息代理</strong>来构建一个<strong>共用的消息主题</strong>，并让系统中所有微服务实例都连接上来。<em><strong>由于该主题的消息会被所有实例监听和消费，所有称为消息总线</strong></em>。在总线上的各个实例，都能广播一些让连接在该主题上的其他实例都知道的消息</p>
<p><font color="pink">基本原理：</font></p>
<p>​    ConfigClient实例都监听MQ中同一个topic(默认是SpringCloudBus)。当一个服务刷新数据时，它会把这个信息放到topic中，这样其他监听同一个topic的服务就能得到通知，在更新自身配置</p>
<h3 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h3><p>RabbitMQ需要Erlang环境支持</p>
<p>下载Erlang</p>
<p>版本对照表：<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ Erlang Version Requirements — RabbitMQ</a></p>
<h2 id="十六、-SpringCloud-Stream-消息驱动"><a href="#十六、-SpringCloud-Stream-消息驱动" class="headerlink" title="十六、 SpringCloud Stream 消息驱动"></a>十六、 SpringCloud Stream 消息驱动</h2><p>消息中间件：基于队列与消息传递技术，在网络环境中为应用系统提供同步或异步、可靠的信息传输的支撑性软件系统</p>
<p>解决的问题：不同端之间（后端和大数据端使用不同的消息中间件）会存在多种MQ(消息中间件)，如：ActiveMQ、RabbitMQ、RocketMQ、Kafka。需要一种新技术，让我们不在关注具体的MQ细节，我们只需要用一种适配绑定的方式，自动可以在各种MQ内切换。</p>
<p><font color="pink">SpringCloud Stream</font></p>
<p>​    是一个构建消息驱动微服务的框架，我们通过配置来binding(绑定)，而SpringCloud Stream的<strong>binder</strong>对象负责与消息中间件交互。</p>
<p>​    <strong>目前仅支持RabbitMQ、Kafka</strong></p>
<p>标准的MQ：<img src="/2022/09/27/SpringCloud/image-20220919092659451.png" alt="image-20220919092659451"></p>
<p>生产者、消费者之间靠<strong>消息</strong>媒介传递信息内容——Message</p>
<p>消息必须走特定的<strong>通道</strong>——–消息通道MessageChannel</p>
<p>消息通道里的消息如何被消费，谁负责收发<strong>处理</strong>——–消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅（订阅就发送，不订阅就不发送）</p>
<p>引入Stream</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919093818379.png" alt="image-20220919093818379"></p>
<p>这些中间件的差异性，对我们实际项目开发造成一定的困扰性，如果我们用了两个消息队列的其中一种，后面的业务需求需要使用另外一种，很多东西都要推倒重做，因为和系统耦合了，这时SpringCloud Stream给我们提供了一种解耦合的方式</p>
<p>​    通过定义绑定器作为中间层，完美实现<font color="yellow">应用程序与消息中间件细节之间的隔离</font>。通过向应用程序暴露统一的Channel通道，使应用程序不需要考虑各种不同的消息中间件实现</p>
<p><font color="yellow">通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离</font></p>
<p>Binder：INPUT对应消费者      OUTPUT对应生产者</p>
<h3 id="1-Stream标准流程套路"><a href="#1-Stream标准流程套路" class="headerlink" title="1. Stream标准流程套路"></a>1. Stream标准流程套路</h3><img src="/2022/09/27/SpringCloud/image-20220919101013778.png" alt="image-20220919101013778" style="zoom: 50%;">

<img src="/2022/09/27/SpringCloud/image-20220919101043845.png" alt="image-20220919101043845" style="zoom: 50%;">

<ul>
<li>Binder—–方便的连接中间件，屏蔽差异</li>
<li>Channel——通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</li>
<li>Source和Sink—– 简单理解为参照对象是SpringCloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</li>
</ul>
<p><img src="/2022/09/27/SpringCloud/image-20220919101553918.png" alt="image-20220919101553918"></p>
<h3 id="2-消息驱动生产者"><a href="#2-消息驱动生产者" class="headerlink" title="2. 消息驱动生产者"></a>2. 消息驱动生产者</h3><p>cloud-steam-rabbitmq-provider8801</p>
<p>pom：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--stream-rabbit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        web启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        监控接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>  <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    lease-renewal-interval-in-seconds: 2 # 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line"><span class="comment">#    lease-expiration-duration-in-seconds: 5 # 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line"><span class="comment">#    instance-id: send-8801.com  # 在信息列表时显示主机名称-发送者8801</span></span><br><span class="line"><span class="comment">#    prefer-ip-address: true     # 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>

<p>主启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudStreamRabbitmqProvider8801Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CloudStreamRabbitmqProvider8801Application.class, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service: 和消息中间件打交道的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProviderService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义消息的推送管道--消息的发送者</span></span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Source;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调的是消息中间件的service，不是dao层，所以用的不是@Service注解</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProviderServiceImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProviderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">// 消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 消息构造器</span></span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;*****serial: &quot;</span> + serial);</span><br><span class="line">        <span class="keyword">return</span> serial;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProviderService messageProviderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProviderService.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-消息驱动消费者"><a href="#3-消息驱动消费者" class="headerlink" title="3. 消息驱动消费者"></a>3. 消息驱动消费者</h3><p>cloud-stream-rabbitmq-consumer8802</p>
<p>pom和上头一样</p>
<p>yml: 主要是在 bindings 处修改为 input</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>  <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    lease-renewal-interval-in-seconds: 2 # 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line"><span class="comment">#    lease-expiration-duration-in-seconds: 5 # 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line"><span class="comment">#    instance-id: receive-8802.com  # 在信息列表时显示主机名称</span></span><br><span class="line"><span class="comment">#    prefer-ip-address: true     # 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>

<p>主启动</p>
<p>controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span> <span class="comment">// 作为一个输入源监听</span></span><br><span class="line">    <span class="comment">// output 发的时候使用的String，这边收就也是 String</span></span><br><span class="line">    <span class="comment">// output 使用的 withPayload，input 收就使用 getPayload</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;port:&quot;</span> + serverPort + <span class="string">&quot;\t接受：&quot;</span> + message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-分组消费与持久化-重要"><a href="#4-分组消费与持久化-重要" class="headerlink" title="4. 分组消费与持久化 重要*"></a>4. 分组消费与持久化 重要*</h3><p>存在问题：</p>
<ol>
<li>重复消费</li>
<li>消息持久化</li>
</ol>
 <img src="/2022/09/27/SpringCloud/image-20220919163535543.png" alt="image-20220919163535543" style="zoom: 67%;">

<p>​    默认分组或者还没分组时，提供服务方是集群环境，可能会导致一个服务发送过来后，被两个或多个服务获取到。就会造成数据错误；比如可能会扣除两次款</p>
<p><font color="yellow">不同组是可以全面消费的(重复消费)</font></p>
<p><font color="yellow">同一个组内是竞争关系，只有其中一个可以消费</font></p>
<p><strong>自定义分组</strong>：A、B (不自定义就是随机的流水号)   此组即为消费组</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919164846437.png" alt="image-20220919164846437"></p>
<img src="/2022/09/27/SpringCloud/image-20220919165343013.png" alt="image-20220919165343013" style="zoom:67%;">

<img src="/2022/09/27/SpringCloud/image-20220919165409551.png" alt="image-20220919165409551" style="zoom:67%;">

<p>同一个组的多个微服务案例，每次只会有一个获取调用，会轮询调用</p>
<p><strong>持久化</strong>：避免消息丢失(添加分组后)</p>
<p>​    在业务死掉后重启，依然可以获取业务停止时请求的服务信息</p>
<h2 id="十七、-SpringCloud-Sleuth-分布式请求链路跟踪"><a href="#十七、-SpringCloud-Sleuth-分布式请求链路跟踪" class="headerlink" title="十七、 SpringCloud Sleuth 分布式请求链路跟踪"></a>十七、 SpringCloud Sleuth 分布式请求链路跟踪</h2><p><font color="pink">为什么会出现这项技术：</font></p>
<p>​    在微服务框架中，一个由客户端发起的请求在后端会调用多个不同的服务节点来协同得到最后的结果，每一个前端请求都会形成一个复杂的分布式服务调用链路，链路中任何一环出现高延时或错误都会引起整个请求的最后失败</p>
<p>获得每一个调用节点的完整的轨迹图</p>
<p>SpringCloud Sleuth提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并兼容支持zipkin</p>
<img src="/2022/09/27/SpringCloud/image-20220919190446834.png" alt="image-20220919190446834" style="zoom:50%;">

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>下载zipkin jar包<a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">Central Repository: io/zipkin/zipkin-server (maven.org)</a></p>
<img src="/2022/09/27/SpringCloud/image-20220919191215337.png" alt="image-20220919191215337" style="zoom: 80%;">

<p>也就是 sleuth 整合了 zipkin；或者说SpringCloud借鉴了zipkin然后换了个名字</p>
<p>运行jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-2.23.9-exec.jar</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220919191532515.png" alt="image-20220919191532515"></p>
<p>访问：localhost：9411</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919191557173.png" alt="image-20220919191557173"></p>
<p>​    一个完整的请求链路，每条链路都用一个Trace Id唯一标识，Span标识发起的请求信息，各Span通过 parent id 关联起来</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919191923670.png" alt="image-20220919191923670"></p>
<p>Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识</p>
<p>span：标识调用链路来源，通俗理解span就是一次请求信息</p>
<p>案例：使用8001和888做示范</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919193604606.png" alt="image-20220919193604606"></p>
<p>pom：两个都新增</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>8001 yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">  	<span class="comment"># 内容发布到9411</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment"># 采样率值介于 0 到 1 之间，1 表示全部采集；一般不用设为 1</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220919193246798.png" alt="image-20220919193246798"></p>
<p>8001 controller: 写一个简单的测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi, I am paymentZipkin server fall back, welcome to here ^_^&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>888 yml：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919193804706.png" alt="image-20220919193804706"></p>
<p>888 controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ====&gt; zipkin + sleuth</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String result = restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span> + <span class="string">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依次启动 7001/8001/888</p>
<p>多次调用查看zipkin的内容</p>
<p><img src="/2022/09/27/SpringCloud/image-20220919194743940.png" alt="image-20220919194743940"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220919194752736.png" alt="image-20220919194752736"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220919194840893.png" alt="image-20220919194840893"></p>
<h2 id="十八、-SpringCloud-Alibaba简介"><a href="#十八、-SpringCloud-Alibaba简介" class="headerlink" title="十八、 SpringCloud Alibaba简介"></a>十八、 SpringCloud Alibaba简介</h2><p>SpringCloud Netflix项目进入维护模式(不再开发新的组件)</p>
<p>官网：<a href="https://spring.io/projects/spring-cloud-alibaba">Spring Cloud Alibaba</a></p>
<p>英文：<a href="https://github.com/alibaba/spring-cloud-alibaba">https://github.com/alibaba/spring-cloud-alibaba</a></p>
<p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p>
<p>中文：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2.2.x/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/2.2.x/README-zh.md</a></p>
<h2 id="十九、-SpringCloud-Alibaba-Nacos服务注册和配置中心"><a href="#十九、-SpringCloud-Alibaba-Nacos服务注册和配置中心" class="headerlink" title="十九、 SpringCloud Alibaba Nacos服务注册和配置中心"></a>十九、 SpringCloud Alibaba Nacos服务注册和配置中心</h2><p>前四个字母是Naming和Configuration的前两个字母，最后s为Service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</span><br></pre></td></tr></table></figure>

<p>Nacos就是注册中心+配置中心的组合  ====》Nacos = Eureka +Config + Bus</p>
<h3 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1. 下载和安装"></a>1. 下载和安装</h3><p>官网：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p>
<p>下载：<a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p>
<p>下载后解压：<img src="/2022/09/27/SpringCloud/image-20220920102721472.png" alt="image-20220920102721472"></p>
<p>进入bin目录下，cmd打开，单机模式下启动：   <strong>startup.cmd -m standalone</strong></p>
<p><img src="/2022/09/27/SpringCloud/image-20220920102853858.png" alt="image-20220920102853858"></p>
<p>访问地址：localhost:8848/nacos</p>
<p>默认用户名和密码：nacos</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920103015574.png" alt="image-20220920103015574"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220920103038835.png" alt="image-20220920103038835"></p>
<h3 id="2-Nacos-作服务注册中心"><a href="#2-Nacos-作服务注册中心" class="headerlink" title="2. Nacos 作服务注册中心"></a>2. Nacos 作服务注册中心</h3><h4 id="1-gt-服务提供者"><a href="#1-gt-服务提供者" class="headerlink" title="1&gt; 服务提供者"></a>1&gt; 服务提供者</h4><p><strong>new Moudle</strong>：cloudAlibaba-provider-payment9001</p>
<p>配置的案例跟官网走就好：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p>
<p><img src="/2022/09/27/SpringCloud/image-20220920140404693.png" alt="image-20220920140404693"></p>
<p>父pom中：springcloud alibaba 的依赖版本是 2.1.0.RELEASE</p>
<p>pom：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot 整合web组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把要监控的东西暴露出来</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>main启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverport: &quot;</span> + serverPort + <span class="string">&quot;\t id&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：启动 nacos，启动9001</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920140841727.png" alt="image-20220920140841727"></p>
<p>为方便演示负载均衡，创建一个相同的9002</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920142126064.png" alt="image-20220920142126064"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220920142311167.png" alt="image-20220920142311167"></p>
<h4 id="2-gt-服务消费者"><a href="#2-gt-服务消费者" class="headerlink" title="2&gt; 服务消费者"></a>2&gt; 服务消费者</h4><p>cloudAlibaba-consumer-nacos-order83</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920144757836.png" alt="image-20220920144757836"></p>
<p>pom：都差不多的</p>
<p>nacos默认自带负载均衡</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920144904376.png" alt="image-20220920144904376"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot 整合web组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml：把微服务地址直接配置在配置文件中，就不用业务类里定义了</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把微服务名称写到配置文件中，业务代码中就不用写了，直接引入</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure>

<p>config: 负载均衡配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 通过微服务命令找到了，但其下有很多实例，不知道该用哪个；所以需要该注解</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动就是正常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br></pre></td></tr></table></figure>

<p>启动 nacos/9001/9002/83</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920145122956.png" alt="image-20220920145122956"></p>
<h4 id="3-gt-Nacos-注册中心对比"><a href="#3-gt-Nacos-注册中心对比" class="headerlink" title="3&gt; Nacos 注册中心对比"></a>3&gt; Nacos 注册中心对比</h4><p><font color="pink">支持CP 和 AP 之间切换</font></p>
<p>Nacos的一致性协议： CP+AP</p>
<p><img src="/2022/09/27/SpringCloud/image-20220920145958869.png" alt="image-20220920145958869"></p>
<p><font color="yellow">C:所有节点在同一时间看到的数据是一致的(你有的和我有的是一样的)</font></p>
<p><font color="yellow">A:高可用(行不行的都要给我拽一个)</font></p>
<p>可以使用命令行在 CP 和 AP 之间切换</p>
<h3 id="3-Nacos-作服务配置中心"><a href="#3-Nacos-作服务配置中心" class="headerlink" title="3. Nacos 作服务配置中心"></a>3. Nacos 作服务配置中心</h3><p>cloudAlibaba-config-nacos-client3377</p>
<p>pom: 基本以后用 nacos，就导入 config 和 discovery 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml：两个配置文件</p>
<p>​    Nacos同 springcloud-config 一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置后才能正常启动</p>
<p>springboot中配置文件加载是有优先级的，bootstrap 高于 application</p>
<p>所以全局的放在 bootstrap         自己的放在 application</p>
<p>bootstrap.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nacos 配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos 服务注册中心地址</span></span><br><span class="line">      <span class="comment"># 3377 去 Nacos 上去读后缀名为 yaml的文件</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos 配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 指定 yaml 格式的配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br></pre></td></tr></table></figure>

<p>配置中心配置的命名公式：</p>
<ul>
<li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项<code>spring.cloud.nacos.config.prefix</code>来配置。</li>
<li><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles">Spring Boot文档</a>。 <strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></strong></li>
<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li>
</ul>
<p><font color="yellow">所以配置文件名为：    nacos-config-client-dev.yaml</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yml是YAML（YAML Ain’t Markup Language）语言的文件</span><br></pre></td></tr></table></figure>



<p>application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev  # 表示开发环境</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220921111949481.png" alt="image-20220921111949481"></p>
<p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 支持 Nacos 的动态刷新功能(实现配置自动更新)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 和8848 Nacos 服务器上的配置文件同名</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Value 中匹配的是从配置中心拉过来的内容；所以写法是按照配置中心里的配置来写的</p>
<p>详情看下头自己写的 YAML 内容</p>
<p>Nacos 配置</p>
<p><img src="/2022/09/27/SpringCloud/image-20220921092029629.png" alt="image-20220921092029629"></p>
<img src="/2022/09/27/SpringCloud/image-20220921092109404.png" alt="image-20220921092109404" style="zoom:67%;">



<p>名称对应：<img src="/2022/09/27/SpringCloud/image-20220921092158393.png" alt="image-20220921092158393"></p>
<p>启动3377测试：<img src="/2022/09/27/SpringCloud/image-20220921093001459.png" alt="image-20220921093001459"></p>
<p>自带动态刷新：修改Nacos中的yaml配置文件，再次调用查看配置的接口，发现配置已经刷新</p>
<p>​    nacos中修改配置信息</p>
<p><img src="/2022/09/27/SpringCloud/image-20220921093140109.png" alt="image-20220921093140109"></p>
<h3 id="4-Nacos-多环境配置"><a href="#4-Nacos-多环境配置" class="headerlink" title="4. Nacos 多环境配置"></a>4. Nacos 多环境配置</h3><p>​    就像Maven用groupId、artifactId、version三者来定位jar包在仓库中的位置一样，Nacos也提供了 Namespace 、Data ID 、Group  来确定一个配置文件（或者叫配置集）</p>
<p>实现多环境配置方案：</p>
<ol>
<li>命名空间 (namesapce)区分：一个命名空间对应一个环境</li>
<li>配置组 (group)区分：命名空间默认public即可，一个组对应一种环境</li>
<li>配置集ID (Data ID)区分：命名空间和组用默认的，通过文件名来区分</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多环境多项目管理：</span><br><span class="line">	问题1：</span><br><span class="line">		实际开发中，一个系统通常会有dev，test，prod环境；需要保证指定环境启动时能正确读取到Nacos上相应的配置文件</span><br><span class="line">	问题2：</span><br><span class="line">		一个大型分布式微服务会有很多微服务子项目，每个子项目又会有很多相应的环境</span><br></pre></td></tr></table></figure>

<p>配置管理：<img src="/2022/09/27/SpringCloud/image-20220921105209346.png" alt="image-20220921105209346"></p>
<p>public 命名空间是兜底的，不能删(想删也删不掉)</p>
<img src="/2022/09/27/SpringCloud/image-20220921105723620.png" alt="image-20220921105723620" style="zoom: 67%;">

<p>最外层 namespace 是用于区分部署环境的，Group 和 DataID逻辑上区分目标对象</p>
<img src="/2022/09/27/SpringCloud/image-20220921105511915.png" alt="image-20220921105511915" style="zoom: 50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认情况：</span><br><span class="line">Namespace = public</span><br><span class="line">Group = DEFAULT_GROUP</span><br><span class="line">默认Cluster(集群)是DEFAULT</span><br><span class="line">Instance(实例)</span><br></pre></td></tr></table></figure>



<h4 id="1-gt-DataID配置"><a href="#1-gt-DataID配置" class="headerlink" title="1&gt; DataID配置"></a>1&gt; DataID配置</h4><p><img src="/2022/09/27/SpringCloud/image-20220921111429650.png" alt="image-20220921111429650"></p>
<h4 id="2-gt-Group-分组"><a href="#2-gt-Group-分组" class="headerlink" title="2&gt; Group 分组"></a>2&gt; Group 分组</h4><p>DataID相同，组不同</p>
<p><img src="/2022/09/27/SpringCloud/image-20220921112104705.png" alt="image-20220921112104705"></p>
<p>bootstrap中设置group，设哪个就找哪个</p>
<p><img src="/2022/09/27/SpringCloud/image-20220921112233585.png" alt="image-20220921112233585"></p>
<h4 id="3-gt-Namespace"><a href="#3-gt-Namespace" class="headerlink" title="3&gt; Namespace"></a>3&gt; Namespace</h4><p><img src="/2022/09/27/SpringCloud/image-20220921112747601.png" alt="image-20220921112747601"></p>
<img src="/2022/09/27/SpringCloud/image-20220921112723376.png" alt="image-20220921112723376" style="zoom:67%;">

<p>在不同的 namespace 下建配置就好</p>
<p>使用：在不同 namespace 下创建配置就好</p>
<p><img src="/2022/09/27/SpringCloud/image-20220921135949238.png" alt="image-20220921135949238"></p>
<p>层级结构：namespace &gt; group &gt; data id</p>
<h3 id="5-Nacos-集群和持久化-重要"><a href="#5-Nacos-集群和持久化-重要" class="headerlink" title="5. Nacos 集群和持久化(重要)"></a>5. Nacos 集群和持久化(<em>重要</em>)</h3><p>部署生产集群模式，要在 Linux 环境下部署；使用 MySQL(高可用数据库)</p>
<p>光配到Nacos上还不够，容易出现问题，还要放到数据库中</p>
<img src="/2022/09/27/SpringCloud/image-20220921140806272.png" alt="image-20220921140806272" style="zoom:50%;">

<p>最终的数据源一致（都汇聚到mysql中）</p>
<p>Nacos 自带一个内嵌的数据库–derby ，若启动多个Nacos，数据会存在一致性问题，或配置丢失问题</p>
<p>所以 Nacos 采用集中式存储的方式来支持集群化部署，目前只支持 mysql</p>
<p><strong>Nacos 支持三种部署方式</strong></p>
<ul>
<li>单机模式 - 用于测试和单机试用</li>
<li>集群模式- 用于生产环境，确保高可用</li>
<li>多集群模式 - 用于多数据中心场景</li>
</ul>
<p>单机模式下，把 derby 替换成 mysql，具体参考官网（部署手册 ——– 单机模式支持mysql）：<a href="https://nacos.io/zh-cn/docs/deployment.html">https://nacos.io/zh-cn/docs/deployment.html</a></p>
<p>集群模式：<img src="/2022/09/27/SpringCloud/image-20220921145852227.png" alt="image-20220921145852227"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220921145729390.png" alt="image-20220921145729390"></p>
<p><font color="pink">Linux版的下载安装：</font></p>
<p>github上下载Linux版本，到虚拟机中，拷贝到 /opt 下解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nacos-server-1.4.4.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220921162013141.png" alt="image-20220921162013141"></p>
<p>解压后，会有一个nacos文件夹；拷贝到新创建的 mynacos 文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hspEdu01 opt]<span class="comment"># cp -r nacos /mynacos/</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220921162232625.png" alt="image-20220921162232625"></p>
<p>步骤：</p>
<ol>
<li>Linux 上配置mysql</li>
<li>application.properties 配置修改———把nacos默认的数据库改为指向mysql</li>
<li>Linux 服务器上 nacos 的集群配置 cluster.conf———–梳理出同一集群的端口号，比方三台机器就有三个不同的端口号(IP地址要设置成Linux的地址)</li>
<li>编辑Nacos的启动脚本 start.sh，使它可以接受使用不同端口</li>
<li>Nginx配置，作为负载均衡器</li>
</ol>
<img src="/2022/09/27/SpringCloud/image-20220922103752093.png" alt="image-20220922103752093" style="zoom: 50%;">



<h2 id="二十、-SpringCloud-Alibaba-Sentinel-实现熔断和限流"><a href="#二十、-SpringCloud-Alibaba-Sentinel-实现熔断和限流" class="headerlink" title="二十、 SpringCloud Alibaba Sentinel 实现熔断和限流"></a>二十、 SpringCloud Alibaba Sentinel 实现熔断和限流</h2><p>官网：<a href="https://sentinelguard.io/zh-cn/docs/introduction.html">https://sentinelguard.io/zh-cn/docs/introduction.html</a></p>
<p><img src="/2022/09/27/SpringCloud/image-20220922153424783.png" alt="image-20220922153424783"></p>
<p>下载：<a href="https://github.com/alibaba/Sentinel/releases">Releases · alibaba/Sentinel (github.com)</a></p>
<p><img src="/2022/09/27/SpringCloud/image-20220922154206331.png" alt="image-20220922154206331"></p>
<p>cmd中运行jar包， 访问localhost：8080，默认用户名和密码 sentinel</p>
<p><img src="/2022/09/27/SpringCloud/image-20220922155757350.png" alt="image-20220922155757350"></p>
<h3 id="1-演示工程"><a href="#1-演示工程" class="headerlink" title="1. 演示工程"></a>1. 演示工程</h3><p>new Moudle：  cloudAlibaba-sentinel-service8401</p>
<p>pom：使用 nacos+sentinel 的话，基本前3个依赖都加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud alibaba sentinel-datasource-nacos 后续持久化使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#Nacos 服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描，直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#actuator 端点启用和暴露</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>主启动：</p>
<p>@EnableDiscoveryClient ——– 让注册中心能够发现</p>
<p>@SpringBootApplication</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：启动 Nacos、Sentinel，启动微服务</p>
<p>​    因为Sentinel是懒加载机制，需要调用接口后才能看到信息</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923094656289.png" alt="image-20220923094656289"></p>
<h3 id="2-流控规则"><a href="#2-流控规则" class="headerlink" title="2. 流控规则"></a>2. 流控规则</h3><p><font color="pink">流量限制控制规则</font></p>
<img src="/2022/09/27/SpringCloud/image-20220923095115034.png" alt="image-20220923095115034" style="zoom:50%;">

<ul>
<li>资源名：唯一名称，默认请求路径</li>
<li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认default(不区分来源)</li>
<li>阈值类型/单机阈值：<ul>
<li>QPS(每秒请求数量)：当调用该 api 的QPS达到阈值时，进行限流</li>
<li>线程数：当调用该 api 线程数达到阈值时，进行限流</li>
</ul>
</li>
<li>是否集群</li>
<li>流控模式：<ul>
<li>直接：api达到限流条件时，直接限流</li>
<li>关联：当关联的资源达到阈值时，就限流自己</li>
<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流） 【api级别的限流】</li>
</ul>
</li>
<li>流控效果：<ul>
<li>快速失败：直接失败，抛异常</li>
<li>Warm Up：根据codeFactor（冷加载因子，默认3）的值，从阈值➗codeFactor，经过预热时长，才达到QPS阈值</li>
<li>排队等待：匀速排队，让请求匀速通过，阈值类型必须设置为QPS，否则无效</li>
</ul>
</li>
</ul>
<p>2.1 流控模式</p>
<p><strong>直接：</strong>    1s请求1次可以，多了直接报错<img src="/2022/09/27/SpringCloud/image-20220923101532204.png" alt="image-20220923101532204"></p>
<p>访问量1s超过1次：默认报错<img src="/2022/09/27/SpringCloud/image-20220923101707345.png" alt="image-20220923101707345"></p>
<p><font color="yellow">思考：当访问失败时，我们需要能够自己处理问题，也就是允许用户自定义</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPS:每秒允许访问的请求量</span><br><span class="line">线程数:高并发的请求过来(QPS很高)，线程数为1，相当于我前台工作人员只有1个，只能接待一个服务，当前服务未结束，后面再来的就要报错</span><br></pre></td></tr></table></figure>



<p><strong>关联：</strong>当关联的资源达到阈值，就限流自己（连坐效应，比方支付模块到阈值，就限流下单）</p>
<p>当与A关联的B达到阈值时，限流A——–B惹事，A挂了</p>
<p>解释：这边压力大，那边就别进来了</p>
<img src="/2022/09/27/SpringCloud/image-20220923103552569.png" alt="image-20220923103552569" style="zoom:50%;">

<p>模拟：使用 postman 让B不停的请求；访问地址添加进多线程集合组</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923105245997.png" alt="image-20220923105245997"></p>
<p>Run，大批量线程高并发访问B，导致A失败</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923104810531.png" alt="image-20220923104810531"></p>
<p>20个线程结束后，调用A回复正常</p>
<h3 id="3-流控效果"><a href="#3-流控效果" class="headerlink" title="3. 流控效果"></a>3. 流控效果</h3><p>直接 ==》 快速失败（默认的流控处理）</p>
<p><strong>预热：</strong>冷启动的方式；当系统长期无人问津，突然拉高访问量，容易把系统压垮。通过冷启动，让通过的流量缓慢增加，在一段时间内逐渐达到阈值上限。</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923110731919.png" alt="image-20220923110731919"></p>
<p>默认 coldFactor 为3，即请求QPS从（coldFactor /3）经多少预热时间才逐渐升至设定的QPS阈值</p>
<p>例子：阈值为10，预热时间5s</p>
<p>系统初始化阈值为10/3，约为3，即阈值刚开始为3；经过5s后阈值慢慢升高到10</p>
<p><strong>排队等待：</strong>严格控制请求通过的间隔时间，就是让请求以均匀速度通过；对应漏桶算法</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923111530999.png" alt="image-20220923111530999"></p>
<p>匀速排队，让请求以均匀速度通过，阈值类型必须是QPS，否则无效</p>
<p>设置含义：/testB每秒请求1次，超过就排队等待，等待超时时间为20000ms</p>
<p>测试：postman高并发多线程测试即可(一次一堆请求过来)</p>
<h3 id="4-熔断规则"><a href="#4-熔断规则" class="headerlink" title="4. 熔断规则"></a>4. 熔断规则</h3><p><img src="/2022/09/27/SpringCloud/image-20220923134330816.png" alt="image-20220923134330816"></p>
<ul>
<li><p>慢调用比例</p>
<p>指耗时大于阈值RT的请求称为慢调用，阈值RT由用户设置</p>
<p>请求数大于最小请求数并且慢调用的比率大于比例阈值则发生熔断，熔断时长为用户自定义设置。</p>
</li>
<li><p>异常比例（秒级）</p>
<p>QPS &gt;= 5 且异常比例（秒级统计）超过阈值时，触发降级；时间窗口结束后，关闭降级</p>
</li>
<li><p>异常数（分钟级）</p>
<p>异常数（分钟统计）超过阈值时， 触发降级，时间窗口结束后，关闭降级</p>
</li>
</ul>
<h3 id="5-Sentinel-热点key"><a href="#5-Sentinel-热点key" class="headerlink" title="5. Sentinel 热点key"></a>5. Sentinel 热点key</h3>  <img src="/2022/09/27/SpringCloud/image-20220923144309319.png" alt="image-20220923144309319" style="zoom:50%;">

<p>热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K数据</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923153843310.png" alt="image-20220923153843310"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220923153854007.png" alt="image-20220923153854007"></p>
<p>代码设置：设置热点规则后的兜底函数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span><span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-------deal_testHotKey,sorry T_T&quot;</span>; <span class="comment">// sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法testHotKey里面第一个参数只要QPS超过每秒1次，马上降级处理</p>
<p>本来应该是报我自定义的返回信息，这块可能是jar包冲突了所以直接成页面报错信息了 SOS</p>
<p><img src="/2022/09/27/SpringCloud/image-20220923155510881.png" alt="image-20220923155510881"></p>
<p>注： 参数中只要有 p1 就会报问题；如果只携带 p2 是不会触发降级的</p>
<p><strong>参数例外项</strong></p>
<p>只要当 p1=5 时，阈值可变为200</p>
<img src="/2022/09/27/SpringCloud/image-20220923161040379.png" alt="image-20220923161040379" style="zoom:50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SentinelResource 只管配置出错；若是程序出错，改报异常就是异常</span><br></pre></td></tr></table></figure>



<h3 id="6-SentinelResource"><a href="#6-SentinelResource" class="headerlink" title="6. @SentinelResource"></a>6. @SentinelResource</h3><p>从 HystrixCommand 到 @SentinelResource</p>
<p>8401 项目，pom 导入自定义的 ja r包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>controller</p>
<p>两种方法都可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 按资源名测试限流</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byResource&quot;, blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按资源名称限流测试ok&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,exception.getClass().getCanonicalName()+<span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按 url 测试限流</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按url限流测试ok&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动 Nacos、Sentinel、8401</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926093105136.png" alt="image-20220926093105136"></p>
<p>blockHandler：设置了就返回自定义的报错信息；没有就返回系统默认的‘</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926094236294.png" alt="image-20220926094236294"></p>
<p><img src="/2022/09/27/SpringCloud/image-20220926093317513.png" alt="image-20220926093317513"></p>
<p><font color="yellow">限流是临时的，停掉微服务后规则会直接消失</font></p>
<p><font color="red">把降级处理的信息改为统一类，降低 程序的耦合度</font></p>
<p>新建一个类用于统一返回降级信息：</p>
<p> <img src="/2022/09/27/SpringCloud/image-20220926100325572.png" alt="image-20220926100325572"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">&quot;按客户自定义，global handlerException---------1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">&quot;按客户自定义，global handlerException---------2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller:测试的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试降级的统一返回</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class="line"><span class="comment">// blockHandlerClass 指定哪个类是统一降级处理的类</span></span><br><span class="line"><span class="comment">// blockHandler 指定使用类中的哪个方法</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;customerBlockHandler&quot;,</span></span><br><span class="line"><span class="meta">                  blockHandlerClass = CustomerBlockHandler.class,</span></span><br><span class="line"><span class="meta">                  blockHandler = &quot;handlerException2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按客户自定义&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/09/27/SpringCloud/image-20220926100905503.png" alt="image-20220926100905503"></p>
<h3 id="7-Sentinel-服务熔断"><a href="#7-Sentinel-服务熔断" class="headerlink" title="7. Sentinel 服务熔断"></a>7. Sentinel 服务熔断</h3><p> Sentinel 整合 ribbon + openFeign + fallback</p>
<p>服务提供者：cloudAlibaba-provider-payment9003/9004      负载均衡</p>
<p>服务消费者：cloudAlibaba-consumer-nacos-order84</p>
<p><font color="red">Ribbon系列</font></p>
<h4 id="1-gt-创建提供者"><a href="#1-gt-创建提供者" class="headerlink" title="1&gt; 创建提供者"></a>1&gt; 创建提供者</h4><p>9003和9004相同，改下端口号就行</p>
<p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot 整合web组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把要监控的东西暴露出来</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>主启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9003</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9003.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller:  偷懒，用哈希表做数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟一个数据库</span></span><br><span class="line">    <span class="comment">// Payment 是自定义的那个类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Payment(<span class="number">1L</span>,<span class="string">&quot;28a82uj2h8d92hnv&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Payment(<span class="number">2L</span>,<span class="string">&quot;bb2jdu9283nd9ch1&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Payment(<span class="number">3L</span>,<span class="string">&quot;cv87ekd0293ncf82&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = hashMap.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;from mysql,serverPort:  &quot;</span> + serverPort, payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：启动 nacos、sentinel、9003、9004</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926144953921.png" alt="image-20220926144953921"></p>
<h4 id="2-gt-创建消费者"><a href="#2-gt-创建消费者" class="headerlink" title="2&gt; 创建消费者"></a>2&gt; 创建消费者</h4><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud alibaba sentinel-datasource-nacos 后续持久化使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 引入自定义的api通用包，调实体类entities --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#Nacos 服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描，直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者将要去访问的微服务名称（注册成功进nacos的微服务提供者）</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure>

<p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类：负载均衡</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<p><font color="pink">fallback 管运行异常（主业务逻辑的问题）</font></p>
<p><font color="pink">blockHandler管配置违规问题</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;)</span> <span class="comment">// 没有配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span> + id, CommonResult.class, id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java运行时异常，因为没有id为4的数据</span></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">&quot;IllegalAccessException,非法参数异常。。。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123; <span class="comment">// 输1-4以外直接空指针异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;NullPointerException,该ID没有对应记录，空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@SentinelResource的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handleFallback&quot;)</span> <span class="comment">// fallback只负责业务异常</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, blockHandler = &quot;blockHandler&quot;)</span> <span class="comment">// blockHandler只负责sentinel可视化控制台配置违规</span></span><br></pre></td></tr></table></figure>

<p>两个结合使用（报错时各找各妈）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// 两个一起用</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handleFallback&quot;, blockHandler = &quot;blockHandler&quot;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span> + id, CommonResult.class, id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">&quot;IllegalAccessException,非法参数异常。。。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;NullPointerException,该ID没有对应记录，空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本例是 fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id, Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;兜底异常handleFallback，exception内容 &quot;</span> + e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本例是 blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id, BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">&quot;blockException-sentinel限流，无此流水：blockException  &quot;</span> + blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Sentinel中设置熔断规则</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926152535585.png" alt="image-20220926152535585"></p>
<p>问题：如果异常同时触发 fallback 和 blockHandler；应该找谁？？</p>
<p>测试：调用 id 为4的接口，本为Java异常问题，但同时触发熔断规则</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926152832895.png" alt="image-20220926152832895"></p>
<p><font color="yellow">所以，若 fallback 和 blockHandler 都进行了配置，则被限流降级而抛出 BlockException 时只会进入 blockException 处理逻辑</font></p>
<p><font color="red">Feign系列</font></p>
<h4 id="3-gt-使用Feign调用微服务"><a href="#3-gt-使用Feign调用微服务" class="headerlink" title="3&gt; 使用Feign调用微服务"></a>3&gt; 使用Feign调用微服务</h4><p>Feign组件一般是消费侧</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926155734168.png" alt="image-20220926155734168"></p>
<p>添加pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud openfeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml:  激活 feign</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活Sentinel对feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>主启动：添加一个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure>

<p>service:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Feign 就是接口加注解</span></span><br><span class="line"><span class="comment">// fallback 去找它的实现方法</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="comment">// 带着 Feign 注解的业务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用 9003 和 9004的方法</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 降级的统一实现方法</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444444</span>,<span class="string">&quot;服务降级返回，------PaymentFallbackService&quot;</span>,<span class="keyword">new</span> Payment(id,<span class="string">&quot;ErrorSerial&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ====================OpenFeign</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926160212152.png" alt="image-20220926160212152"></p>
<p>关闭9003、9004；服务降级，不会拖垮服务器</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926160342379.png" alt="image-20220926160342379"></p>
<h4 id="4-gt-熔断框架比较"><a href="#4-gt-熔断框架比较" class="headerlink" title="4&gt; 熔断框架比较"></a>4&gt; 熔断框架比较</h4><table>
<thead>
<tr>
<th></th>
<th>Sentinel</th>
<th>Hystrix</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离(并发线程数限流)</td>
<td>线程池隔离/信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于响应时间、异常比率、异常数</td>
<td>基于异常比率</td>
</tr>
<tr>
<td>实时统计实现</td>
<td>滑动窗口(LeapArray)</td>
<td>滑动窗口(基于RxJava)</td>
</tr>
<tr>
<td>动态规则配置</td>
<td>支持多种数据源</td>
<td>支持多种数据源</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
</tr>
<tr>
<td>基于注解的支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>限流</td>
<td>基于QPS，支持基于调用关系的限流</td>
<td>有限的支持</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持预热模式、匀速器模式、预热排队模式</td>
<td>不支持</td>
</tr>
<tr>
<td>系统自适应保护</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td>
<td>简单的监控查看</td>
</tr>
</tbody></table>
<h3 id="8-规则持久化"><a href="#8-规则持久化" class="headerlink" title="8. 规则持久化"></a>8. 规则持久化</h3><p>存在问题：重启微服务后，Sentinel 规则会消失，生产环境需要将配置规则持久化</p>
<p>解决：规则配置注册进 Nacos 中</p>
<p>修改 cloudAlibaba-sentinel-service8401</p>
<p>pom：添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud alibaba sentinel-datasource-nacos 规则久化使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926172022503.png" alt="image-20220926172022503"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">	<span class="attr">ds1:</span></span><br><span class="line">    	<span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure>

<p>Nacos新增配置</p>
<p><img src="/2022/09/27/SpringCloud/image-20220926171953487.png" alt="image-20220926171953487"></p>
<img src="/2022/09/27/SpringCloud/image-20220926171909231.png" alt="image-20220926171909231" style="zoom:50%;">

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;/rateLimit/byUrl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limitApp&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;grade&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;controlBehavior&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;cluserMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>resource：资源名称</li>
<li>limitApp：来源应用</li>
<li>grade：阈值类型，0表示线程数，1表示QPS</li>
<li>count：单机阈值</li>
<li>strategy：流控模式，0表示直接，1表示关联，2表示链路</li>
<li>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待</li>
<li>cluserMode：是否集群</li>
</ul>
<p>测试：启动8401，访问接口 <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p>
<p><img src="/2022/09/27/SpringCloud/image-20220926172242332.png" alt="image-20220926172242332"></p>
<p>快速点击：规则生效<img src="/2022/09/27/SpringCloud/image-20220926172259629.png" alt="image-20220926172259629"></p>
<p><strong>重启 8401 后，再次调用接口，查看 Sentinel，规则重新出现</strong></p>
<h2 id="二十一、SpringCloud-Alibaba-Seata-处理分布式事务"><a href="#二十一、SpringCloud-Alibaba-Seata-处理分布式事务" class="headerlink" title="二十一、SpringCloud Alibaba Seata 处理分布式事务"></a>二十一、SpringCloud Alibaba Seata 处理分布式事务</h2><p>​    分布式之后，单体应用都被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作也需要调用三个服务来完成。<font color="yellow">此时每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性就无法保证。</font></p>
<p><strong>我们需要解决的问题就是：如何保证全局数据的一致性</strong></p>
<h3 id="1-Seata-简介"><a href="#1-Seata-简介" class="headerlink" title="1. Seata 简介"></a>1. Seata 简介</h3><p>​    Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事件</p>
<p>官网：<a href="https://seata.io/zh-cn/">https://seata.io/zh-cn/</a></p>
<p><font color="pink">一个典型的分布式事务过程：分布式事务处理过程的 一ID+三组件模型</font></p>
<ul>
<li>XID：全局唯一的事务ID</li>
<li>3组件概念<ol>
<li>TC——-事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚</li>
<li>TM——-事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务</li>
<li>RM——-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务的提交或回滚</li>
</ol>
</li>
</ul>
<p><font color="pink">处理过程：</font></p>
<p><img src="/2022/09/27/SpringCloud/image-20220927101736657.png" alt="image-20220927101736657"></p>
<ol>
<li><p>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID</p>
<p>（各个班的班主任TM向授课老师TC申请一个班级号）</p>
</li>
<li><p>XID 在微服务调用链路的上下文中传播</p>
<p>（班级号在学生们之间传播，让他们加入班级）</p>
</li>
<li><p>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖</p>
<p>（学生们加入授课老师的课堂，授课老师可以统一看到所有学生）</p>
</li>
<li><p>TM 向 TC 发起针对 XID 的全局提交或回滚协议</p>
<p>（班主任发起签到，然后告诉老师可以上课了；老师可以屏幕共享到所有学生）</p>
</li>
<li><p>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求</p>
<p>（下课休息，告知全部学生）</p>
</li>
</ol>]]></content>
  </entry>
</search>
