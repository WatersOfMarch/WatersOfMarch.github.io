<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx相关介绍</title>
    <url>/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Nginx-相关介绍-Nginx是什么？能干嘛？"><a href="#Nginx-相关介绍-Nginx是什么？能干嘛？" class="headerlink" title="Nginx 相关介绍(Nginx是什么？能干嘛？)"></a>Nginx 相关介绍(Nginx是什么？能干嘛？)</h1><h2 id="Nginx的产生"><a href="#Nginx的产生" class="headerlink" title="Nginx的产生"></a>Nginx的产生</h2><p>　　没有听过Nginx？那么一定听过它的”同行”Apache吧！Nginx同Apache一样都是一种WEB服务器，基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。</p>
<p>　　然而，这些服务器在设计之初受到当时环境的局限，例如当时的用户规模，网络带宽，产品特点等局限并且各自的定位和发展都不尽相同。这也使得各个WEB服务器有着各自鲜明的特点。</p>
<p>　　Apache的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。它是不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。</p>
<p>　　这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。</p>
<p>　　俄罗斯的工程师Igor Sysoev，他在为Rambler Media工作期间，使用C语言开发了Nginx。Nginx作为WEB服务器一直为Rambler Media提供出色而又稳定的服务。</p>
<p>然后呢，Igor Sysoev将Nginx代码开源，并且赋予自由软件许可证。</p>
<p>　　由于：</p>
<ul>
<li>Nginx使用基于事件驱动架构，使得其可以支持数以百万级别的TCP连接</li>
<li>高度的模块化和自由软件许可证使得第三方模块层出不穷（这是个开源的时代啊~）</li>
<li>Nginx是一个跨平台服务器，可以运行在Linux，Windows，FreeBSD，Solaris，AIX，Mac OS等操作系统上</li>
<li>这些优秀的设计带来的是极大的稳定性</li>
</ul>
<p>　　所以，Nginx火了！</p>
<h2 id="Nginx的用武之地"><a href="#Nginx的用武之地" class="headerlink" title="Nginx的用武之地"></a>Nginx的用武之地</h2><p>　　Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p>
<h3 id="关于代理"><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h3><p>　　说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；</p>
<p>　　此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店~客人到adidas专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是adidas厂家，目标角色就是用户。</p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>　　说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触的到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理。</p>
<p>　　在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个操作FQ进行访问，FQ的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</p>
<p>　　上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。来看个示意图（我把客户端和正向代理框在一块，同属于一个环境，后面我有介绍）：</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20181211123717325-1261206014.png" alt="img"></p>
<p>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</p>
<p>　　总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>　　<strong>正向代理的用途：</strong><br>（1）访问原来无法访问的资源，如Google<br>（2）可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>　　明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：<strong>分布式部署</strong>；也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/%E3%80%82%E9%82%A3%E4%B9%88%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%85%B7%E4%BD%93%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C%E5%91%A2%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%AA%E7%A4%BA%E6%84%8F%E5%9B%BE%EF%BC%88%E6%88%91%E6%8A%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%A1%86%E5%9C%A8%E4%B8%80%E5%9D%97%EF%BC%8C%E5%90%8C%E5%B1%9E%E4%BA%8E%E4%B8%80%E4%B8%AA%E7%8E%AF%E5%A2%83%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%88%91%E6%9C%89%E4%BB%8B%E7%BB%8D%EF%BC%89%EF%BC%9A">http://tengine.taobao.org/。那么反向代理具体是通过什么样的方式实现的分布式的集群操作呢，我们先看一个示意图（我把服务器和反向代理框在一块，同属于一个环境，后面我有介绍）：</a></p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406175939873-925019958.png" alt="img"></p>
<p>　　通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p>
<p>　　客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p>
<p>　　反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p>
<p>　　<strong>反向代理的作用：</strong><br>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网<br>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>
<h3 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h3><p>　　通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在在一个应用场景中，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器。具体的拓扑图如下：</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406180130452-1246060303.png" alt="img"></p>
<h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><p>　　截了一张图来说明正向代理和反向代理二者之间的区别，如图。</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20181211122806997-940664368.png" alt="img"></p>
<p>图解：</p>
<p>在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息；</p>
<p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p>
<p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>　　我们已经明确了所谓代理服务器的概念，那么接下来，Nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p>
<p>　　这里提到的客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p>
<p>　　请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p>
<p>　　所以，将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p>
<p>　　负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</p>
<p><img src="/2021/09/12/Nginx%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/1202586-20180406180405961-333776342.png" alt="img"></p>
<p><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p>
<ol>
<li>weight轮询（默认，常用，具有HA功效！）：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li>
<li>ip_hash（常用）：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li>
<li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li>
<li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li>
</ol>
<h2 id="几种常用的web服务器对比"><a href="#几种常用的web服务器对比" class="headerlink" title="几种常用的web服务器对比"></a>几种常用的web服务器对比</h2><table>
<thead>
<tr>
<th>对比项\服务器</th>
<th>Apache</th>
<th>Nginx</th>
<th>Lighttpd</th>
</tr>
</thead>
<tbody><tr>
<td>Proxy代理</td>
<td>非常好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Rewriter</td>
<td>好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Fcgi</td>
<td>不好</td>
<td>好</td>
<td>非常好</td>
</tr>
<tr>
<td>热部署</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>系统压力</td>
<td>很大</td>
<td>很小</td>
<td>比较小</td>
</tr>
<tr>
<td>稳定性</td>
<td>好</td>
<td>非常好</td>
<td>不好</td>
</tr>
<tr>
<td>安全性</td>
<td>好</td>
<td>一般</td>
<td>一般</td>
</tr>
<tr>
<td>静态文件处理</td>
<td>一般</td>
<td>非常好</td>
<td>好</td>
</tr>
<tr>
<td>反向代理</td>
<td>一般</td>
<td>非常好</td>
<td>一般</td>
</tr>
</tbody></table>
<ul>
<li>proxy代理的使用（解决跨域，配置多个代理）</li>
<li>Rewriter：隐藏路径或者隐藏参数的作用</li>
<li>fcgi作为中间层，需要与后端server通信进行数据处理</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Nginx部署Vue项目</title>
    <url>/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Nginx部署Vue项目"><a href="#Nginx部署Vue项目" class="headerlink" title="Nginx部署Vue项目"></a>Nginx部署Vue项目</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>下载 Xshell 连接阿里云服务器</li>
<li>下载 Xftp 便于管理文件和上传文件</li>
<li>打包好 vue 项目，出现一个dist文件夹，注意里头使用绝对路径</li>
</ol>
<h2 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h2><p>我的阿里云服务器装的 CentOS 系统，使用命令安装：</p>
<p>官方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>国内：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>

<p>启动 Docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>



<h2 id="三、通过-Docker-安装-Nginx"><a href="#三、通过-Docker-安装-Nginx" class="headerlink" title="三、通过 Docker 安装 Nginx"></a>三、通过 Docker 安装 Nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images             ------------列出本地镜像</span><br></pre></td></tr></table></figure>

<p>先查看下本地镜像，没有结果，因为还没有镜像，但也说明了我们 Docker 已经安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search nginx       ------------找到nginx相关镜像服务，后头是介绍</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908102511105.png" alt="image-20210908102511105"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx       ------------安装nginx</span><br><span class="line">docker images           ------------安装后再次查看</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908102817179.png" alt="image-20210908102817179"></p>
<p>启动该镜像，使用nginx服务，代理本机8080端口（服务器安全组需要开放8080端口）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name nginx-8080 nginx</span><br><span class="line"></span><br><span class="line">-d: 后台运行</span><br><span class="line">8080: 服务器端口</span><br><span class="line">80： nginx端口</span><br><span class="line">nginx-8080: 取容器名为此</span><br><span class="line">nginx: 镜像名</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps               ------------查看安装的容器，安装后会有一个id号</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908103920679.png" alt="image-20210908103920679"></p>
<p><strong>Docker 命令：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images                ------------列出本地镜像</span><br><span class="line">docker ps                    ------------列出容器(跑着的)</span><br><span class="line">docker ps -a                 ------------列出容器(跑+没跑)</span><br><span class="line">docker stop nginx-8080       ------------停止名为nginx-8080的服务</span><br><span class="line">docker restart nginx-8080    ------------重启</span><br></pre></td></tr></table></figure>



<p>在浏览器访问服务器 ip：8080  出现该图说明成功</p>
<img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908114359253.png" alt="image-20210908114359253" style="zoom: 80%;">



<h2 id="四、将vue项目上传到服务器上"><a href="#四、将vue项目上传到服务器上" class="headerlink" title="四、将vue项目上传到服务器上"></a>四、将vue项目上传到服务器上</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin             ------------里头的nginx用于启动</span><br><span class="line">/usr/local/nginx/conf/nginx.conf  ------------配置文件</span><br><span class="line">ps -ef | grep nginx               ------------查看安装目录</span><br></pre></td></tr></table></figure>

<p>用 Xftp 把 dist 文件夹上传到服务器，<strong>注意不要放在/root下，nginx访问不到root</strong></p>
<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908115305556.png" alt="image-20210908115305556"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">进入配置文件，按 i 进入编辑模式，按 Esc 退出编辑</span><br><span class="line">:q    退出</span><br><span class="line">：wq  保存操作退出</span><br></pre></td></tr></table></figure>

<img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908115916541.png" alt="image-20210908115916541" style="zoom:80%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启服务：(每次修改完都要保存重启)：</span><br><span class="line"></span><br><span class="line">让服务定位到配置文件：</span><br><span class="line">/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<p>打开浏览器访问公网地址，就能看到界面啦！！！</p>
<p><img src="/2021/09/08/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/image-20210908120431261.png" alt="image-20210908120431261"></p>
<h2 id="五、错误总结"><a href="#五、错误总结" class="headerlink" title="五、错误总结"></a>五、错误总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">404     ------------找不到文件，配置文件中 try_files未指定文件</span><br><span class="line">500     ------------路径对了，服务无法访问，因为文件放在/root里了</span><br><span class="line">访问后页面白屏  ------程序里没有是绝对路径</span><br><span class="line">有的页面部分图片加载不出   -------应该是我的服务器配置不够</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考文档：</span><br><span class="line">部署：</span><br><span class="line">https://blog.csdn.net/longqizhanshen/article/details/106963318</span><br><span class="line">https://www.jianshu.com/p/05f889faa74b</span><br><span class="line">报错：</span><br><span class="line">https://blog.csdn.net/weixin_43465090/article/details/89027047</span><br><span class="line">https://blog.csdn.net/qq_43059674/article/details/110296807</span><br><span class="line">https://blog.csdn.net/Xu_JL1997/article/details/105751623</span><br></pre></td></tr></table></figure>

<p>我们的项目是前后端分离，这样的话，就把8080端口占用掉了，需要把后端换个端口</p>]]></content>
  </entry>
  <entry>
    <title>springboot查询</title>
    <url>/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/</url>
    <content><![CDATA[<h1 id="SpringBoot-MyBatis-查询语句-（根据条件查询）"><a href="#SpringBoot-MyBatis-查询语句-（根据条件查询）" class="headerlink" title="SpringBoot + MyBatis 查询语句  （根据条件查询）"></a>SpringBoot + MyBatis 查询语句  （根据条件查询）</h1><h3 id="1-新建数据库和表内容"><a href="#1-新建数据库和表内容" class="headerlink" title="1.新建数据库和表内容"></a>1.新建数据库和表内容</h3><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722152711177.png"></p>
<p>全部根据 tt 中的数据进行查询</p>
<h3 id="2-创建工程目录结构（springboot创建好后）"><a href="#2-创建工程目录结构（springboot创建好后）" class="headerlink" title="2.创建工程目录结构（springboot创建好后）"></a>2.创建工程目录结构（springboot创建好后）</h3><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722152928143.png"></p>
<ul>
<li>pom.xml依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kejian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis.jar--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mySql的驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml（修改全局变量）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接数据库（我的是数据库名是kejain）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/kejian?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="comment">#?后增加编码格式</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> <span class="comment">#数据库用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment">#数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#扫描相关文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在resources目录下新建mybatis-config.xml（按需求添加，可以不要）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     使用jdbc的getGeneratedKeys获得数据库自增主键值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--           使用列标签替换列别名，默认true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        开启驼峰命名create_time-&gt;createTime--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>至此基础配置OK，在目录下添加类</strong></p>
<h2 id="3-entity层下添加实体类"><a href="#3-entity层下添加实体类" class="headerlink" title="3.entity层下添加实体类"></a>3.entity层下添加实体类</h2><p>entity包也有叫 pojo, damain， 都是一个意思</p>
<ul>
<li>新建 Poem.java（添加实体类，和数据库对应）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String tt;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String A;</span><br><span class="line">    <span class="keyword">private</span> String B;</span><br><span class="line">    <span class="keyword">private</span> String C;</span><br><span class="line">    <span class="keyword">private</span> String D;</span><br><span class="line">    <span class="keyword">private</span> String letter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTt</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tt = tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        A = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(String b)</span> </span>&#123;</span><br><span class="line">        B = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        C = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> D;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setD</span><span class="params">(String d)</span> </span>&#123;</span><br><span class="line">        D = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> letter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLetter</span><span class="params">(String letter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.letter = letter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Poem&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, time=&#x27;&quot;</span> + tt + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, A=&#x27;&quot;</span> + A + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, B=&#x27;&quot;</span> + B + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, C=&#x27;&quot;</span> + C + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, D=&#x27;&quot;</span> + D + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, letter=&#x27;&quot;</span> + letter + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-添加-mapper-操纵数据库"><a href="#4-添加-mapper-操纵数据库" class="headerlink" title="4.添加 mapper 操纵数据库"></a>4.添加 mapper 操纵数据库</h2><p>dao 层名为持久层，也可叫 mapper 层</p>
<ul>
<li>dao 层下新建PoemMapper.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PoemMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//因为需要返回多个，设为List</span></span><br><span class="line">    <span class="function">List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(<span class="meta">@Param(&quot;tt&quot;)</span>String time)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>resources 下新建 mapper 文件夹，存放dao 层 mapper 的映射文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是命名空间，对应dao层mapper文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.first_demo3.dao.PoemMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id名对应dao层mapper的函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findSome&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.first_demo3.entity.Poem&quot;</span>&gt;</span></span><br><span class="line">        select id,title,A,B,C,D,letter from poem where tt = #&#123;tt&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-添加业务逻辑"><a href="#5-添加业务逻辑" class="headerlink" title="5.添加业务逻辑"></a>5.添加业务逻辑</h2><p>service层为业务逻辑层，处理算法并返回数据给界面层</p>
<ul>
<li>service下新建 PoemService.java 选择接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PoemService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(String time)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>service下新建impl文件夹，管理映射</li>
<li>impl下新建PoemServiceImpl.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoemServiceImpl</span> <span class="keyword">implements</span> <span class="title">PoemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PoemMapper poemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Poem&gt; <span class="title">findSome</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> poemMapper.findSome(tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-终于可以写接口了"><a href="#6-终于可以写接口了" class="headerlink" title="6.终于可以写接口了"></a>6.终于可以写接口了</h2><p>controller 层又名界面层，调用 service</p>
<ul>
<li>controller 下新建PoemController.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">PoemController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> PoemService poemService;        </span><br><span class="line">    <span class="comment">//查找后返回部分数据    </span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get/&#123;tt&#125;&quot;)</span>    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Poem&gt;getSome(<span class="meta">@PathVariable</span> String tt)&#123;        <span class="keyword">return</span> poemService.findSome(tt);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-PostMan测试接口"><a href="#7-PostMan测试接口" class="headerlink" title="7.PostMan测试接口"></a>7.PostMan测试接口</h2><p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722160646581.png"></p>
<p>其他的雷同，在 /get/  输入对应的 tt 值就可调用</p>
<p><strong>最终的目录</strong></p>
<p><img src="/2021/08/01/springboot%E6%9F%A5%E8%AF%A2-0/image-20210722160822033.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    The author disclaims copyright to this source code.</span></span><br><span class="line"><span class="comment">**    In place of a legal notice, here is a blessing:</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**    May you do good and not evil.</span></span><br><span class="line"><span class="comment">**    May you find forgiveness for yourself and forgive others.</span></span><br><span class="line"><span class="comment">**    May you share freely, never taking more than you give.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>初探返回类</title>
    <url>/2021/08/05/%E5%88%9D%E6%8E%A2%E8%BF%94%E5%9B%9E%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="初探返回类"><a href="#初探返回类" class="headerlink" title="初探返回类"></a>初探返回类</h1><h2 id="为什么要对SpringBoot返回统一的标准格式"><a href="#为什么要对SpringBoot返回统一的标准格式" class="headerlink" title="为什么要对SpringBoot返回统一的标准格式"></a>为什么要对SpringBoot返回统一的标准格式</h2><p>默认情况下，SpringBoot的返回格式常见的有三种：</p>
<ul>
<li>返回String</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello,javadaily&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,javadaily</span><br></pre></td></tr></table></figure>

<ul>
<li>返回自定义对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/aniaml&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Aniaml <span class="title">getAniaml</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Aniaml aniaml = <span class="keyword">new</span> Aniaml(<span class="number">1</span>,<span class="string">&quot;pig&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> aniaml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pig&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/error&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">9</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用接口的返回值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-07-08T08:05:15.423+00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/wrong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于上述情况，如果和前端开发人员联调接口，前端人员就会一脸懵逼；由于我们没有给他统一的格式，所以无法处理这些返回值</p>
<p>或者，不同的人对结果进行封装，小明用Result对象，小张用Response对象，这样也是会抓狂的  ╭(°A°`)╮ </p>
<p>所以项目需要一个统一返回格式标准，一般公司开发都或有统一的格式要求</p>
<h2 id="定义返回标准格式"><a href="#定义返回标准格式" class="headerlink" title="定义返回标准格式"></a>定义返回标准格式</h2><p>一个标准的返回格式包括三个部分：</p>
<ol>
<li>status 状态值：由后端统一定义各种返回结果的状态码</li>
<li>message 描述：本次接口调用的结果描述</li>
<li>data 数据：本次返回的数据</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>:<span class="string">&quot;hello,javadaily&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以按照需要添加需要的信息</p>
<p>一种方式是可以直接在controller中返回成功的信息，但比较蠢，还会重复很多相同的动作，所以我们用一种更加便捷的方式来调用它</p>
<p><strong>创建一个枚举类 BackEnum 来存放所有的返回值结构</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 枚举类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BackEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 请求数据成功，无异常情况 */</span></span><br><span class="line">    REQUEST_SUCCESS(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 服务器异常 */</span></span><br><span class="line">    UNKNOWN_ERROR(<span class="number">500</span>,<span class="string">&quot;未知错误&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 无法获得用户session信息，或用户session信息不存在 */</span></span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>,<span class="string">&quot;请先登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 前端数据参数错误 */</span></span><br><span class="line">    PARAM_ERROR(<span class="number">400</span>,<span class="string">&quot;参数错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据不符合要求 */</span></span><br><span class="line">    DATA_ERROR(<span class="number">400</span>,<span class="string">&quot;数据错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求方式错误，get/post等 */</span></span><br><span class="line">    REQUEST_METHOD_ERROR(<span class="number">405</span>,<span class="string">&quot;请求方式错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码错误 */</span></span><br><span class="line">    PWD_ERROR(<span class="number">2</span>,<span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户名不存在 */</span></span><br><span class="line">    NO_USER(<span class="number">3</span>,<span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 账号长度过短，一般用于注册 */</span></span><br><span class="line">    ACCOUNT_LESS(<span class="number">4</span>,<span class="string">&quot;账号小于6位&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码长度过短，一般用于注册 */</span></span><br><span class="line">    PASSWORD_LESS(<span class="number">5</span>,<span class="string">&quot;密码过短&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据库已存在该数据 */</span></span><br><span class="line">    REPETITION(<span class="number">7</span>, <span class="string">&quot;数据重复添加&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">//注意语句间“逗号”隔开，语句最后“分号”结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举的构造函数是缺省的</span></span><br><span class="line">    BackEnum(Integer code, String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> message; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用生成 set 方法，因为ORDER_CREATE_FAIL已经吧code和message赋值了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>创建返回类 BackMessage 执行刚才的枚举类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.first_demo3.back.BackEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackMessage</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标识返回状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//返回成功或失败的一个消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//返回的数据类型，Object 在开发中返回的数据类型不确定</span></span><br><span class="line">    <span class="comment">//后续可以用泛型来解决</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何为属性赋值：一个构造函数，set方法</span></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(BackEnum backEnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=backEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message=backEnum.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(BackEnum backEnum, Object t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=backEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message=backEnum.getMessage();</span><br><span class="line">        <span class="keyword">this</span>.data=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackMessage</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重要的是上面3个构造函数，可以重载，通过参数来确定调用哪个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123; <span class="keyword">this</span>.code = code;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> message; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123; <span class="keyword">this</span>.data = data; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里返回中的data数据我使用的是 Object 类型，后续可以使用泛型<T>来定义</T></li>
</ul>
<h2 id="测试测试！！！-ง-•̀-•́-ง"><a href="#测试测试！！！-ง-•̀-•́-ง" class="headerlink" title="测试测试！！！ (ง •̀_•́)ง"></a>测试测试！！！ (ง •̀_•́)ง</h2><p>数据库信息：表名为check</p>
<p><img src="/2021/08/05/%E5%88%9D%E6%8E%A2%E8%BF%94%E5%9B%9E%E7%B1%BB/image-20210805181202470.png" alt="image-20210805181202470"></p>
<p>实体类就不贴出来了，就这些信息</p>
<p><strong>dao层的CheckMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(String number)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateCheck</span><span class="params">(Check check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CheckMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;get&quot;</span> resultType=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><br><span class="line">    SELECT n</span><br><span class="line">    FROM `check`</span><br><span class="line">    WHERE picture = #&#123;picture&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=<span class="string">&quot;updateCheck&quot;</span> parameterType=<span class="string">&quot;com.example.first_demo3.entity.Check&quot;</span>&gt;</span><br><span class="line">    update `check`</span><br><span class="line">    set n = #&#123;n,jdbcType=VARCHAR&#125;</span><br><span class="line">    where picture = #&#123;picture&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<p>重头重头！！！</p>
<p><strong>service层CheckService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckService</span> </span>&#123;</span><br><span class="line">    <span class="function">BackMessage <span class="title">get</span><span class="params">(String number)</span></span>;</span><br><span class="line">    <span class="function">BackMessage <span class="title">updateCheck</span><span class="params">(Check check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CheckServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckServiceImpl</span> <span class="keyword">implements</span> <span class="title">CheckService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CheckMapper checkMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">get</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">        String p = checkMapper.get(number);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BackMessage</span><br><span class="line">            (BackEnum.REQUEST_SUCCESS,p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">updateCheck</span><span class="params">(Check check)</span> </span>&#123;</span><br><span class="line">        checkMapper.updateCheck(check);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BackMessage</span><br><span class="line">            (BackEnum.REQUEST_SUCCESS,<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>controller层CheckController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CheckService checkService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get/&#123;picture&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BackMessage <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> String picture)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkService.get(picture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCheck</span><span class="params">(<span class="meta">@RequestBody</span> Check check)</span></span>&#123;</span><br><span class="line">        checkService.updateCheck(check);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>postman测试</strong></p>
<p>获取值接口：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">localhost:8081/check/get/1</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;111&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改接口：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">localhost:8081/update</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;picture&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;n&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此返回类成功写成，其余返回值大同小异</p>
<p>返回类的具体内容还可参照：</p>
<p><a href="https://zhuanlan.zhihu.com/p/391288136">SpringBoot 如何统一后端返回格式？老鸟们都是这样玩的！ - 知乎 (zhihu.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    The author disclaims copyright to this source code.</span></span><br><span class="line"><span class="comment">**    In place of a legal notice, here is a blessing:</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**    May you do good and not evil.</span></span><br><span class="line"><span class="comment">**    May you find forgiveness for yourself and forgive others.</span></span><br><span class="line"><span class="comment">**    May you share freely, never taking more than you give.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
